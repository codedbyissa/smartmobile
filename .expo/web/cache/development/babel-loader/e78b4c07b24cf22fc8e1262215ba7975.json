{"ast":null,"code":"import { LABEL_PADDING_HORIZONTAL, ADORNMENT_OFFSET, ADORNMENT_SIZE, FLAT_INPUT_OFFSET } from \"./constants\";\nimport { AdornmentType, AdornmentSide } from \"./Adornment/enums\";\nexport var calculateLabelTopPosition = function calculateLabelTopPosition(labelHeight) {\n  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var optionalPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var customHeight = height > 0 ? height : 0;\n  return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);\n};\nexport var calculateInputHeight = function calculateInputHeight(labelHeight) {\n  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var minHeight = arguments.length > 2 ? arguments[2] : undefined;\n  var finalHeight = height > 0 ? height : labelHeight;\n  if (height > 0) return height;\n  return finalHeight < minHeight ? minHeight : finalHeight;\n};\nexport var calculatePadding = function calculatePadding(props) {\n  var height = props.height,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline;\n  var result = 0;\n\n  if (multiline) {\n    if (height && multiline) {\n      result = calculateTextAreaPadding(props);\n    } else {\n      result = calculateInputPadding(props);\n    }\n  }\n\n  return Math.max(0, result);\n};\n\nvar calculateTextAreaPadding = function calculateTextAreaPadding(props) {\n  var dense = props.dense;\n  return dense ? 10 : 20;\n};\n\nvar calculateInputPadding = function calculateInputPadding(_ref) {\n  var topPosition = _ref.topPosition,\n      fontSize = _ref.fontSize,\n      multiline = _ref.multiline,\n      scale = _ref.scale,\n      dense = _ref.dense,\n      offset = _ref.offset,\n      isAndroid = _ref.isAndroid;\n  var refFontSize = scale * fontSize;\n  var result = Math.floor(topPosition / 2);\n  result = result + Math.floor((refFontSize - fontSize) / 2) - (scale < 1 ? offset / 2 : 0);\n  if (multiline && isAndroid) result = Math.min(dense ? offset / 2 : offset, result);\n  return result;\n};\n\nexport var adjustPaddingOut = function adjustPaddingOut(_ref2) {\n  var pad = _ref2.pad,\n      multiline = _ref2.multiline,\n      label = _ref2.label,\n      scale = _ref2.scale,\n      height = _ref2.height,\n      fontSize = _ref2.fontSize,\n      lineHeight = _ref2.lineHeight,\n      dense = _ref2.dense,\n      offset = _ref2.offset,\n      isAndroid = _ref2.isAndroid;\n  var fontHeight = lineHeight !== null && lineHeight !== void 0 ? lineHeight : fontSize;\n  var refFontHeight = scale * fontSize;\n  var result = pad;\n\n  if (height && !multiline) {\n    return {\n      paddingTop: Math.max(0, (height - fontHeight) / 2),\n      paddingBottom: Math.max(0, (height - fontHeight) / 2)\n    };\n  }\n\n  if (!isAndroid && multiline) {\n    if (dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, refFontHeight / 2 * scale) : 0;\n      } else {\n        result += 0;\n      }\n    }\n\n    if (!dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, refFontHeight * scale) : Math.min(offset / 2, refFontHeight * scale);\n      } else {\n        result += scale < 1 ? Math.min(offset / 2, refFontHeight * scale) : 0;\n      }\n    }\n\n    result = Math.floor(result);\n  }\n\n  return {\n    paddingTop: result,\n    paddingBottom: result\n  };\n};\nexport var adjustPaddingFlat = function adjustPaddingFlat(_ref3) {\n  var pad = _ref3.pad,\n      scale = _ref3.scale,\n      multiline = _ref3.multiline,\n      label = _ref3.label,\n      height = _ref3.height,\n      offset = _ref3.offset,\n      dense = _ref3.dense,\n      fontSize = _ref3.fontSize,\n      isAndroid = _ref3.isAndroid,\n      styles = _ref3.styles;\n  var result = pad;\n  var topResult = result;\n  var bottomResult = result;\n  var paddingTop = styles.paddingTop,\n      paddingBottom = styles.paddingBottom;\n  var refFontSize = scale * fontSize;\n\n  if (!multiline) {\n    if (label) {\n      return {\n        paddingTop: paddingTop,\n        paddingBottom: paddingBottom\n      };\n    }\n\n    return {\n      paddingTop: result,\n      paddingBottom: result\n    };\n  }\n\n  if (label) {\n    topResult = paddingTop;\n    bottomResult = paddingBottom;\n\n    if (!isAndroid) {\n      if (dense) {\n        topResult += scale < 1 ? Math.min(result, refFontSize * scale) - result / 2 : Math.min(result, refFontSize * scale) - result / 2;\n      }\n\n      if (!dense) {\n        topResult += scale < 1 ? Math.min(offset / 2, refFontSize * scale) : Math.min(result, refFontSize * scale) - offset / 2;\n      }\n    }\n\n    topResult = Math.floor(topResult);\n  } else {\n    if (height) {\n      return {\n        paddingTop: Math.max(0, (height - fontSize) / 2),\n        paddingBottom: Math.max(0, (height - fontSize) / 2)\n      };\n    }\n\n    if (!isAndroid) {\n      if (dense) {\n        result += scale < 1 ? Math.min(offset / 2, fontSize / 2 * scale) : Math.min(offset / 2, scale);\n      }\n\n      if (!dense) {\n        result += scale < 1 ? Math.min(offset, fontSize * scale) : Math.min(fontSize, offset / 2 * scale);\n      }\n\n      result = Math.floor(result);\n      topResult = result;\n      bottomResult = result;\n    }\n  }\n\n  return {\n    paddingTop: Math.max(0, topResult),\n    paddingBottom: Math.max(0, bottomResult)\n  };\n};\nexport var interpolatePlaceholder = function interpolatePlaceholder(labeled, hasActiveOutline) {\n  return labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasActiveOutline ? 0 : 1, 1]\n  });\n};\nexport function calculateFlatAffixTopPosition(_ref4) {\n  var height = _ref4.height,\n      paddingTop = _ref4.paddingTop,\n      paddingBottom = _ref4.paddingBottom,\n      affixHeight = _ref4.affixHeight;\n  var inputHeightWithoutPadding = height - paddingTop - paddingBottom;\n  var halfOfTheInputHeightDecreasedByAffixHeight = (inputHeightWithoutPadding - affixHeight) / 2;\n  return paddingTop + halfOfTheInputHeightDecreasedByAffixHeight;\n}\nexport function calculateOutlinedIconAndAffixTopPosition(_ref5) {\n  var height = _ref5.height,\n      affixHeight = _ref5.affixHeight,\n      labelYOffset = _ref5.labelYOffset;\n  return (height - affixHeight + labelYOffset) / 2;\n}\nexport var calculateFlatInputHorizontalPadding = function calculateFlatInputHorizontalPadding(_ref6) {\n  var adornmentConfig = _ref6.adornmentConfig;\n  var paddingLeft = LABEL_PADDING_HORIZONTAL;\n  var paddingRight = LABEL_PADDING_HORIZONTAL;\n  adornmentConfig.forEach(function (_ref7) {\n    var type = _ref7.type,\n        side = _ref7.side;\n\n    if (type === AdornmentType.Icon && side === AdornmentSide.Left) {\n      paddingLeft = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n    } else if (side === AdornmentSide.Right) {\n      if (type === AdornmentType.Affix) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      } else if (type === AdornmentType.Icon) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      }\n    }\n  });\n  return {\n    paddingLeft: paddingLeft,\n    paddingRight: paddingRight\n  };\n};","map":{"version":3,"sources":["helpers.tsx"],"names":["calculateLabelTopPosition","height","optionalPadding","customHeight","Math","calculateInputHeight","minHeight","finalHeight","calculatePadding","props","multiline","result","calculateTextAreaPadding","calculateInputPadding","dense","isAndroid","refFontSize","scale","topPosition","offset","adjustPaddingOut","fontHeight","lineHeight","refFontHeight","paddingTop","paddingBottom","adjustPaddingFlat","styles","topResult","bottomResult","fontSize","interpolatePlaceholder","inputRange","outputRange","hasActiveOutline","affixHeight","inputHeightWithoutPadding","halfOfTheInputHeightDecreasedByAffixHeight","labelYOffset","calculateFlatInputHorizontalPadding","adornmentConfig","paddingLeft","paddingRight","side","type","AdornmentType","AdornmentSide","ADORNMENT_SIZE"],"mappings":"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","sourcesContent":["import type { Animated } from 'react-native';\nimport type { AdornmentConfig } from './Adornment/types';\nimport {\n  LABEL_PADDING_HORIZONTAL,\n  ADORNMENT_OFFSET,\n  ADORNMENT_SIZE,\n  FLAT_INPUT_OFFSET,\n} from './constants';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\nimport type { TextInputLabelProp } from './types';\n\ntype PaddingProps = {\n  height: number | null;\n  labelHalfHeight: number;\n  multiline: boolean | null;\n  dense: boolean | null;\n  topPosition: number;\n  fontSize: number;\n  lineHeight?: number;\n  label?: TextInputLabelProp | null;\n  scale: number;\n  offset: number;\n  isAndroid: boolean;\n  styles: { paddingTop: number; paddingBottom: number };\n};\n\ntype AdjProps = PaddingProps & {\n  pad: number;\n};\n\nexport type Padding = { paddingTop: number; paddingBottom: number };\n\nexport const calculateLabelTopPosition = (\n  labelHeight: number,\n  height: number = 0,\n  optionalPadding: number = 0\n): number => {\n  const customHeight = height > 0 ? height : 0;\n\n  return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);\n};\n\nexport const calculateInputHeight = (\n  labelHeight: number,\n  height: any = 0,\n  minHeight: number\n): number => {\n  const finalHeight = height > 0 ? height : labelHeight;\n\n  if (height > 0) return height;\n  return finalHeight < minHeight ? minHeight : finalHeight;\n};\n\nexport const calculatePadding = (props: PaddingProps): number => {\n  const { height, multiline = false } = props;\n\n  let result = 0;\n\n  if (multiline) {\n    if (height && multiline) {\n      result = calculateTextAreaPadding(props);\n    } else {\n      result = calculateInputPadding(props);\n    }\n  }\n\n  return Math.max(0, result);\n};\n\nconst calculateTextAreaPadding = (props: PaddingProps) => {\n  const { dense } = props;\n\n  return dense ? 10 : 20;\n};\n\nconst calculateInputPadding = ({\n  topPosition,\n  fontSize,\n  multiline,\n  scale,\n  dense,\n  offset,\n  isAndroid,\n}: PaddingProps): number => {\n  const refFontSize = scale * fontSize;\n  let result = Math.floor(topPosition / 2);\n\n  result =\n    result +\n    Math.floor((refFontSize - fontSize) / 2) -\n    (scale < 1 ? offset / 2 : 0);\n\n  if (multiline && isAndroid)\n    result = Math.min(dense ? offset / 2 : offset, result);\n\n  return result;\n};\n\nexport const adjustPaddingOut = ({\n  pad,\n  multiline,\n  label,\n  scale,\n  height,\n  fontSize,\n  lineHeight,\n  dense,\n  offset,\n  isAndroid,\n}: AdjProps): Padding => {\n  const fontHeight = lineHeight ?? fontSize;\n  const refFontHeight = scale * fontSize;\n  let result = pad;\n\n  if (height && !multiline) {\n    return {\n      paddingTop: Math.max(0, (height - fontHeight) / 2),\n      paddingBottom: Math.max(0, (height - fontHeight) / 2),\n    };\n  }\n  if (!isAndroid && multiline) {\n    if (dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, (refFontHeight / 2) * scale) : 0;\n      } else {\n        result += 0;\n      }\n    }\n    if (!dense) {\n      if (label) {\n        result +=\n          scale < 1\n            ? Math.min(offset, refFontHeight * scale)\n            : Math.min(offset / 2, refFontHeight * scale);\n      } else {\n        result += scale < 1 ? Math.min(offset / 2, refFontHeight * scale) : 0;\n      }\n    }\n    result = Math.floor(result);\n  }\n  return { paddingTop: result, paddingBottom: result };\n};\n\nexport const adjustPaddingFlat = ({\n  pad,\n  scale,\n  multiline,\n  label,\n  height,\n  offset,\n  dense,\n  fontSize,\n  isAndroid,\n  styles,\n}: AdjProps): Padding => {\n  let result = pad;\n  let topResult = result;\n  let bottomResult = result;\n  const { paddingTop, paddingBottom } = styles;\n  const refFontSize = scale * fontSize;\n\n  if (!multiline) {\n    // do not modify padding if input is not multiline\n    if (label) {\n      // return const style for flat input with label\n      return { paddingTop, paddingBottom };\n    }\n    // return pad for flat input without label\n    return { paddingTop: result, paddingBottom: result };\n  }\n\n  if (label) {\n    // add paddings passed from styles\n    topResult = paddingTop;\n    bottomResult = paddingBottom;\n\n    // adjust top padding for iOS\n    if (!isAndroid) {\n      if (dense) {\n        topResult +=\n          scale < 1\n            ? Math.min(result, refFontSize * scale) - result / 2\n            : Math.min(result, refFontSize * scale) - result / 2;\n      }\n      if (!dense) {\n        topResult +=\n          scale < 1\n            ? Math.min(offset / 2, refFontSize * scale)\n            : Math.min(result, refFontSize * scale) - offset / 2;\n      }\n    }\n    topResult = Math.floor(topResult);\n  } else {\n    if (height) {\n      // center text when height is passed\n      return {\n        paddingTop: Math.max(0, (height - fontSize) / 2),\n        paddingBottom: Math.max(0, (height - fontSize) / 2),\n      };\n    }\n    // adjust paddings for iOS if no label\n    if (!isAndroid) {\n      if (dense) {\n        result +=\n          scale < 1\n            ? Math.min(offset / 2, (fontSize / 2) * scale)\n            : Math.min(offset / 2, scale);\n      }\n      if (!dense) {\n        result +=\n          scale < 1\n            ? Math.min(offset, fontSize * scale)\n            : Math.min(fontSize, (offset / 2) * scale);\n      }\n\n      result = Math.floor(result);\n      topResult = result;\n      bottomResult = result;\n    }\n  }\n\n  return {\n    paddingTop: Math.max(0, topResult),\n    paddingBottom: Math.max(0, bottomResult),\n  };\n};\n\nexport const interpolatePlaceholder = (\n  labeled: Animated.Value,\n  hasActiveOutline: boolean | undefined\n) =>\n  labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasActiveOutline ? 0 : 1, 1],\n  });\n\nexport function calculateFlatAffixTopPosition({\n  height,\n  paddingTop,\n  paddingBottom,\n  affixHeight,\n}: {\n  height: number;\n  paddingTop: number;\n  paddingBottom: number;\n  affixHeight: number;\n}): number {\n  const inputHeightWithoutPadding = height - paddingTop - paddingBottom;\n\n  const halfOfTheInputHeightDecreasedByAffixHeight =\n    (inputHeightWithoutPadding - affixHeight) / 2;\n\n  return paddingTop + halfOfTheInputHeightDecreasedByAffixHeight;\n}\n\nexport function calculateOutlinedIconAndAffixTopPosition({\n  height,\n  affixHeight,\n  labelYOffset,\n}: {\n  height: number;\n  affixHeight: number;\n  labelYOffset: number;\n}): number {\n  return (height - affixHeight + labelYOffset) / 2;\n}\n\nexport const calculateFlatInputHorizontalPadding = ({\n  adornmentConfig,\n}: {\n  adornmentConfig: AdornmentConfig[];\n}) => {\n  let paddingLeft = LABEL_PADDING_HORIZONTAL;\n  let paddingRight = LABEL_PADDING_HORIZONTAL;\n\n  adornmentConfig.forEach(({ type, side }) => {\n    if (type === AdornmentType.Icon && side === AdornmentSide.Left) {\n      paddingLeft = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n    } else if (side === AdornmentSide.Right) {\n      if (type === AdornmentType.Affix) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      } else if (type === AdornmentType.Icon) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      }\n    }\n  });\n\n  return { paddingLeft, paddingRight };\n};\n"]},"metadata":{},"sourceType":"module"}