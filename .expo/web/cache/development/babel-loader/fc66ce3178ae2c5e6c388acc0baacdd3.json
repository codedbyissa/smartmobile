{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AnimatedText from \"../../Typography/AnimatedText\";\n\nvar InputLabel = function InputLabel(props) {\n  var parentState = props.parentState,\n      labelBackground = props.labelBackground;\n  var _props$labelProps = props.labelProps,\n      label = _props$labelProps.label,\n      error = _props$labelProps.error,\n      onLayoutAnimatedText = _props$labelProps.onLayoutAnimatedText,\n      hasActiveOutline = _props$labelProps.hasActiveOutline,\n      activeColor = _props$labelProps.activeColor,\n      placeholderStyle = _props$labelProps.placeholderStyle,\n      baseLabelTranslateX = _props$labelProps.baseLabelTranslateX,\n      baseLabelTranslateY = _props$labelProps.baseLabelTranslateY,\n      font = _props$labelProps.font,\n      fontSize = _props$labelProps.fontSize,\n      fontWeight = _props$labelProps.fontWeight,\n      placeholderOpacity = _props$labelProps.placeholderOpacity,\n      wiggleOffsetX = _props$labelProps.wiggleOffsetX,\n      labelScale = _props$labelProps.labelScale,\n      topPosition = _props$labelProps.topPosition,\n      paddingOffset = _props$labelProps.paddingOffset,\n      placeholderColor = _props$labelProps.placeholderColor,\n      errorColor = _props$labelProps.errorColor,\n      labelTranslationXOffset = _props$labelProps.labelTranslationXOffset,\n      maxFontSizeMultiplier = _props$labelProps.maxFontSizeMultiplier;\n  var labelTranslationX = {\n    transform: [{\n      translateX: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0]\n      })\n    }]\n  };\n\n  var labelStyle = _objectSpread(_objectSpread({}, font), {}, {\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    transform: [{\n      translateX: parentState.error.interpolate({\n        inputRange: [0, 0.5, 1],\n        outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0]\n      })\n    }, {\n      translateY: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateY, 0]\n      })\n    }, {\n      scale: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [labelScale, 1]\n      })\n    }]\n  });\n\n  return label ? React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.labelContainer, {\n      opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1\n    }, labelTranslationX]\n  }, labelBackground === null || labelBackground === void 0 ? void 0 : labelBackground({\n    parentState: parentState,\n    labelStyle: labelStyle,\n    labelProps: props.labelProps,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }), React.createElement(AnimatedText, {\n    onLayout: onLayoutAnimatedText,\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset || {}, {\n      color: activeColor,\n      opacity: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [hasActiveOutline ? 1 : 0, 0]\n      })\n    }],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, label), React.createElement(AnimatedText, {\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset, {\n      color: error && errorColor ? errorColor : placeholderColor,\n      opacity: placeholderOpacity\n    }],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, label)) : null;\n};\n\nvar styles = StyleSheet.create({\n  labelContainer: {\n    zIndex: 3\n  }\n});\nexport default InputLabel;","map":{"version":3,"sources":["InputLabel.tsx"],"names":["InputLabel","props","labelBackground","maxFontSizeMultiplier","labelTranslationX","transform","translateX","inputRange","outputRange","labelTranslationXOffset","labelStyle","fontSize","fontWeight","parentState","translateY","scale","label","StyleSheet","styles","opacity","labelProps","top","topPosition","paddingOffset","color","hasActiveOutline","error","placeholderOpacity","labelContainer","zIndex"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport AnimatedText from '../../Typography/AnimatedText';\n\nimport type { InputLabelProps } from '../types';\n\nconst InputLabel = (props: InputLabelProps) => {\n  const { parentState, labelBackground } = props;\n\n  const {\n    label,\n    error,\n    onLayoutAnimatedText,\n    hasActiveOutline,\n    activeColor,\n    placeholderStyle,\n    baseLabelTranslateX,\n    baseLabelTranslateY,\n    font,\n    fontSize,\n    fontWeight,\n    placeholderOpacity,\n    wiggleOffsetX,\n    labelScale,\n    topPosition,\n    paddingOffset,\n    placeholderColor,\n    errorColor,\n    labelTranslationXOffset,\n    maxFontSizeMultiplier,\n  } = props.labelProps;\n\n  const labelTranslationX = {\n    transform: [\n      {\n        // Offset label scale since RN doesn't support transform origin\n        translateX: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0],\n        }),\n      },\n    ],\n  };\n\n  const labelStyle = {\n    ...font,\n    fontSize,\n    fontWeight,\n    transform: [\n      {\n        // Wiggle the label when there's an error\n        translateX: parentState.error.interpolate({\n          inputRange: [0, 0.5, 1],\n          outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0],\n        }),\n      },\n      {\n        // Move label to top\n        translateY: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateY, 0],\n        }),\n      },\n      {\n        // Make label smaller\n        scale: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [labelScale, 1],\n        }),\n      },\n    ],\n  };\n\n  return label ? (\n    // Position colored placeholder and gray placeholder on top of each other and crossfade them\n    // This gives the effect of animating the color, but allows us to use native driver\n    <Animated.View\n      pointerEvents=\"none\"\n      style={[\n        StyleSheet.absoluteFill,\n        styles.labelContainer,\n        {\n          opacity:\n            // Hide the label in minimized state until we measure it's width\n            parentState.value || parentState.focused\n              ? parentState.labelLayout.measured\n                ? 1\n                : 0\n              : 1,\n        },\n        labelTranslationX,\n      ]}\n    >\n      {labelBackground?.({\n        parentState,\n        labelStyle,\n        labelProps: props.labelProps,\n        maxFontSizeMultiplier: maxFontSizeMultiplier,\n      })}\n      <AnimatedText\n        onLayout={onLayoutAnimatedText}\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset || {},\n          {\n            color: activeColor,\n            opacity: parentState.labeled.interpolate({\n              inputRange: [0, 1],\n              outputRange: [hasActiveOutline ? 1 : 0, 0],\n            }),\n          },\n        ]}\n        numberOfLines={1}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n      >\n        {label}\n      </AnimatedText>\n      <AnimatedText\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset,\n          {\n            color: error && errorColor ? errorColor : placeholderColor,\n            opacity: placeholderOpacity,\n          },\n        ]}\n        numberOfLines={1}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n      >\n        {label}\n      </AnimatedText>\n    </Animated.View>\n  ) : null;\n};\n\nconst styles = StyleSheet.create({\n  labelContainer: {\n    zIndex: 3,\n  },\n});\n\nexport default InputLabel;\n"]},"metadata":{},"sourceType":"module"}