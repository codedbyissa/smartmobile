{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar formatToList = function formatToList(items) {\n  return items.map(function (key) {\n    return \"- \" + key;\n  }).join('\\n');\n};\n\nexport default function validatePathConfig(config) {\n  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var validKeys = ['initialRouteName', 'screens'];\n\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n\n  var invalidKeys = Object.keys(config).filter(function (key) {\n    return !validKeys.includes(key);\n  });\n\n  if (invalidKeys.length) {\n    throw new Error(\"Found invalid properties in the configuration:\\n\" + formatToList(invalidKeys) + \"\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n\" + formatToList(validKeys) + \"\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n  }\n\n  if (config.screens) {\n    Object.entries(config.screens).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          _ = _ref2[0],\n          value = _ref2[1];\n\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}","map":{"version":3,"sources":["validatePathConfig.tsx"],"names":["formatToList","items","key","root","validKeys","invalidKeys","Object","config","validatePathConfig"],"mappings":";;AAAA,IAAMA,YAAY,GAAIC,SAAhBD,YAAgBC,CAAAA,KAAD;EAAA,OACnBA,KAAK,CAALA,GAAAA,CAAWC,UAAAA,GAAD;IAAA,cAAVD,GAAU;EAAA,CAAVA,EAAAA,IAAAA,CADF,IACEA,CADmB;AAAA,CAArB;;AAGA,eAAe,SAAA,kBAAA,CAAA,MAAA,EAAsD;EAAA,IAAbE,IAAa,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAN,IAAM;EACnE,IAAMC,SAAS,GAAG,CAAA,kBAAA,EAAlB,SAAkB,CAAlB;;EAEA,IAAI,CAAJ,IAAA,EAAW;IACTA,SAAS,CAATA,IAAAA,CAAAA,MAAAA,EAAAA,OAAAA,EAAAA,WAAAA,EAAAA,OAAAA;EACD;;EAED,IAAMC,WAAW,GAAGC,MAAM,CAANA,IAAAA,CAAAA,MAAAA,EAAAA,MAAAA,CACjBJ,UAAAA,GAAD;IAAA,OAAS,CAACE,SAAS,CAATA,QAAAA,CADZ,GACYA,CAAV;EAAA,CADkBE,CAApB;;EAIA,IAAID,WAAW,CAAf,MAAA,EAAwB;IACtB,MAAM,IAAA,KAAA,sDAC+CL,YAAY,CAAA,WAAA,CAD3D,0HAGkHA,YAAY,CAHpI,SAGoI,CAH9H,4HAAN;EAOD;;EAED,IAAIO,MAAM,CAAV,OAAA,EAAoB;IAClBD,MAAM,CAANA,OAAAA,CAAeC,MAAM,CAArBD,OAAAA,EAAAA,OAAAA,CAAuC,UAAA,IAAA,EAAgB;MAAf,2BAAe,IAAf;MAAA,IAAA,CAAA;MAAA,IAAA,KAAA;;MACtC,IAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;QAC7BE,kBAAkB,CAAA,KAAA,EAAlBA,KAAkB,CAAlBA;MACD;IAHHF,CAAAA;EAKD;AACF","sourcesContent":["const formatToList = (items: string[]) =>\n  items.map((key) => `- ${key}`).join('\\n');\n\nexport default function validatePathConfig(config: any, root = true) {\n  const validKeys = ['initialRouteName', 'screens'];\n\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n\n  const invalidKeys = Object.keys(config).filter(\n    (key) => !validKeys.includes(key)\n  );\n\n  if (invalidKeys.length) {\n    throw new Error(\n      `Found invalid properties in the configuration:\\n${formatToList(\n        invalidKeys\n      )}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(\n        validKeys\n      )}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`\n    );\n  }\n\n  if (config.screens) {\n    Object.entries(config.screens).forEach(([_, value]) => {\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}