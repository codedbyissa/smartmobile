{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { nanoid } from 'nanoid/non-secure';\nvar BaseRouter = {\n  getStateForAction: function getStateForAction(state, action) {\n    switch (action.type) {\n      case 'SET_PARAMS':\n        {\n          var index = action.source ? state.routes.findIndex(function (r) {\n            return r.key === action.source;\n          }) : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          return _objectSpread(_objectSpread({}, state), {}, {\n            routes: state.routes.map(function (r, i) {\n              return i === index ? _objectSpread(_objectSpread({}, r), {}, {\n                params: _objectSpread(_objectSpread({}, r.params), action.payload.params)\n              }) : r;\n            })\n          });\n        }\n\n      case 'RESET':\n        {\n          var nextState = action.payload;\n\n          if (nextState.routes.length === 0 || nextState.routes.some(function (route) {\n            return !state.routeNames.includes(route.name);\n          })) {\n            return null;\n          }\n\n          if (nextState.stale === false) {\n            if (state.routeNames.length !== nextState.routeNames.length || nextState.routeNames.some(function (name) {\n              return !state.routeNames.includes(name);\n            })) {\n              return null;\n            }\n\n            return _objectSpread(_objectSpread({}, nextState), {}, {\n              routes: nextState.routes.map(function (route) {\n                return route.key ? route : _objectSpread(_objectSpread({}, route), {}, {\n                  key: route.name + \"-\" + nanoid()\n                });\n              })\n            });\n          }\n\n          return nextState;\n        }\n\n      default:\n        return null;\n    }\n  },\n  shouldActionChangeFocus: function shouldActionChangeFocus(action) {\n    return action.type === 'NAVIGATE';\n  }\n};\nexport default BaseRouter;","map":{"version":3,"sources":["BaseRouter.tsx"],"names":["BaseRouter","getStateForAction","action","index","state","r","routes","params","nextState","route","name","key","nanoid","shouldActionChangeFocus"],"mappings":";;;;;;AAAA,SAAA,MAAA,QAAA,mBAAA;AAYA,IAAMA,UAAU,GAAG;EACjBC,iBADiB,6BACA,KADA,EACA,MADA,EAIqB;IACpC,QAAQC,MAAM,CAAd,IAAA;MACE,KAAA,YAAA;QAAmB;UACjB,IAAMC,KAAK,GAAGD,MAAM,CAANA,MAAAA,GACVE,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CAAwBC,UAAAA,CAAD;YAAA,OAAOA,CAAC,CAADA,GAAAA,KAAUH,MAAM,CADpCA,MACa;UAAA,CAAvBE,CADUF,GAEVE,KAAK,CAFT,KAAA;;UAIA,IAAID,KAAK,KAAK,CAAd,CAAA,EAAkB;YAChB,OAAA,IAAA;UACD;;UAED,uCAAO,KAAP;YAEEG,MAAM,EAAE,KAAK,CAAL,MAAA,CAAA,GAAA,CAAiB,UAAA,CAAA,EAAA,CAAA;cAAA,OACvB,CAAC,KAAD,KAAA,mCACI,CADJ;gBACYC,MAAM,kCAAOF,CAAC,CAAN,MAAF,GAAoBH,MAAM,CAANA,OAAAA,CAAeK,MAAnC;cADlB,KADM,CAAiB;YAAA,CAAjB;UAFV;QAQD;;MAED,KAAA,OAAA;QAAc;UACZ,IAAMC,SAAS,GAAGN,MAAM,CAAxB,OAAA;;UAEA,IACEM,SAAS,CAATA,MAAAA,CAAAA,MAAAA,KAAAA,CAAAA,IACAA,SAAS,CAATA,MAAAA,CAAAA,IAAAA,CACGC,UAAAA,KAAD;YAAA,OAA6B,CAACL,KAAK,CAALA,UAAAA,CAAAA,QAAAA,CAA0BK,KAAK,CAHjE,IAGkCL,CAA9B;UAAA,CADFI,CAFF,EAKE;YACA,OAAA,IAAA;UACD;;UAED,IAAIA,SAAS,CAATA,KAAAA,KAAJ,KAAA,EAA+B;YAC7B,IACEJ,KAAK,CAALA,UAAAA,CAAAA,MAAAA,KAA4BI,SAAS,CAATA,UAAAA,CAA5BJ,MAAAA,IACAI,SAAS,CAATA,UAAAA,CAAAA,IAAAA,CACGE,UAAAA,IAAD;cAAA,OAAU,CAACN,KAAK,CAALA,UAAAA,CAAAA,QAAAA,CAHf,IAGeA,CAAX;YAAA,CADFI,CAFF,EAKE;cACA,OAAA,IAAA;YACD;;YAED,uCAAO,SAAP;cAEEF,MAAM,EAAE,SAAS,CAAT,MAAA,CAAA,GAAA,CAAsBG,UAAAA,KAAD;gBAAA,OAC3BA,KAAK,CAALA,GAAAA,GAAAA,KAAAA,mCAAoB,KAApBA;kBAAgCE,GAAG,EAAKF,KAAK,CAACC,IAAX,SAAmBE,MAAM;gBAA5DH,EAD2B;cAAA,CAArB;YAFV;UAMD;;UAED,OAAA,SAAA;QACD;;MAED;QACE,OAAA,IAAA;IAtDJ;EALe,CAAA;EA+DjBI,uBA/DiB,mCA+DM,MA/DN,EA+DuC;IACtD,OAAOX,MAAM,CAANA,IAAAA,KAAP,UAAA;EACD;AAjEgB,CAAnB;AAoEA,eAAA,UAAA","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport type {\n  CommonNavigationAction,\n  NavigationState,\n  PartialState,\n} from './types';\n\n/**\n * Base router object that can be used when writing custom routers.\n * This provides few helper methods to handle common actions such as `RESET`.\n */\nconst BaseRouter = {\n  getStateForAction<State extends NavigationState>(\n    state: State,\n    action: CommonNavigationAction\n  ): State | PartialState<State> | null {\n    switch (action.type) {\n      case 'SET_PARAMS': {\n        const index = action.source\n          ? state.routes.findIndex((r) => r.key === action.source)\n          : state.index;\n\n        if (index === -1) {\n          return null;\n        }\n\n        return {\n          ...state,\n          routes: state.routes.map((r, i) =>\n            i === index\n              ? { ...r, params: { ...r.params, ...action.payload.params } }\n              : r\n          ),\n        };\n      }\n\n      case 'RESET': {\n        const nextState = action.payload as State | PartialState<State>;\n\n        if (\n          nextState.routes.length === 0 ||\n          nextState.routes.some(\n            (route: { name: string }) => !state.routeNames.includes(route.name)\n          )\n        ) {\n          return null;\n        }\n\n        if (nextState.stale === false) {\n          if (\n            state.routeNames.length !== nextState.routeNames.length ||\n            nextState.routeNames.some(\n              (name) => !state.routeNames.includes(name)\n            )\n          ) {\n            return null;\n          }\n\n          return {\n            ...nextState,\n            routes: nextState.routes.map((route) =>\n              route.key ? route : { ...route, key: `${route.name}-${nanoid()}` }\n            ),\n          };\n        }\n\n        return nextState;\n      }\n\n      default:\n        return null;\n    }\n  },\n\n  shouldActionChangeFocus(action: CommonNavigationAction) {\n    return action.type === 'NAVIGATE';\n  },\n};\n\nexport default BaseRouter;\n"]},"metadata":{},"sourceType":"module"}