{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"elevation\", \"onLongPress\", \"onPress\", \"mode\", \"children\", \"style\", \"theme\", \"testID\", \"accessible\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { white, black } from \"../../styles/colors\";\nimport CardContent from \"./CardContent\";\nimport CardActions from \"./CardActions\";\nimport CardCover from \"./CardCover\";\nimport CardTitle from \"./CardTitle\";\nimport Surface from \"../Surface\";\nimport { withTheme } from \"../../core/theming\";\n\nvar Card = function Card(_ref) {\n  var _ref$elevation = _ref.elevation,\n      cardElevation = _ref$elevation === void 0 ? 1 : _ref$elevation,\n      onLongPress = _ref.onLongPress,\n      onPress = _ref.onPress,\n      _ref$mode = _ref.mode,\n      cardMode = _ref$mode === void 0 ? 'elevated' : _ref$mode,\n      children = _ref.children,\n      style = _ref.style,\n      theme = _ref.theme,\n      testID = _ref.testID,\n      accessible = _ref.accessible,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new Animated.Value(cardElevation)),\n      elevation = _React$useRef.current;\n\n  var _React$useRef2 = React.useRef(new Animated.Value(cardElevation)),\n      elevationDarkAdaptive = _React$useRef2.current;\n\n  var animation = theme.animation,\n      dark = theme.dark,\n      mode = theme.mode,\n      roundness = theme.roundness;\n  var prevDarkRef = React.useRef(dark);\n  React.useEffect(function () {\n    prevDarkRef.current = dark;\n  });\n  var prevDark = prevDarkRef.current;\n  var isAdaptiveMode = mode === 'adaptive';\n  var animationDuration = 150 * animation.scale;\n  React.useEffect(function () {\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [prevDark, dark, isAdaptiveMode, cardElevation, elevation, elevationDarkAdaptive]);\n\n  var runElevationAnimation = function runElevationAnimation(pressType) {\n    var isPressTypeIn = pressType === 'in';\n\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n\n  var handlePressIn = function handlePressIn() {\n    runElevationAnimation('in');\n  };\n\n  var handlePressOut = function handlePressOut() {\n    runElevationAnimation('out');\n  };\n\n  var total = React.Children.count(children);\n  var siblings = React.Children.map(children, function (child) {\n    return React.isValidElement(child) && child.type ? child.type.displayName : null;\n  });\n  var borderColor = color(dark ? white : black).alpha(0.12).rgb().string();\n  var computedElevation = dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n  return React.createElement(Surface, _extends({\n    style: [{\n      borderRadius: roundness,\n      elevation: computedElevation,\n      borderColor: borderColor\n    }, cardMode === 'outlined' ? styles.outlined : {}, style],\n    theme: theme\n  }, rest), React.createElement(TouchableWithoutFeedback, {\n    delayPressIn: 0,\n    disabled: !(onPress || onLongPress),\n    onLongPress: onLongPress,\n    onPress: onPress,\n    onPressIn: onPress || onLongPress ? handlePressIn : undefined,\n    onPressOut: onPress || onLongPress ? handlePressOut : undefined,\n    testID: testID,\n    accessible: accessible\n  }, React.createElement(View, {\n    style: styles.innerContainer\n  }, React.Children.map(children, function (child, index) {\n    return React.isValidElement(child) ? React.cloneElement(child, {\n      index: index,\n      total: total,\n      siblings: siblings\n    }) : child;\n  }))));\n};\n\nCard.Content = CardContent;\nCard.Actions = CardActions;\nCard.Cover = CardCover;\nCard.Title = CardTitle;\nvar styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1\n  }\n});\nexport default withTheme(Card);","map":{"version":3,"sources":["Card.tsx"],"names":["Card","elevation","cardElevation","mode","cardMode","rest","current","React","Animated","elevationDarkAdaptive","roundness","prevDarkRef","prevDark","isAdaptiveMode","animationDuration","animation","dark","runElevationAnimation","pressType","isPressTypeIn","toValue","duration","useNativeDriver","handlePressIn","handlePressOut","total","siblings","child","borderColor","color","computedElevation","borderRadius","styles","theme","onPress","accessible","innerContainer","index","flexGrow","flexShrink","outlined","borderWidth","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport { white, black } from '../../styles/colors';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n\ntype OutlinedCardProps = {\n  mode: 'outlined';\n  elevation?: never;\n};\n\ntype ElevatedCardProps = {\n  mode?: 'elevated';\n  elevation?: number;\n};\n\ntype HandlePressType = 'in' | 'out';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: never | number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Mode of the Card.\n   * - `elevated` - Card with elevation.\n   * - `outlined` - Card with an outline.\n   */\n  mode?: 'elevated' | 'outlined';\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  mode: cardMode = 'elevated',\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: (OutlinedCardProps | ElevatedCardProps) & Props) => {\n  // Default animated value\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  // Dark adaptive animated value, used in case of toggling the theme,\n  // it prevents animating the background with native drivers inside Surface\n  const { current: elevationDarkAdaptive } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  const { animation, dark, mode, roundness } = theme;\n\n  const prevDarkRef = React.useRef<boolean>(dark);\n  React.useEffect(() => {\n    prevDarkRef.current = dark;\n  });\n\n  const prevDark = prevDarkRef.current;\n  const isAdaptiveMode = mode === 'adaptive';\n  const animationDuration = 150 * animation.scale;\n\n  React.useEffect(() => {\n    /**\n     * Resets animations values if updating to dark adaptive mode,\n     * otherwise, any card that is in the middle of animation while\n     * toggling the theme will stay at that animated value until\n     * the next press-in\n     */\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [\n    prevDark,\n    dark,\n    isAdaptiveMode,\n    cardElevation,\n    elevation,\n    elevationDarkAdaptive,\n  ]);\n\n  const runElevationAnimation = (pressType: HandlePressType) => {\n    const isPressTypeIn = pressType === 'in';\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false,\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressIn = () => {\n    runElevationAnimation('in');\n  };\n\n  const handlePressOut = () => {\n    runElevationAnimation('out');\n  };\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  const borderColor = color(dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n  const computedElevation =\n    dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n\n  return (\n    <Surface\n      style={[\n        { borderRadius: roundness, elevation: computedElevation, borderColor },\n        cardMode === 'outlined' ? styles.outlined : {},\n        style,\n      ]}\n      theme={theme}\n      {...rest}\n    >\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress || onLongPress ? handlePressIn : undefined}\n        onPressOut={onPress || onLongPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]},"metadata":{},"sourceType":"module"}