{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"color\", \"size\", \"accessibilityLabel\", \"disabled\", \"onPress\", \"animated\", \"theme\", \"style\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport TouchableRipple from \"./TouchableRipple/TouchableRipple\";\nimport Icon from \"./Icon\";\nimport CrossFadeIcon from \"./CrossFadeIcon\";\nimport { withTheme } from \"../core/theming\";\n\nvar IconButton = function IconButton(_ref) {\n  var icon = _ref.icon,\n      customColor = _ref.color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      accessibilityLabel = _ref.accessibilityLabel,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      _ref$animated = _ref.animated,\n      animated = _ref$animated === void 0 ? false : _ref$animated,\n      theme = _ref.theme,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var iconColor = typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  var rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  var IconComponent = animated ? CrossFadeIcon : Icon;\n  var buttonSize = size * 1.5;\n  return React.createElement(TouchableRipple, _extends({\n    borderless: true,\n    centered: true,\n    onPress: onPress,\n    rippleColor: rippleColor,\n    style: [styles.container, {\n      width: buttonSize,\n      height: buttonSize,\n      borderRadius: buttonSize / 2\n    }, disabled && styles.disabled, style],\n    accessibilityLabel: accessibilityLabel,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    disabled: disabled,\n    hitSlop: TouchableRipple.supported ? {\n      top: 10,\n      left: 10,\n      bottom: 10,\n      right: 10\n    } : {\n      top: 6,\n      left: 6,\n      bottom: 6,\n      right: 6\n    }\n  }, rest), React.createElement(View, null, React.createElement(IconComponent, {\n    color: iconColor,\n    source: icon,\n    size: size\n  })));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6\n  },\n  disabled: {\n    opacity: 0.32\n  }\n});\nexport default withTheme(IconButton);","map":{"version":3,"sources":["IconButton.tsx"],"names":["IconButton","color","size","animated","rest","iconColor","theme","rippleColor","IconComponent","buttonSize","styles","width","height","borderRadius","disabled","top","left","bottom","right","container","alignItems","justifyContent","overflow","margin","opacity","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AASA,OAAA,KAAA,MAAA,OAAA;AAEA,OAAA,eAAA;AACA,OAAA,IAAA;AACA,OAAA,aAAA;AACA,SAAA,SAAA;;AA2EA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAAA,IAAA,EAWN;EAXO,IAAA,IAAA,GAWP,IAXO,CAAA,IAAA;EAAA,IAAA,WAAA,GAWP,IAXO,CAElBC,KAFkB;EAAA,gBAWP,IAXO,CAGlBC,IAHkB;EAAA,IAGlBA,IAHkB,0BAAA,EAAA;EAAA,IAAA,kBAAA,GAWP,IAXO,CAAA,kBAAA;EAAA,IAAA,QAAA,GAWP,IAXO,CAAA,QAAA;EAAA,IAAA,OAAA,GAWP,IAXO,CAAA,OAAA;EAAA,oBAWP,IAXO,CAOlBC,QAPkB;EAAA,IAOlBA,QAPkB,8BAAA,KAAA;EAAA,IAAA,KAAA,GAWP,IAXO,CAAA,KAAA;EAAA,IAAA,KAAA,GAWP,IAXO,CAAA,KAAA;EAAA,IAUfC,IAVe,4BAWP,IAXO;;EAYlB,IAAMC,SAAS,GACb,OAAA,WAAA,KAAA,WAAA,GAAA,WAAA,GAAmDC,KAAK,CAALA,MAAAA,CADrD,IAAA;EAEA,IAAMC,WAAW,GAAGN,KAAK,CAALA,SAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAApB,MAAoBA,EAApB;EACA,IAAMO,aAAa,GAAGL,QAAQ,GAAA,aAAA,GAA9B,IAAA;EACA,IAAMM,UAAU,GAAGP,IAAI,GAAvB,GAAA;EACA,OACE,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA,QAAA,CAAA;IACE,UAAU,EADZ,IAAA;IAEE,QAAQ,EAFV,IAAA;IAGE,OAAO,EAHT,OAAA;IAIE,WAAW,EAJb,WAAA;IAKE,KAAK,EAAE,CACLQ,MAAM,CADD,SAAA,EAEL;MAAEC,KAAK,EAAP,UAAA;MAAqBC,MAAM,EAA3B,UAAA;MAAyCC,YAAY,EAAEJ,UAAU,GAAG;IAApE,CAFK,EAGLK,QAAQ,IAAIJ,MAAM,CAHb,QAAA,EALT,KAKS,CALT;IAWE,kBAAkB,EAXpB,kBAAA;IAaE,mBAAmB,EAAEI,QAAQ,GAAG,CAAA,QAAA,EAAH,UAAG,CAAH,GAb/B,QAAA;IAcE,0BAA0B,EAd5B,QAAA;IAeE,iBAAiB,EAfnB,QAAA;IAgBE,kBAAkB,EAAE;MAAEA,QAAAA,EAAAA;IAAF,CAhBtB;IAiBE,QAAQ,EAjBV,QAAA;IAkBE,OAAO,EACL,eAAe,CAAf,SAAA,GACI;MAAEC,GAAG,EAAL,EAAA;MAAWC,IAAI,EAAf,EAAA;MAAqBC,MAAM,EAA3B,EAAA;MAAiCC,KAAK,EAAE;IAAxC,CADJ,GAEI;MAAEH,GAAG,EAAL,CAAA;MAAUC,IAAI,EAAd,CAAA;MAAmBC,MAAM,EAAzB,CAAA;MAA8BC,KAAK,EAAE;IAArC;EArBR,CAAA,EAAA,IAAA,CAAA,EAyBE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;IAAe,KAAK,EAApB,SAAA;IAAiC,MAAM,EAAvC,IAAA;IAA+C,IAAI,EAAEhB;EAArD,CAAA,CADF,CAzBF,CADF;AAjBF,CAAA;;AAkDA,IAAMQ,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BS,SAAS,EAAE;IACTC,UAAU,EADD,QAAA;IAETC,cAAc,EAFL,QAAA;IAGTC,QAAQ,EAHC,QAAA;IAITC,MAAM,EAAE;EAJC,CADoB;EAO/BT,QAAQ,EAAE;IACRU,OAAO,EAAE;EADD;AAPqB,CAAlB,CAAf;AAYA,eAAeC,SAAS,CAAxB,UAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport color from 'color';\n\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport Icon, { IconSource } from './Icon';\nimport CrossFadeIcon from './CrossFadeIcon';\nimport { withTheme } from '../core/theming';\n\nimport type { $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color?: string;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst IconButton = ({\n  icon,\n  color: customColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  animated = false,\n  theme,\n  style,\n  ...rest\n}: Props) => {\n  const iconColor =\n    typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  const rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const buttonSize = size * 1.5;\n  return (\n    <TouchableRipple\n      borderless\n      centered\n      onPress={onPress}\n      rippleColor={rippleColor}\n      style={[\n        styles.container,\n        { width: buttonSize, height: buttonSize, borderRadius: buttonSize / 2 },\n        disabled && styles.disabled,\n        style,\n      ]}\n      accessibilityLabel={accessibilityLabel}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled }}\n      disabled={disabled}\n      hitSlop={\n        TouchableRipple.supported\n          ? { top: 10, left: 10, bottom: 10, right: 10 }\n          : { top: 6, left: 6, bottom: 6, right: 6 }\n      }\n      {...rest}\n    >\n      <View>\n        <IconComponent color={iconColor} source={icon} size={size} />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6,\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default withTheme(IconButton);\n"]},"metadata":{},"sourceType":"module"}