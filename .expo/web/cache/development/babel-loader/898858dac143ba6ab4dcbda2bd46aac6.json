{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nexport default function useOnRouteFocus(_ref) {\n  var router = _ref.router,\n      getState = _ref.getState,\n      sourceRouteKey = _ref.key,\n      setState = _ref.setState;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      onRouteFocusParent = _React$useContext.onRouteFocus;\n\n  return React.useCallback(function (key) {\n    var state = getState();\n    var result = router.getStateForRouteFocus(state, key);\n\n    if (result !== state) {\n      setState(result);\n    }\n\n    if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n      onRouteFocusParent(sourceRouteKey);\n    }\n  }, [getState, onRouteFocusParent, router, setState, sourceRouteKey]);\n}","map":{"version":3,"sources":["useOnRouteFocus.tsx"],"names":["key","setState","onRouteFocus","onRouteFocusParent","React","state","getState","result","router","sourceRouteKey"],"mappings":"AAKA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,wBAAA;AAcA,eAAe,SAAA,eAAA,CAAA,IAAA,EAKK;EALqD,IAAA,MAAA,GAKrD,IALqD,CAAA,MAAA;EAAA,IAAA,QAAA,GAKrD,IALqD,CAAA,QAAA;EAAA,IAAA,cAAA,GAKrD,IALqD,CAGvEA,GAHuE;EAAA,IAIvEC,QAJuE,GAKrD,IALqD,CAIvEA,QAJuE;;EAMvE,wBAA6CG,KAAK,CAALA,UAAAA,CAA7C,wBAA6CA,CAA7C;EAAA,IAAsBD,kBAAtB,qBAAQD,YAAR;;EAIA,OAAO,KAAK,CAAL,WAAA,CACJF,UAAAA,GAAD,EAAiB;IACf,IAAMK,KAAK,GAAGC,QAAd,EAAA;IACA,IAAMC,MAAM,GAAGC,MAAM,CAANA,qBAAAA,CAAAA,KAAAA,EAAf,GAAeA,CAAf;;IAEA,IAAID,MAAM,KAAV,KAAA,EAAsB;MACpBN,QAAQ,CAARA,MAAQ,CAARA;IACD;;IAED,IAAIE,kBAAkB,KAAlBA,SAAAA,IAAoCM,cAAc,KAAtD,SAAA,EAAsE;MACpEN,kBAAkB,CAAlBA,cAAkB,CAAlBA;IACD;EAXE,CAAA,EAaL,CAAA,QAAA,EAAA,kBAAA,EAAA,MAAA,EAAA,QAAA,EAbF,cAaE,CAbK,CAAP;AAeD","sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\n\ntype Options<Action extends NavigationAction> = {\n  router: Router<NavigationState, Action>;\n  getState: () => NavigationState;\n  setState: (state: NavigationState) => void;\n  key?: string;\n};\n\n/**\n * Hook to handle focus actions for a route.\n * Focus action needs to be treated specially, coz when a nested route is focused,\n * the parent navigators also needs to be focused.\n */\nexport default function useOnRouteFocus<Action extends NavigationAction>({\n  router,\n  getState,\n  key: sourceRouteKey,\n  setState,\n}: Options<Action>) {\n  const { onRouteFocus: onRouteFocusParent } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  return React.useCallback(\n    (key: string) => {\n      const state = getState();\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (result !== state) {\n        setState(result);\n      }\n\n      if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n        onRouteFocusParent(sourceRouteKey);\n      }\n    },\n    [getState, onRouteFocusParent, router, setState, sourceRouteKey]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}