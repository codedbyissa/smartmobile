{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport { loadAsync } from 'expo-font';\nexport function useFonts(map) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loaded = _useState2[0],\n      setLoaded = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  useEffect(function () {\n    loadAsync(map).then(function () {\n      return setLoaded(true);\n    }).catch(setError);\n  }, []);\n  return [loaded, error];\n}","map":{"version":3,"names":["useEffect","useState","loadAsync","useFonts","map","loaded","setLoaded","error","setError","then","catch"],"sources":["C:/React N/SmartMobile/node_modules/@expo-google-fonts/inter/useFonts.js"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { loadAsync } from 'expo-font';\n\n/**\n * Load a map of custom fonts to use in textual elements.\n * The map keys are used as font names, and can be used with `fontFamily: <name>;`.\n * It returns a boolean describing if all fonts are loaded.\n *\n * Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @see https://docs.expo.io/versions/latest/sdk/font/\n * @example const [loaded, error] = useFonts(...);\n */\nexport function useFonts(map) {\n  let [loaded, setLoaded] = useState(false);\n  let [error, setError] = useState(null);\n\n  useEffect(() => {\n    loadAsync(map)\n      .then(() => setLoaded(true))\n      .catch(setError);\n  }, []);\n\n  return [loaded, error];\n}\n"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,SAAT,QAA0B,WAA1B;AAYA,OAAO,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;EAC5B,gBAA0BH,QAAQ,CAAC,KAAD,CAAlC;EAAA;EAAA,IAAKI,MAAL;EAAA,IAAaC,SAAb;;EACA,iBAAwBL,QAAQ,CAAC,IAAD,CAAhC;EAAA;EAAA,IAAKM,KAAL;EAAA,IAAYC,QAAZ;;EAEAR,SAAS,CAAC,YAAM;IACdE,SAAS,CAACE,GAAD,CAAT,CACGK,IADH,CACQ;MAAA,OAAMH,SAAS,CAAC,IAAD,CAAf;IAAA,CADR,EAEGI,KAFH,CAESF,QAFT;EAGD,CAJQ,EAIN,EAJM,CAAT;EAMA,OAAO,CAACH,MAAD,EAASE,KAAT,CAAP;AACD"},"metadata":{},"sourceType":"module"}