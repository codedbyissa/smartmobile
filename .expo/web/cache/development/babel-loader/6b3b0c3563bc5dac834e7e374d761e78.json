{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"size\", \"style\", \"theme\"],\n    _excluded2 = [\"backgroundColor\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Icon from \"../Icon\";\nimport { withTheme } from \"../../core/theming\";\nimport { white } from \"../../styles/colors\";\nimport getContrastingColor from \"../../utils/getContrastingColor\";\nvar defaultSize = 64;\n\nvar Avatar = function Avatar(_ref) {\n  var _rest$color;\n\n  var icon = _ref.icon,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? defaultSize : _ref$size,\n      style = _ref.style,\n      theme = _ref.theme,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _ref2 = StyleSheet.flatten(style) || {},\n      _ref2$backgroundColor = _ref2.backgroundColor,\n      backgroundColor = _ref2$backgroundColor === void 0 ? theme.colors.primary : _ref2$backgroundColor,\n      restStyle = _objectWithoutProperties(_ref2, _excluded2);\n\n  var textColor = (_rest$color = rest.color) !== null && _rest$color !== void 0 ? _rest$color : getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n  return React.createElement(View, _extends({\n    style: [{\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor: backgroundColor\n    }, styles.container, restStyle]\n  }, rest), React.createElement(Icon, {\n    source: icon,\n    color: textColor,\n    size: size * 0.6\n  }));\n};\n\nAvatar.displayName = 'Avatar.Icon';\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default withTheme(Avatar);","map":{"version":3,"sources":["AvatarIcon.tsx"],"names":["defaultSize","Avatar","size","rest","backgroundColor","theme","restStyle","StyleSheet","textColor","getContrastingColor","width","height","borderRadius","styles","container","justifyContent","alignItems","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAEA,OAAA,IAAA;AACA,SAAA,SAAA;AACA,SAAA,KAAA;AACA,OAAA,mBAAA;AAEA,IAAMA,WAAW,GAAjB,EAAA;;AAyCA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAA,IAAA,EAAgE;EAAA,IAAA,WAAA;;EAA/D,IAAA,IAAA,GAA+D,IAA/D,CAAA,IAAA;EAAA,gBAA+D,IAA/D,CAAQC,IAAR;EAAA,IAAQA,IAAR,0BAAA,WAAA;EAAA,IAAA,KAAA,GAA+D,IAA/D,CAAA,KAAA;EAAA,IAAA,KAAA,GAA+D,IAA/D,CAAA,KAAA;EAAA,IAA6CC,IAA7C,4BAA+D,IAA/D;;EACd,YACEI,UAAU,CAAVA,OAAAA,CAAAA,KAAAA,KADF,EAAA;EAAA,kCAAQH,eAAR;EAAA,IAAQA,eAAR,sCAA0BC,KAAK,CAALA,MAAAA,CAApB,OAAN;EAAA,IAAmDC,SAAnD;;EAEA,IAAME,SAAS,GAAA,CAAA,WAAA,GACbL,IAAI,CADS,KAAA,MAAA,IAAA,IAAA,WAAA,KAAA,KAAA,CAAA,GAAA,WAAA,GAEbM,mBAAmB,CAAA,eAAA,EAAA,KAAA,EAFrB,oBAEqB,CAFrB;EAIA,OACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;IACE,KAAK,EAAE,CACL;MACEC,KAAK,EADP,IAAA;MAEEC,MAAM,EAFR,IAAA;MAGEC,YAAY,EAAEV,IAAI,GAHpB,CAAA;MAIEE,eAAAA,EAAAA;IAJF,CADK,EAOLS,MAAM,CAPD,SAAA,EAAA,SAAA;EADT,CAAA,EAAA,IAAA,CAAA,EAaE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;IAAM,MAAM,EAAZ,IAAA;IAAoB,KAAK,EAAzB,SAAA;IAAsC,IAAI,EAAEX,IAAI,GAAG;EAAnD,CAAA,CAbF,CADF;AAPF,CAAA;;AA0BAD,MAAM,CAANA,WAAAA,GAAAA,aAAAA;AAEA,IAAMY,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BC,SAAS,EAAE;IACTC,cAAc,EADL,QAAA;IAETC,UAAU,EAAE;EAFH;AADoB,CAAlB,CAAf;AAOA,eAAeC,SAAS,CAAxB,MAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\nimport getContrastingColor from '../../utils/getContrastingColor';\n\nconst defaultSize = 64;\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Icon to display for the `Avatar`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the icon.\n   */\n  color?: string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Icon size={24} icon=\"folder\" />\n * );\n * ```\n */\nconst Avatar = ({ icon, size = defaultSize, style, theme, ...rest }: Props) => {\n  const { backgroundColor = theme.colors.primary, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor =\n    rest.color ??\n    getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      <Icon source={icon} color={textColor} size={size * 0.6} />\n    </View>\n  );\n};\n\nAvatar.displayName = 'Avatar.Icon';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(Avatar);\n"]},"metadata":{},"sourceType":"module"}