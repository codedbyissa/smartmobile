{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { EventEmitter, UnavailabilityError } from 'expo-modules-core';\nimport ExpoClipboard from \"./ExpoClipboard\";\nvar emitter = new EventEmitter(ExpoClipboard);\nvar onClipboardEventName = 'onClipboardChanged';\nexport { EventEmitter };\nexport function getStringAsync() {\n  return _regeneratorRuntime.async(function getStringAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExpoClipboard.getStringAsync) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Clipboard', 'getStringAsync');\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(ExpoClipboard.getStringAsync());\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setString(text) {\n  if (!ExpoClipboard.setString) {\n    throw new UnavailabilityError('Clipboard', 'setString');\n  }\n\n  return ExpoClipboard.setString(text);\n}\nexport function addClipboardListener(listener) {\n  return emitter.addListener(onClipboardEventName, listener);\n}\nexport function removeClipboardListener(subscription) {\n  emitter.removeSubscription(subscription);\n}","map":{"version":3,"sources":["../src/Clipboard.ts"],"names":[],"mappings":";AAAA,SAAS,YAAT,EAAqC,mBAArC,QAAgE,mBAAhE;AAEA,OAAO,aAAP;AAEA,IAAM,OAAO,GAAG,IAAI,YAAJ,CAAiB,aAAjB,CAAhB;AAEA,IAAM,oBAAoB,GAAG,oBAA7B;AASA,SAAuB,YAAvB;AAQA,OAAO,SAAe,cAAf;EAAA;IAAA;MAAA;QAAA;UAAA,IACA,aAAa,CAAC,cADd;YAAA;YAAA;UAAA;;UAAA,MAEG,IAAI,mBAAJ,CAAwB,WAAxB,EAAqC,gBAArC,CAFH;;QAAA;UAAA;UAAA,iCAIQ,aAAa,CAAC,cAAd,EAJR;;QAAA;UAAA;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAeP,OAAM,SAAU,SAAV,CAAoB,IAApB,EAAgC;EACpC,IAAI,CAAC,aAAa,CAAC,SAAnB,EAA8B;IAC5B,MAAM,IAAI,mBAAJ,CAAwB,WAAxB,EAAqC,WAArC,CAAN;EACD;;EACD,OAAO,aAAa,CAAC,SAAd,CAAwB,IAAxB,CAAP;AACD;AAgBD,OAAM,SAAU,oBAAV,CAA+B,QAA/B,EAAwE;EAC5E,OAAO,OAAO,CAAC,WAAR,CAAoC,oBAApC,EAA0D,QAA1D,CAAP;AACD;AAeD,OAAM,SAAU,uBAAV,CAAkC,YAAlC,EAA4D;EAChE,OAAO,CAAC,kBAAR,CAA2B,YAA3B;AACD","sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoClipboard from './ExpoClipboard';\n\nconst emitter = new EventEmitter(ExpoClipboard);\n\nconst onClipboardEventName = 'onClipboardChanged';\n\ntype ClipboardEvent = {\n  /**\n   * The new content of the user's clipboard.\n   */\n  content: string;\n};\n\nexport { Subscription, EventEmitter, ClipboardEvent };\n\n/**\n * Gets the content of the user's clipboard. Please note that calling this method on web will prompt\n * the user to grant your app permission to \"see text and images copied to the clipboard.\"\n *\n * @returns A promise that resolves to the content of the clipboard.\n */\nexport async function getStringAsync(): Promise<string> {\n  if (!ExpoClipboard.getStringAsync) {\n    throw new UnavailabilityError('Clipboard', 'getStringAsync');\n  }\n  return await ExpoClipboard.getStringAsync();\n}\n\n/**\n * Sets the content of the user's clipboard.\n *\n * @param text The string to save to the clipboard.\n *\n * @returns On web, this returns a boolean value indicating whether or not the string was saved to\n * the user's clipboard. On iOS and Android, nothing is returned.\n */\nexport function setString(text: string): void {\n  if (!ExpoClipboard.setString) {\n    throw new UnavailabilityError('Clipboard', 'setString');\n  }\n  return ExpoClipboard.setString(text);\n}\n\n/**\n * Adds a listener that will fire whenever the content of the user's clipboard changes. This method\n * is a no-op on Web.\n *\n * @param listener Callback to execute when listener is triggered. The callback is provided a\n * single argument that is an object with a `content` key.\n *\n * @example\n * ```typescript\n * addClipboardListener(({ content }: ClipboardEvent) => {\n *   alert('Copy pasta! Here's the string that was copied: ' + content);\n * });\n * ```\n */\nexport function addClipboardListener(listener: (event: ClipboardEvent) => void): Subscription {\n  return emitter.addListener<ClipboardEvent>(onClipboardEventName, listener);\n}\n\n/**\n * Removes the listener added by addClipboardListener. This method is a no-op on Web.\n *\n * @param subscription The subscription to remove (created by addClipboardListener).\n *\n * @example\n * ```typescript\n * const subscription = addClipboardListener(() => {\n *   alert('Copy pasta!');\n * });\n * removeClipboardListener(subscription);\n * ```\n */\nexport function removeClipboardListener(subscription: Subscription) {\n  emitter.removeSubscription(subscription);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}