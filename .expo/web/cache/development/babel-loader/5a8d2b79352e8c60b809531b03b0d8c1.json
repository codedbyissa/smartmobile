{"ast":null,"code":"import NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { getAssetByID } from \"./AssetRegistry\";\nimport AssetSourceResolver from \"./AssetSourceResolver\";\n\nvar _customSourceTransformer;\n\nvar _serverURL;\n\nvar _sourceCodeScriptURL;\n\nfunction getSourceCodeScriptURL() {\n  var _sourceCode;\n\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n\n  var sourceCode = typeof nativeExtensions !== 'undefined' ? nativeExtensions.SourceCode : null;\n\n  if (!sourceCode) {\n    sourceCode = NativeModules == null ? void 0 : NativeModules.SourceCode;\n  }\n\n  _sourceCodeScriptURL = (_sourceCode = sourceCode) == null ? void 0 : _sourceCode.scriptURL;\n  return _sourceCodeScriptURL;\n}\n\nfunction getDevServerURL() {\n  if (_serverURL === undefined) {\n    var sourceCodeScriptURL = getSourceCodeScriptURL();\n    var match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n\n    if (match) {\n      _serverURL = match[0];\n    } else {\n      _serverURL = null;\n    }\n  }\n\n  return _serverURL;\n}\n\nexport function setCustomSourceTransformer(transformer) {\n  _customSourceTransformer = transformer;\n}\nexport default function resolveAssetSource(source) {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  var asset = getAssetByID(source);\n\n  if (!asset) {\n    return undefined;\n  }\n\n  var resolver = new AssetSourceResolver(getDevServerURL(), null, asset);\n\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n\n  return resolver.defaultAsset();\n}\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get: function get() {\n    return setCustomSourceTransformer;\n  }\n});\nvar pickScale = AssetSourceResolver.pickScale;\nexport { pickScale };","map":{"version":3,"sources":["../src/resolveAssetSource.web.ts"],"names":[],"mappings":";AAEA,SAAS,YAAT;AACA,OAAO,mBAAP;;AAIA,IAAI,wBAAJ;;AACA,IAAI,UAAJ;;AACA,IAAI,oBAAJ;;AAEA,SAAS,sBAAT,GAA+B;EAAA;;EAC7B,IAAI,oBAAJ,EAA0B;IACxB,OAAO,oBAAP;EACD;;EAED,IAAI,UAAU,GAAG,OAAO,gBAAP,KAA4B,WAA5B,GAA0C,gBAAgB,CAAC,UAA3D,GAAwE,IAAzF;;EACA,IAAI,CAAC,UAAL,EAAiB;IACf,UAAU,GAAG,aAAH,oBAAG,aAAa,CAAE,UAA5B;EACD;;EACD,oBAAoB,kBAAG,UAAH,qBAAG,YAAY,SAAnC;EACA,OAAO,oBAAP;AACD;;AAED,SAAS,eAAT,GAAwB;EACtB,IAAI,UAAU,KAAK,SAAnB,EAA8B;IAC5B,IAAM,mBAAmB,GAAG,sBAAsB,EAAlD;IACA,IAAM,KAAK,GAAG,mBAAmB,IAAI,mBAAmB,CAAC,KAApB,CAA0B,mBAA1B,CAArC;;IACA,IAAI,KAAJ,EAAW;MAET,UAAU,GAAG,KAAK,CAAC,CAAD,CAAlB;IACD,CAHD,MAGO;MAEL,UAAU,GAAG,IAAb;IACD;EACF;;EACD,OAAO,UAAP;AACD;;AAED,OAAM,SAAU,0BAAV,CACJ,WADI,EAC+D;EAEnE,wBAAwB,GAAG,WAA3B;AACD;AAMD,eAAc,SAAU,kBAAV,CAA6B,MAA7B,EAAwC;EACpD,IAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;IAC9B,OAAO,MAAP;EACD;;EAED,IAAM,KAAK,GAAG,YAAY,CAAC,MAAD,CAA1B;;EACA,IAAI,CAAC,KAAL,EAAY;IACV,OAAO,SAAP;EACD;;EAED,IAAM,QAAQ,GAAG,IAAI,mBAAJ,CAAwB,eAAe,EAAvC,EAA2C,IAA3C,EAAiD,KAAjD,CAAjB;;EACA,IAAI,wBAAJ,EAA8B;IAC5B,OAAO,wBAAwB,CAAC,QAAD,CAA/B;EACD;;EACD,OAAO,QAAQ,CAAC,YAAT,EAAP;AACD;AAED,MAAM,CAAC,cAAP,CAAsB,kBAAtB,EAA0C,4BAA1C,EAAwE;EACtE,GADsE,iBACnE;IACD,OAAO,0BAAP;EACD;AAHqE,CAAxE;AAMO,IAAQ,SAAR,GAAsB,mBAAtB,CAAQ,SAAR","sourcesContent":["import { NativeModules } from 'react-native';\n\nimport { getAssetByID } from './AssetRegistry';\nimport AssetSourceResolver, { ResolvedAssetSource } from './AssetSourceResolver';\n\ndeclare let nativeExtensions: { SourceCode?: { scriptURL: string } } | undefined;\n\nlet _customSourceTransformer;\nlet _serverURL: string | undefined | null;\nlet _sourceCodeScriptURL: string | undefined | null;\n\nfunction getSourceCodeScriptURL(): string | undefined | null {\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n\n  let sourceCode = typeof nativeExtensions !== 'undefined' ? nativeExtensions.SourceCode : null;\n  if (!sourceCode) {\n    sourceCode = NativeModules?.SourceCode;\n  }\n  _sourceCodeScriptURL = sourceCode?.scriptURL;\n  return _sourceCodeScriptURL;\n}\n\nfunction getDevServerURL(): string | null {\n  if (_serverURL === undefined) {\n    const sourceCodeScriptURL = getSourceCodeScriptURL();\n    const match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      // jsBundle was loaded from network\n      _serverURL = match[0];\n    } else {\n      // jsBundle was loaded from file\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\n\nexport function setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource\n): void {\n  _customSourceTransformer = transformer;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nexport default function resolveAssetSource(source: any): ResolvedAssetSource | undefined {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  const asset = getAssetByID(source);\n  if (!asset) {\n    return undefined;\n  }\n\n  const resolver = new AssetSourceResolver(getDevServerURL(), null, asset);\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get() {\n    return setCustomSourceTransformer;\n  },\n});\n\nexport const { pickScale } = AssetSourceResolver;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}