{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport { useState } from 'react';\nimport useNavigation from \"./useNavigation\";\nexport default function useIsFocused() {\n  var navigation = useNavigation();\n\n  var _useState = useState(navigation.isFocused),\n      _useState2 = _slicedToArray(_useState, 2),\n      isFocused = _useState2[0],\n      setIsFocused = _useState2[1];\n\n  var valueToReturn = navigation.isFocused();\n\n  if (isFocused !== valueToReturn) {\n    setIsFocused(valueToReturn);\n  }\n\n  React.useEffect(function () {\n    var unsubscribeFocus = navigation.addListener('focus', function () {\n      return setIsFocused(true);\n    });\n    var unsubscribeBlur = navigation.addListener('blur', function () {\n      return setIsFocused(false);\n    });\n    return function () {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n  React.useDebugValue(valueToReturn);\n  return valueToReturn;\n}","map":{"version":3,"sources":["useIsFocused.tsx"],"names":["navigation","useNavigation","useState","valueToReturn","isFocused","setIsFocused","React","unsubscribeFocus","unsubscribeBlur"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,QAAA,QAAA,OAAA;AAEA,OAAA,aAAA;AAMA,eAAe,SAAA,YAAA,GAAiC;EAC9C,IAAMA,UAAU,GAAGC,aAAnB,EAAA;;EACA,gBAAkCC,QAAQ,CAACF,UAAU,CAArD,SAA0C,CAA1C;EAAA;EAAA,IAAM,SAAN;EAAA,IAAM,YAAN;;EAEA,IAAMG,aAAa,GAAGH,UAAU,CAAhC,SAAsBA,EAAtB;;EAEA,IAAII,SAAS,KAAb,aAAA,EAAiC;IAM/BC,YAAY,CAAZA,aAAY,CAAZA;EACD;;EAEDC,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAMC,gBAAgB,GAAGP,UAAU,CAAVA,WAAAA,CAAAA,OAAAA,EAAgC;MAAA,OACvDK,YAAY,CADd,IACc,CAD2C;IAAA,CAAhCL,CAAzB;IAIA,IAAMQ,eAAe,GAAGR,UAAU,CAAVA,WAAAA,CAAAA,MAAAA,EAA+B;MAAA,OACrDK,YAAY,CADd,KACc,CADyC;IAAA,CAA/BL,CAAxB;IAIA,OAAO,YAAM;MACXO,gBAAgB;MAChBC,eAAe;IAFjB,CAAA;EATFF,CAAAA,EAaG,CAbHA,UAaG,CAbHA;EAeAA,KAAK,CAALA,aAAAA,CAAAA,aAAAA;EAEA,OAAA,aAAA;AACD","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\n\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  const [isFocused, setIsFocused] = useState(navigation.isFocused);\n\n  const valueToReturn = navigation.isFocused();\n\n  if (isFocused !== valueToReturn) {\n    // If the value has changed since the last render, we need to update it.\n    // This could happen if we missed an update from the event listeners during re-render.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    // This is the same logic as in https://github.com/facebook/react/tree/master/packages/use-subscription\n    setIsFocused(valueToReturn);\n  }\n\n  React.useEffect(() => {\n    const unsubscribeFocus = navigation.addListener('focus', () =>\n      setIsFocused(true)\n    );\n\n    const unsubscribeBlur = navigation.addListener('blur', () =>\n      setIsFocused(false)\n    );\n\n    return () => {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n\n  React.useDebugValue(valueToReturn);\n\n  return valueToReturn;\n}\n"]},"metadata":{},"sourceType":"module"}