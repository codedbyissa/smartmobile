{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _Reanimated$default$c, _Reanimated$default;\n\nimport React, { useEffect, useRef } from 'react';\nimport { BaseGesture, CALLBACK_TYPE } from \"./gesture\";\nimport { Reanimated } from \"./reanimatedWrapper\";\nimport { registerHandler, unregisterHandler } from \"../handlersRegistry\";\nimport RNGestureHandlerModule from \"../../RNGestureHandlerModule\";\nimport { baseGestureHandlerWithMonitorProps, filterConfig, findNodeHandle } from \"../gestureHandlerCommon\";\nimport { GestureStateManager } from \"./gestureStateManager\";\nimport { flingGestureHandlerProps } from \"../FlingGestureHandler\";\nimport { forceTouchGestureHandlerProps } from \"../ForceTouchGestureHandler\";\nimport { longPressGestureHandlerProps } from \"../LongPressGestureHandler\";\nimport { panGestureHandlerProps, panGestureHandlerCustomNativeProps } from \"../PanGestureHandler\";\nimport { tapGestureHandlerProps } from \"../TapGestureHandler\";\nimport { State } from \"../../State\";\nimport { EventType } from \"../../EventType\";\nvar ALLOWED_PROPS = [].concat(_toConsumableArray(baseGestureHandlerWithMonitorProps), _toConsumableArray(tapGestureHandlerProps), _toConsumableArray(panGestureHandlerProps), _toConsumableArray(panGestureHandlerCustomNativeProps), _toConsumableArray(longPressGestureHandlerProps), _toConsumableArray(forceTouchGestureHandlerProps), _toConsumableArray(flingGestureHandlerProps));\n\nfunction convertToHandlerTag(ref) {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    var _ref$current$handlerT, _ref$current;\n\n    return (_ref$current$handlerT = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.handlerTag) !== null && _ref$current$handlerT !== void 0 ? _ref$current$handlerT : -1;\n  }\n}\n\nfunction extractValidHandlerTags(interactionGroup) {\n  var _interactionGroup$map, _interactionGroup$map2;\n\n  return (_interactionGroup$map = interactionGroup === null || interactionGroup === void 0 ? void 0 : (_interactionGroup$map2 = interactionGroup.map(convertToHandlerTag)) === null || _interactionGroup$map2 === void 0 ? void 0 : _interactionGroup$map2.filter(function (tag) {\n    return tag > 0;\n  })) !== null && _interactionGroup$map !== void 0 ? _interactionGroup$map : [];\n}\n\nfunction dropHandlers(preparedGesture) {\n  for (var _iterator = _createForOfIteratorHelperLoose(preparedGesture.config), _step; !(_step = _iterator()).done;) {\n    var handler = _step.value;\n    RNGestureHandlerModule.dropGestureHandler(handler.handlerTag);\n    unregisterHandler(handler.handlerTag);\n  }\n}\n\nfunction attachHandlers(_ref) {\n  var preparedGesture = _ref.preparedGesture,\n      gestureConfig = _ref.gestureConfig,\n      gesture = _ref.gesture,\n      viewTag = _ref.viewTag,\n      useAnimated = _ref.useAnimated;\n\n  if (!preparedGesture.firstExecution) {\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n\n  setImmediate(function () {\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();\n  });\n\n  var _loop = function _loop(handler) {\n    RNGestureHandlerModule.createGestureHandler(handler.handlerName, handler.handlerTag, filterConfig(handler.config, ALLOWED_PROPS));\n    registerHandler(handler.handlerTag, handler);\n    setImmediate(function () {\n      var requireToFail = [];\n\n      if (handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n      }\n\n      var simultaneousWith = [];\n\n      if (handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(handler.config.simultaneousWith);\n      }\n\n      RNGestureHandlerModule.updateGestureHandler(handler.handlerTag, filterConfig(handler.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail\n      }));\n    });\n  };\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(gesture), _step2; !(_step2 = _iterator2()).done;) {\n    var handler = _step2.value;\n\n    _loop(handler);\n  }\n\n  preparedGesture.config = gesture;\n\n  for (var _iterator3 = _createForOfIteratorHelperLoose(preparedGesture.config), _step3; !(_step3 = _iterator3()).done;) {\n    var _gesture = _step3.value;\n    RNGestureHandlerModule.attachGestureHandler(_gesture.handlerTag, viewTag, !useAnimated);\n  }\n\n  if (preparedGesture.animatedHandlers) {\n    preparedGesture.animatedHandlers.value = gesture.map(function (g) {\n      return g.handlers;\n    });\n  }\n}\n\nfunction updateHandlers(preparedGesture, gestureConfig, gesture) {\n  gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();\n\n  for (var i = 0; i < gesture.length; i++) {\n    var handler = preparedGesture.config[i];\n    gesture[i].handlerTag = handler.handlerTag;\n    gesture[i].handlers.handlerTag = handler.handlerTag;\n  }\n\n  setImmediate(function () {\n    for (var _i = 0; _i < gesture.length; _i++) {\n      var _handler = preparedGesture.config[_i];\n      _handler.config = gesture[_i].config;\n      _handler.handlers = gesture[_i].handlers;\n      _handler.handlers.handlerTag = _handler.handlerTag;\n      var requireToFail = extractValidHandlerTags(_handler.config.requireToFail);\n      var simultaneousWith = extractValidHandlerTags(_handler.config.simultaneousWith);\n      RNGestureHandlerModule.updateGestureHandler(_handler.handlerTag, filterConfig(_handler.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail\n      }));\n      registerHandler(_handler.handlerTag, _handler);\n    }\n\n    if (preparedGesture.animatedHandlers) {\n      preparedGesture.animatedHandlers.value = preparedGesture.config.map(function (g) {\n        return g.handlers;\n      });\n    }\n  });\n}\n\nfunction needsToReattach(preparedGesture, gesture) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n\n  for (var i = 0; i < gesture.length; i++) {\n    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction useAnimatedGesture(preparedGesture) {\n  if (!Reanimated) {\n    return;\n  }\n\n  function isStateChangeEvent(event) {\n    'worklet';\n\n    return event.oldState != null;\n  }\n\n  function isTouchEvent(event) {\n    'worklet';\n\n    return event.eventType != null;\n  }\n\n  function getHandler(type, gesture) {\n    'worklet';\n\n    switch (type) {\n      case CALLBACK_TYPE.BEGAN:\n        return gesture.onBegin;\n\n      case CALLBACK_TYPE.START:\n        return gesture.onStart;\n\n      case CALLBACK_TYPE.UPDATE:\n        return gesture.onUpdate;\n\n      case CALLBACK_TYPE.CHANGE:\n        return gesture.onChange;\n\n      case CALLBACK_TYPE.END:\n        return gesture.onEnd;\n\n      case CALLBACK_TYPE.FINALIZE:\n        return gesture.onFinalize;\n\n      case CALLBACK_TYPE.TOUCHES_DOWN:\n        return gesture.onTouchesDown;\n\n      case CALLBACK_TYPE.TOUCHES_MOVE:\n        return gesture.onTouchesMove;\n\n      case CALLBACK_TYPE.TOUCHES_UP:\n        return gesture.onTouchesUp;\n\n      case CALLBACK_TYPE.TOUCHES_CANCELLED:\n        return gesture.onTouchesCancelled;\n    }\n  }\n\n  function touchEventTypeToCallbackType(eventType) {\n    'worklet';\n\n    switch (eventType) {\n      case EventType.TOUCHES_DOWN:\n        return CALLBACK_TYPE.TOUCHES_DOWN;\n\n      case EventType.TOUCHES_MOVE:\n        return CALLBACK_TYPE.TOUCHES_MOVE;\n\n      case EventType.TOUCHES_UP:\n        return CALLBACK_TYPE.TOUCHES_UP;\n\n      case EventType.TOUCHES_CANCELLED:\n        return CALLBACK_TYPE.TOUCHES_CANCELLED;\n    }\n\n    return CALLBACK_TYPE.UNDEFINED;\n  }\n\n  function runWorklet(type, gesture, event) {\n    'worklet';\n\n    var handler = getHandler(type, gesture);\n\n    if (gesture.isWorklet[type]) {\n      for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n        args[_key - 3] = arguments[_key];\n      }\n\n      handler === null || handler === void 0 ? void 0 : handler.apply(void 0, [event].concat(args));\n    } else if (handler) {\n      console.warn('Animated gesture callback must be a worklet');\n    }\n  }\n\n  var sharedHandlersCallbacks = Reanimated.useSharedValue(null);\n  var lastUpdateEvent = Reanimated.useSharedValue([]);\n  var stateControllers = [];\n\n  var callback = function callback(event) {\n    'worklet';\n\n    var currentCallback = sharedHandlersCallbacks.value;\n\n    if (!currentCallback) {\n      return;\n    }\n\n    for (var i = 0; i < currentCallback.length; i++) {\n      var gesture = currentCallback[i];\n\n      if (event.handlerTag === gesture.handlerTag) {\n        if (isStateChangeEvent(event)) {\n          if (event.oldState === State.UNDETERMINED && event.state === State.BEGAN) {\n            runWorklet(CALLBACK_TYPE.BEGAN, gesture, event);\n          } else if ((event.oldState === State.BEGAN || event.oldState === State.UNDETERMINED) && event.state === State.ACTIVE) {\n            runWorklet(CALLBACK_TYPE.START, gesture, event);\n            lastUpdateEvent.value[gesture.handlerTag] = undefined;\n          } else if (event.oldState !== event.state && event.state === State.END) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, true);\n            }\n\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, true);\n          } else if ((event.state === State.FAILED || event.state === State.CANCELLED) && event.state !== event.oldState) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, false);\n            }\n\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, false);\n          }\n        } else if (isTouchEvent(event)) {\n          if (!stateControllers[i]) {\n            stateControllers[i] = GestureStateManager.create(event.handlerTag);\n          }\n\n          if (event.eventType !== EventType.UNDETERMINED) {\n            runWorklet(touchEventTypeToCallbackType(event.eventType), gesture, event, stateControllers[i]);\n          }\n        } else {\n          runWorklet(CALLBACK_TYPE.UPDATE, gesture, event);\n\n          if (gesture.onChange && gesture.changeEventCalculator) {\n            var _gesture$changeEventC;\n\n            runWorklet(CALLBACK_TYPE.CHANGE, gesture, (_gesture$changeEventC = gesture.changeEventCalculator) === null || _gesture$changeEventC === void 0 ? void 0 : _gesture$changeEventC.call(gesture, event, lastUpdateEvent.value[gesture.handlerTag]));\n            lastUpdateEvent.value[gesture.handlerTag] = event;\n          }\n        }\n      }\n    }\n  };\n\n  var event = Reanimated.useEvent(callback, ['onGestureHandlerStateChange', 'onGestureHandlerEvent'], true);\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\n\nexport var GestureDetector = function GestureDetector(props) {\n  var _gestureConfig$toGest, _gestureConfig$toGest2;\n\n  var gestureConfig = props.gesture;\n  var gesture = (_gestureConfig$toGest = gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$toGest2 = gestureConfig.toGestureArray) === null || _gestureConfig$toGest2 === void 0 ? void 0 : _gestureConfig$toGest2.call(gestureConfig)) !== null && _gestureConfig$toGest !== void 0 ? _gestureConfig$toGest : [];\n  var useAnimated = gesture.find(function (gesture) {\n    return gesture.handlers.isWorklet.reduce(function (prev, current) {\n      return prev || current;\n    });\n  }) != null;\n  var viewRef = useRef(null);\n  var firstRenderRef = useRef(true);\n  var preparedGesture = React.useRef({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useAnimated: useAnimated\n  }).current;\n\n  if (useAnimated !== preparedGesture.useAnimated) {\n    throw new Error('You cannot change whether you are using gesture or animatedGesture while the app is running');\n  }\n\n  if (preparedGesture.firstExecution) {\n    var _gestureConfig$initia;\n\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$initia = gestureConfig.initialize) === null || _gestureConfig$initia === void 0 ? void 0 : _gestureConfig$initia.call(gestureConfig);\n  }\n\n  if (useAnimated) {\n    useAnimatedGesture(preparedGesture);\n  }\n\n  useEffect(function () {\n    firstRenderRef.current = true;\n    var viewTag = findNodeHandle(viewRef.current);\n    attachHandlers({\n      preparedGesture: preparedGesture,\n      gestureConfig: gestureConfig,\n      gesture: gesture,\n      viewTag: viewTag,\n      useAnimated: useAnimated\n    });\n    return function () {\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n  useEffect(function () {\n    if (!firstRenderRef.current) {\n      var viewTag = findNodeHandle(viewRef.current);\n\n      if (needsToReattach(preparedGesture, gesture)) {\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture: preparedGesture,\n          gestureConfig: gestureConfig,\n          gesture: gesture,\n          viewTag: viewTag,\n          useAnimated: useAnimated\n        });\n      } else {\n        updateHandlers(preparedGesture, gestureConfig, gesture);\n      }\n    } else {\n      firstRenderRef.current = false;\n    }\n  }, [props]);\n\n  if (useAnimated) {\n    return React.createElement(AnimatedWrap, {\n      ref: viewRef,\n      onGestureHandlerEvent: preparedGesture.animatedEventHandler\n    }, props.children);\n  } else {\n    return React.createElement(Wrap, {\n      ref: viewRef\n    }, props.children);\n  }\n};\n\nvar Wrap = function (_React$Component) {\n  _inherits(Wrap, _React$Component);\n\n  var _super = _createSuper(Wrap);\n\n  function Wrap() {\n    _classCallCheck(this, Wrap);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Wrap, [{\n    key: \"render\",\n    value: function render() {\n      var child = React.Children.only(this.props.children);\n      return React.cloneElement(child, {\n        collapsable: false\n      }, child.props.children);\n    }\n  }]);\n\n  return Wrap;\n}(React.Component);\n\nvar AnimatedWrap = (_Reanimated$default$c = Reanimated === null || Reanimated === void 0 ? void 0 : (_Reanimated$default = Reanimated.default) === null || _Reanimated$default === void 0 ? void 0 : _Reanimated$default.createAnimatedComponent(Wrap)) !== null && _Reanimated$default$c !== void 0 ? _Reanimated$default$c : Wrap;","map":{"version":3,"sources":["GestureDetector.tsx"],"names":["ALLOWED_PROPS","ref","interactionGroup","tag","preparedGesture","RNGestureHandlerModule","handler","unregisterHandler","useAnimated","gestureConfig","setImmediate","filterConfig","registerHandler","requireToFail","extractValidHandlerTags","simultaneousWith","simultaneousHandlers","waitFor","gesture","g","i","event","CALLBACK_TYPE","EventType","getHandler","console","sharedHandlersCallbacks","Reanimated","lastUpdateEvent","stateControllers","callback","currentCallback","isStateChangeEvent","State","runWorklet","isTouchEvent","GestureStateManager","touchEventTypeToCallbackType","GestureDetector","props","prev","viewRef","useRef","firstRenderRef","config","animatedEventHandler","animatedHandlers","firstExecution","useAnimatedGesture","useEffect","viewTag","findNodeHandle","attachHandlers","dropHandlers","needsToReattach","updateHandlers","React","render","child","collapsable","AnimatedWrap"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport {\n  GestureType,\n  HandlerCallbacks,\n  BaseGesture,\n  GestureRef,\n  CALLBACK_TYPE,\n} from './gesture';\nimport { Reanimated, SharedValue } from './reanimatedWrapper';\nimport { registerHandler, unregisterHandler } from '../handlersRegistry';\nimport RNGestureHandlerModule from '../../RNGestureHandlerModule';\nimport {\n  baseGestureHandlerWithMonitorProps,\n  filterConfig,\n  findNodeHandle,\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport {\n  GestureStateManager,\n  GestureStateManagerType,\n} from './gestureStateManager';\nimport { flingGestureHandlerProps } from '../FlingGestureHandler';\nimport { forceTouchGestureHandlerProps } from '../ForceTouchGestureHandler';\nimport { longPressGestureHandlerProps } from '../LongPressGestureHandler';\nimport {\n  panGestureHandlerProps,\n  panGestureHandlerCustomNativeProps,\n} from '../PanGestureHandler';\nimport { tapGestureHandlerProps } from '../TapGestureHandler';\nimport { State } from '../../State';\nimport { EventType } from '../../EventType';\nimport { ComposedGesture } from './gestureComposition';\n\nconst ALLOWED_PROPS = [\n  ...baseGestureHandlerWithMonitorProps,\n  ...tapGestureHandlerProps,\n  ...panGestureHandlerProps,\n  ...panGestureHandlerCustomNativeProps,\n  ...longPressGestureHandlerProps,\n  ...forceTouchGestureHandlerProps,\n  ...flingGestureHandlerProps,\n];\n\nexport type GestureConfigReference = {\n  config: GestureType[];\n  animatedEventHandler: unknown;\n  animatedHandlers: SharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  > | null;\n  firstExecution: boolean;\n  useAnimated: boolean;\n};\n\nfunction convertToHandlerTag(ref: GestureRef): number {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    // @ts-ignore in this case it should be a ref either to gesture object or\n    // a gesture handler component, in both cases handlerTag property exists\n    return ref.current?.handlerTag ?? -1;\n  }\n}\n\nfunction extractValidHandlerTags(interactionGroup: GestureRef[] | undefined) {\n  return (\n    interactionGroup?.map(convertToHandlerTag)?.filter((tag) => tag > 0) ?? []\n  );\n}\n\nfunction dropHandlers(preparedGesture: GestureConfigReference) {\n  for (const handler of preparedGesture.config) {\n    RNGestureHandlerModule.dropGestureHandler(handler.handlerTag);\n\n    unregisterHandler(handler.handlerTag);\n  }\n}\n\ninterface AttachHandlersConfig {\n  preparedGesture: GestureConfigReference;\n  gestureConfig: ComposedGesture | GestureType | undefined;\n  gesture: GestureType[];\n  viewTag: number;\n  useAnimated: boolean;\n}\n\nfunction attachHandlers({\n  preparedGesture,\n  gestureConfig,\n  gesture,\n  viewTag,\n  useAnimated,\n}: AttachHandlersConfig) {\n  if (!preparedGesture.firstExecution) {\n    gestureConfig?.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n\n  // use setImmediate to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  setImmediate(() => {\n    gestureConfig?.prepare();\n  });\n\n  for (const handler of gesture) {\n    RNGestureHandlerModule.createGestureHandler(\n      handler.handlerName,\n      handler.handlerTag,\n      filterConfig(handler.config, ALLOWED_PROPS)\n    );\n\n    registerHandler(handler.handlerTag, handler);\n\n    // use setImmediate to extract handlerTags, because all refs should be initialized\n    // when it's ran\n    setImmediate(() => {\n      let requireToFail: number[] = [];\n      if (handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n      }\n\n      let simultaneousWith: number[] = [];\n      if (handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(\n          handler.config.simultaneousWith\n        );\n      }\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n        })\n      );\n    });\n  }\n  preparedGesture.config = gesture;\n\n  for (const gesture of preparedGesture.config) {\n    RNGestureHandlerModule.attachGestureHandler(\n      gesture.handlerTag,\n      viewTag,\n      !useAnimated // send direct events when using animatedGesture, device events otherwise\n    );\n  }\n\n  if (preparedGesture.animatedHandlers) {\n    preparedGesture.animatedHandlers.value = (gesture.map(\n      (g) => g.handlers\n    ) as unknown) as HandlerCallbacks<Record<string, unknown>>[];\n  }\n}\n\nfunction updateHandlers(\n  preparedGesture: GestureConfigReference,\n  gestureConfig: ComposedGesture | GestureType | undefined,\n  gesture: GestureType[]\n) {\n  gestureConfig?.prepare();\n\n  for (let i = 0; i < gesture.length; i++) {\n    const handler = preparedGesture.config[i];\n\n    gesture[i].handlerTag = handler.handlerTag;\n    gesture[i].handlers.handlerTag = handler.handlerTag;\n  }\n\n  // use setImmediate to extract handlerTags, because when it's ran, all refs should be updated\n  // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n  // in case of external relations)\n  setImmediate(() => {\n    for (let i = 0; i < gesture.length; i++) {\n      const handler = preparedGesture.config[i];\n\n      handler.config = gesture[i].config;\n      handler.handlers = gesture[i].handlers;\n      handler.handlers.handlerTag = handler.handlerTag;\n\n      const requireToFail = extractValidHandlerTags(\n        handler.config.requireToFail\n      );\n\n      const simultaneousWith = extractValidHandlerTags(\n        handler.config.simultaneousWith\n      );\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n        })\n      );\n\n      registerHandler(handler.handlerTag, handler);\n    }\n\n    if (preparedGesture.animatedHandlers) {\n      preparedGesture.animatedHandlers.value = (preparedGesture.config.map(\n        (g) => g.handlers\n      ) as unknown) as HandlerCallbacks<Record<string, unknown>>[];\n    }\n  });\n}\n\nfunction needsToReattach(\n  preparedGesture: GestureConfigReference,\n  gesture: GestureType[]\n) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n  for (let i = 0; i < gesture.length; i++) {\n    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction useAnimatedGesture(preparedGesture: GestureConfigReference) {\n  if (!Reanimated) {\n    return;\n  }\n\n  function isStateChangeEvent(\n    event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n  ): event is GestureStateChangeEvent {\n    'worklet';\n    // @ts-ignore Yes, the oldState prop is missing on GestureTouchEvent, that's the point\n    return event.oldState != null;\n  }\n\n  function isTouchEvent(\n    event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n  ): event is GestureTouchEvent {\n    'worklet';\n    return event.eventType != null;\n  }\n\n  function getHandler(\n    type: CALLBACK_TYPE,\n    gesture: HandlerCallbacks<Record<string, unknown>>\n  ) {\n    'worklet';\n    switch (type) {\n      case CALLBACK_TYPE.BEGAN:\n        return gesture.onBegin;\n      case CALLBACK_TYPE.START:\n        return gesture.onStart;\n      case CALLBACK_TYPE.UPDATE:\n        return gesture.onUpdate;\n      case CALLBACK_TYPE.CHANGE:\n        return gesture.onChange;\n      case CALLBACK_TYPE.END:\n        return gesture.onEnd;\n      case CALLBACK_TYPE.FINALIZE:\n        return gesture.onFinalize;\n      case CALLBACK_TYPE.TOUCHES_DOWN:\n        return gesture.onTouchesDown;\n      case CALLBACK_TYPE.TOUCHES_MOVE:\n        return gesture.onTouchesMove;\n      case CALLBACK_TYPE.TOUCHES_UP:\n        return gesture.onTouchesUp;\n      case CALLBACK_TYPE.TOUCHES_CANCELLED:\n        return gesture.onTouchesCancelled;\n    }\n  }\n\n  function touchEventTypeToCallbackType(eventType: EventType): CALLBACK_TYPE {\n    'worklet';\n    switch (eventType) {\n      case EventType.TOUCHES_DOWN:\n        return CALLBACK_TYPE.TOUCHES_DOWN;\n      case EventType.TOUCHES_MOVE:\n        return CALLBACK_TYPE.TOUCHES_MOVE;\n      case EventType.TOUCHES_UP:\n        return CALLBACK_TYPE.TOUCHES_UP;\n      case EventType.TOUCHES_CANCELLED:\n        return CALLBACK_TYPE.TOUCHES_CANCELLED;\n    }\n    return CALLBACK_TYPE.UNDEFINED;\n  }\n\n  function runWorklet(\n    type: CALLBACK_TYPE,\n    gesture: HandlerCallbacks<Record<string, unknown>>,\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent,\n    ...args: any[]\n  ) {\n    'worklet';\n    const handler = getHandler(type, gesture);\n    if (gesture.isWorklet[type]) {\n      // @ts-ignore Logic below makes sure the correct event is send to the\n      // correct handler.\n      handler?.(event, ...args);\n    } else if (handler) {\n      console.warn('Animated gesture callback must be a worklet');\n    }\n  }\n\n  // Hooks are called conditionally, but the condition is whether the\n  // react-native-reanimated is installed, which shouldn't change while running\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const sharedHandlersCallbacks = Reanimated.useSharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  >(null);\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const lastUpdateEvent = Reanimated.useSharedValue<\n    (GestureUpdateEvent | undefined)[]\n  >([]);\n\n  // not every gesture needs a state controller, init them lazily\n  const stateControllers: GestureStateManagerType[] = [];\n\n  const callback = (\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent\n  ) => {\n    'worklet';\n\n    const currentCallback = sharedHandlersCallbacks.value;\n    if (!currentCallback) {\n      return;\n    }\n\n    for (let i = 0; i < currentCallback.length; i++) {\n      const gesture = currentCallback[i];\n\n      if (event.handlerTag === gesture.handlerTag) {\n        if (isStateChangeEvent(event)) {\n          if (\n            event.oldState === State.UNDETERMINED &&\n            event.state === State.BEGAN\n          ) {\n            runWorklet(CALLBACK_TYPE.BEGAN, gesture, event);\n          } else if (\n            (event.oldState === State.BEGAN ||\n              event.oldState === State.UNDETERMINED) &&\n            event.state === State.ACTIVE\n          ) {\n            runWorklet(CALLBACK_TYPE.START, gesture, event);\n            lastUpdateEvent.value[gesture.handlerTag] = undefined;\n          } else if (\n            event.oldState !== event.state &&\n            event.state === State.END\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, true);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, true);\n          } else if (\n            (event.state === State.FAILED || event.state === State.CANCELLED) &&\n            event.state !== event.oldState\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, false);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, false);\n          }\n        } else if (isTouchEvent(event)) {\n          if (!stateControllers[i]) {\n            stateControllers[i] = GestureStateManager.create(event.handlerTag);\n          }\n\n          if (event.eventType !== EventType.UNDETERMINED) {\n            runWorklet(\n              touchEventTypeToCallbackType(event.eventType),\n              gesture,\n              event,\n              stateControllers[i]\n            );\n          }\n        } else {\n          runWorklet(CALLBACK_TYPE.UPDATE, gesture, event);\n\n          if (gesture.onChange && gesture.changeEventCalculator) {\n            runWorklet(\n              CALLBACK_TYPE.CHANGE,\n              gesture,\n              gesture.changeEventCalculator?.(\n                event,\n                lastUpdateEvent.value[gesture.handlerTag]\n              )\n            );\n\n            lastUpdateEvent.value[gesture.handlerTag] = event;\n          }\n        }\n      }\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const event = Reanimated.useEvent(\n    callback,\n    ['onGestureHandlerStateChange', 'onGestureHandlerEvent'],\n    true\n  );\n\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\n\ninterface GestureDetectorProps {\n  gesture?: ComposedGesture | GestureType;\n}\nexport const GestureDetector: React.FunctionComponent<GestureDetectorProps> = (\n  props\n) => {\n  const gestureConfig = props.gesture;\n  const gesture = gestureConfig?.toGestureArray?.() ?? [];\n  const useAnimated =\n    gesture.find((gesture) =>\n      gesture.handlers.isWorklet.reduce((prev, current) => prev || current)\n    ) != null;\n  const viewRef = useRef(null);\n  const firstRenderRef = useRef(true);\n\n  const preparedGesture = React.useRef<GestureConfigReference>({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useAnimated: useAnimated,\n  }).current;\n\n  if (useAnimated !== preparedGesture.useAnimated) {\n    throw new Error(\n      'You cannot change whether you are using gesture or animatedGesture while the app is running'\n    );\n  }\n\n  if (preparedGesture.firstExecution) {\n    gestureConfig?.initialize?.();\n  }\n\n  if (useAnimated) {\n    // Whether animatedGesture or gesture is used shouldn't change\n    // during while an app is running\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useAnimatedGesture(preparedGesture);\n  }\n\n  useEffect(() => {\n    firstRenderRef.current = true;\n    const viewTag = findNodeHandle(viewRef.current) as number;\n    attachHandlers({\n      preparedGesture,\n      gestureConfig,\n      gesture,\n      viewTag,\n      useAnimated,\n    });\n\n    return () => {\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!firstRenderRef.current) {\n      const viewTag = findNodeHandle(viewRef.current) as number;\n\n      if (needsToReattach(preparedGesture, gesture)) {\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture,\n          gestureConfig,\n          gesture,\n          viewTag,\n          useAnimated,\n        });\n      } else {\n        updateHandlers(preparedGesture, gestureConfig, gesture);\n      }\n    } else {\n      firstRenderRef.current = false;\n    }\n  }, [props]);\n\n  if (useAnimated) {\n    return (\n      <AnimatedWrap\n        ref={viewRef}\n        onGestureHandlerEvent={preparedGesture.animatedEventHandler}>\n        {props.children}\n      </AnimatedWrap>\n    );\n  } else {\n    return <Wrap ref={viewRef}>{props.children}</Wrap>;\n  }\n};\n\nclass Wrap extends React.Component<{ onGestureHandlerEvent?: unknown }> {\n  render() {\n    // I don't think that fighting with types over such a simple function is worth it\n    // The only thing it does is add 'collapsable: false' to the child component\n    // to make sure it is in the native view hierarchy so the detector can find\n    // correct viewTag to attach to.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const child: any = React.Children.only(this.props.children);\n\n    return React.cloneElement(\n      child,\n      { collapsable: false },\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      child.props.children\n    );\n  }\n}\n\nconst AnimatedWrap = Reanimated?.default?.createAnimatedComponent(Wrap) ?? Wrap;\n"]},"metadata":{},"sourceType":"module"}