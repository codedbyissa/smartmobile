{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nexport var attachRecoveredProps = function attachRecoveredProps(props) {\n  try {\n    var _require = require('expo-error-recovery'),\n        recoveredProps = _require.recoveredProps;\n\n    return _objectSpread(_objectSpread({}, props), {}, {\n      exp: _objectSpread(_objectSpread({}, props.exp), {}, {\n        errorRecovery: recoveredProps\n      })\n    });\n  } catch (_unused) {}\n\n  return props;\n};","map":{"version":3,"sources":["../../src/launch/RecoveryProps.ts"],"names":[],"mappings":";;;;;;AAEA,OAAO,IAAM,oBAAoB,GAAG,SAAvB,oBAAuB,CAAyB,KAAzB,EAAwC;EAC1E,IAAI;IAEF,eAA2B,OAAO,CAAC,qBAAD,CAAlC;IAAA,IAAQ,cAAR,YAAQ,cAAR;;IACA,uCACK,KADL;MAEE,GAAG,kCAAO,KAAK,CAAC,GAAb;QAAkB,aAAa,EAAE;MAAjC;IAFL;EAID,CAPD,CAOE,gBAAM,CAAE;;EAEV,OAAO,KAAP;AACD,CAXM","sourcesContent":["import { InitialProps } from './withExpoRoot.types';\n\nexport const attachRecoveredProps = <P extends InitialProps>(props: P): P => {\n  try {\n    // Optionally import expo-error-recovery\n    const { recoveredProps } = require('expo-error-recovery');\n    return {\n      ...props,\n      exp: { ...props.exp, errorRecovery: recoveredProps },\n    };\n  } catch {}\n\n  return props;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}