{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { Platform, UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\n\nfunction getBasePath(_ref) {\n  var httpServerLocation = _ref.httpServerLocation;\n\n  if (httpServerLocation[0] === '/') {\n    return httpServerLocation.substr(1);\n  }\n\n  return httpServerLocation;\n}\n\nfunction getScale() {\n  return Dimensions.get('window').scale;\n}\n\nfunction getScaledAssetPath(asset) {\n  var scale = AssetSourceResolver.pickScale(asset.scales, getScale());\n  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  var assetDir = getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + (asset.type ? \".\" + asset.type : '');\n}\n\nvar AssetSourceResolver = function () {\n  function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {\n    _classCallCheck(this, AssetSourceResolver);\n\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n\n  _createClass(AssetSourceResolver, [{\n    key: \"isLoadedFromServer\",\n    value: function isLoadedFromServer() {\n      return !!this.serverUrl;\n    }\n  }, {\n    key: \"isLoadedFromFileSystem\",\n    value: function isLoadedFromFileSystem() {\n      return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\n    }\n  }, {\n    key: \"defaultAsset\",\n    value: function defaultAsset() {\n      if (this.isLoadedFromServer()) {\n        return this.assetServerURL();\n      }\n\n      return this.scaledAssetURLNearBundle();\n    }\n  }, {\n    key: \"assetServerURL\",\n    value: function assetServerURL() {\n      invariant(!!this.serverUrl, 'need server to load from');\n      return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);\n    }\n  }, {\n    key: \"scaledAssetPath\",\n    value: function scaledAssetPath() {\n      return this.fromSource(getScaledAssetPath(this.asset));\n    }\n  }, {\n    key: \"scaledAssetURLNearBundle\",\n    value: function scaledAssetURLNearBundle() {\n      var path = this.jsbundleUrl || '';\n      return this.fromSource(path + getScaledAssetPath(this.asset));\n    }\n  }, {\n    key: \"resourceIdentifierWithoutScale\",\n    value: function resourceIdentifierWithoutScale() {\n      throw new UnavailabilityError('react-native', 'resourceIdentifierWithoutScale()');\n    }\n  }, {\n    key: \"drawableFolderInBundle\",\n    value: function drawableFolderInBundle() {\n      throw new UnavailabilityError('react-native', 'drawableFolderInBundle()');\n    }\n  }, {\n    key: \"fromSource\",\n    value: function fromSource(source) {\n      return {\n        __packager_asset: true,\n        width: this.asset.width,\n        height: this.asset.height,\n        uri: source,\n        scale: AssetSourceResolver.pickScale(this.asset.scales, getScale())\n      };\n    }\n  }], [{\n    key: \"pickScale\",\n    value: function pickScale(scales, deviceScale) {\n      for (var i = 0; i < scales.length; i++) {\n        if (scales[i] >= deviceScale) {\n          return scales[i];\n        }\n      }\n\n      return scales[scales.length - 1] || 1;\n    }\n  }]);\n\n  return AssetSourceResolver;\n}();\n\nexport { AssetSourceResolver as default };","map":{"version":3,"sources":["../src/AssetSourceResolver.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform, UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\nimport { Dimensions } from 'react-native';\n\ntype PackagerAsset = {\n  __packager_asset: boolean;\n  fileSystemLocation: string;\n  httpServerLocation: string;\n  width?: number;\n  height?: number;\n  scales: number[];\n  hash: string;\n  name: string;\n  type: string;\n};\n\nfunction getBasePath({ httpServerLocation }: PackagerAsset): string {\n  if (httpServerLocation[0] === '/') {\n    return httpServerLocation.substr(1);\n  }\n  return httpServerLocation;\n}\n\nexport type ResolvedAssetSource = {\n  __packager_asset: boolean;\n  width?: number;\n  height?: number;\n  uri: string;\n  scale: number;\n};\n\nfunction getScale(): number {\n  return Dimensions.get('window').scale;\n}\n\nfunction getScaledAssetPath(asset): string {\n  const scale = AssetSourceResolver.pickScale(asset.scales, getScale());\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  const assetDir = getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + (asset.type ? `.${asset.type}` : '');\n}\n\nexport default class AssetSourceResolver {\n  serverUrl?: string | null;\n  // where the jsbundle is being run from\n  jsbundleUrl?: string | null;\n  // the asset to resolve\n  asset: PackagerAsset;\n\n  constructor(\n    serverUrl: string | undefined | null,\n    jsbundleUrl: string | undefined | null,\n    asset: PackagerAsset\n  ) {\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n  isLoadedFromServer(): boolean {\n    return !!this.serverUrl;\n  }\n  isLoadedFromFileSystem(): boolean {\n    return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\n  }\n  defaultAsset(): ResolvedAssetSource {\n    if (this.isLoadedFromServer()) {\n      return this.assetServerURL();\n    }\n\n    return this.scaledAssetURLNearBundle();\n  }\n  assetServerURL(): ResolvedAssetSource {\n    invariant(!!this.serverUrl, 'need server to load from');\n    return this.fromSource(\n      this.serverUrl +\n        getScaledAssetPath(this.asset) +\n        '?platform=' +\n        Platform.OS +\n        '&hash=' +\n        this.asset.hash\n    );\n  }\n  scaledAssetPath(): ResolvedAssetSource {\n    return this.fromSource(getScaledAssetPath(this.asset));\n  }\n  scaledAssetURLNearBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl || '';\n    return this.fromSource(path + getScaledAssetPath(this.asset));\n  }\n  resourceIdentifierWithoutScale(): ResolvedAssetSource {\n    throw new UnavailabilityError('react-native', 'resourceIdentifierWithoutScale()');\n  }\n  drawableFolderInBundle(): ResolvedAssetSource {\n    throw new UnavailabilityError('react-native', 'drawableFolderInBundle()');\n  }\n  fromSource(source: string): ResolvedAssetSource {\n    return {\n      __packager_asset: true,\n      width: this.asset.width,\n      height: this.asset.height,\n      uri: source,\n      scale: AssetSourceResolver.pickScale(this.asset.scales, getScale()),\n    };\n  }\n\n  static pickScale(scales: number[], deviceScale: number): number {\n    for (let i = 0; i < scales.length; i++) {\n      if (scales[i] >= deviceScale) {\n        return scales[i];\n      }\n    }\n    return scales[scales.length - 1] || 1;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}