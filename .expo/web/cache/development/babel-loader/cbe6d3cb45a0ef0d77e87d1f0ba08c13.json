{"ast":null,"code":"import * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ToggleButtonGroup from \"./ToggleButtonGroup\";\nimport ToggleButton from \"./ToggleButton\";\n\nvar ToggleButtonRow = function ToggleButtonRow(_ref) {\n  var value = _ref.value,\n      onValueChange = _ref.onValueChange,\n      children = _ref.children,\n      style = _ref.style;\n  var count = React.Children.count(children);\n  return React.createElement(ToggleButtonGroup, {\n    value: value,\n    onValueChange: onValueChange\n  }, React.createElement(View, {\n    style: [styles.row, style]\n  }, React.Children.map(children, function (child, i) {\n    if (child && child.type === ToggleButton) {\n      return React.cloneElement(child, {\n        style: [styles.button, i === 0 ? styles.first : i === count - 1 ? styles.last : styles.middle, child.props.style]\n      });\n    }\n\n    return child;\n  })));\n};\n\nToggleButtonRow.displayName = 'ToggleButton.Row';\nvar styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth\n  },\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0\n  },\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0\n  },\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0\n  }\n});\nexport default ToggleButtonRow;\nexport { ToggleButtonRow };","map":{"version":3,"sources":["ToggleButtonRow.tsx"],"names":["ToggleButtonRow","style","count","React","onValueChange","styles","child","i","row","flexDirection","button","borderWidth","StyleSheet","hairlineWidth","first","borderTopRightRadius","borderBottomRightRadius","middle","borderRadius","borderLeftWidth","last","borderTopLeftRadius","borderBottomLeftRadius"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAEA,OAAA,iBAAA;AACA,OAAA,YAAA;;AA+CA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAAA,IAAA,EAAsD;EAArD,IAAA,KAAA,GAAqD,IAArD,CAAA,KAAA;EAAA,IAAA,aAAA,GAAqD,IAArD,CAAA,aAAA;EAAA,IAAA,QAAA,GAAqD,IAArD,CAAA,QAAA;EAAA,IAAkCC,KAAlC,GAAqD,IAArD,CAAkCA,KAAlC;EACvB,IAAMC,KAAK,GAAGC,KAAK,CAALA,QAAAA,CAAAA,KAAAA,CAAd,QAAcA,CAAd;EAEA,OACE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA;IAAmB,KAAK,EAAxB,KAAA;IAAiC,aAAa,EAAEC;EAAhD,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;IAAM,KAAK,EAAE,CAACC,MAAM,CAAP,GAAA,EAAA,KAAA;EAAb,CAAA,EACG,KAAK,CAAL,QAAA,CAAA,GAAA,CAAA,QAAA,EAA6B,UAAA,KAAA,EAAA,CAAA,EAAc;IAE1C,IAAIC,KAAK,IAAIA,KAAK,CAALA,IAAAA,KAAb,YAAA,EAA0C;MAExC,OAAO,KAAK,CAAL,YAAA,CAAA,KAAA,EAA0B;QAC/BL,KAAK,EAAE,CACLI,MAAM,CADD,MAAA,EAELE,CAAC,KAADA,CAAAA,GACIF,MAAM,CADVE,KAAAA,GAEIA,CAAC,KAAKL,KAAK,GAAXK,CAAAA,GACAF,MAAM,CADNE,IAAAA,GAEAF,MAAM,CANL,MAAA,EAQLC,KAAK,CAALA,KAAAA,CARK,KAAA;MADwB,CAA1B,CAAP;IAYD;;IAED,OAAA,KAAA;EArBR,CAGO,CADH,CADF,CADF;AAHF,CAAA;;AA+BAN,eAAe,CAAfA,WAAAA,GAAAA,kBAAAA;AAEA,IAAMK,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BG,GAAG,EAAE;IACHC,aAAa,EAAE;EADZ,CAD0B;EAI/BC,MAAM,EAAE;IACNC,WAAW,EAAEC,UAAU,CAACC;EADlB,CAJuB;EAQ/BC,KAAK,EAAE;IACLC,oBAAoB,EADf,CAAA;IAELC,uBAAuB,EAAE;EAFpB,CARwB;EAa/BC,MAAM,EAAE;IACNC,YAAY,EADN,CAAA;IAENC,eAAe,EAAE;EAFX,CAbuB;EAkB/BC,IAAI,EAAE;IACJD,eAAe,EADX,CAAA;IAEJE,mBAAmB,EAFf,CAAA;IAGJC,sBAAsB,EAAE;EAHpB;AAlByB,CAAlB,CAAf;AAyBA,eAAA,eAAA;AAGA,SAAA,eAAA","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport ToggleButtonGroup from './ToggleButtonGroup';\nimport ToggleButton from './ToggleButton';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-row.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Row>\n *   );\n * };\n *\n * export default MyComponent;\n *\n *```\n */\nconst ToggleButtonRow = ({ value, onValueChange, children, style }: Props) => {\n  const count = React.Children.count(children);\n\n  return (\n    <ToggleButtonGroup value={value} onValueChange={onValueChange}>\n      <View style={[styles.row, style]}>\n        {React.Children.map(children, (child, i) => {\n          // @ts-expect-error: TypeScript complains about child.type but it doesn't matter\n          if (child && child.type === ToggleButton) {\n            // @ts-expect-error: We're sure that child is a React Element\n            return React.cloneElement(child, {\n              style: [\n                styles.button,\n                i === 0\n                  ? styles.first\n                  : i === count - 1\n                  ? styles.last\n                  : styles.middle,\n                // @ts-expect-error: We're sure that child is a React Element\n                child.props.style,\n              ],\n            });\n          }\n\n          return child;\n        })}\n      </View>\n    </ToggleButtonGroup>\n  );\n};\n\nToggleButtonRow.displayName = 'ToggleButton.Row';\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0,\n  },\n\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n});\n\nexport default ToggleButtonRow;\n\n// @component-docs ignore-next-line\nexport { ToggleButtonRow };\n"]},"metadata":{},"sourceType":"module"}