{"ast":null,"code":"import color from 'color';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport DarkTheme from \"./DarkTheme\";\n\nvar isAnimatedValue = function isAnimatedValue(it) {\n  return it instanceof Animated.Value;\n};\n\nexport default function overlay(elevation) {\n  var surfaceColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DarkTheme.colors.surface;\n\n  if (isAnimatedValue(elevation)) {\n    var inputRange = [0, 1, 2, 3, 8, 24];\n    return elevation.interpolate({\n      inputRange: inputRange,\n      outputRange: inputRange.map(function (elevation) {\n        return calculateColor(surfaceColor, elevation);\n      })\n    });\n  }\n\n  return calculateColor(surfaceColor, elevation);\n}\n\nfunction calculateColor(surfaceColor) {\n  var elevation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var overlayTransparency;\n\n  if (elevation >= 1 && elevation <= 24) {\n    overlayTransparency = elevationOverlayTransparency[elevation];\n  } else if (elevation > 24) {\n    overlayTransparency = elevationOverlayTransparency[24];\n  } else {\n    overlayTransparency = elevationOverlayTransparency[1];\n  }\n\n  return color(surfaceColor).mix(color('white'), overlayTransparency * 0.01).hex();\n}\n\nvar elevationOverlayTransparency = {\n  1: 5,\n  2: 7,\n  3: 8,\n  4: 9,\n  5: 10,\n  6: 11,\n  7: 11.5,\n  8: 12,\n  9: 12.5,\n  10: 13,\n  11: 13.5,\n  12: 14,\n  13: 14.25,\n  14: 14.5,\n  15: 14.75,\n  16: 15,\n  17: 15.12,\n  18: 15.24,\n  19: 15.36,\n  20: 15.48,\n  21: 15.6,\n  22: 15.72,\n  23: 15.84,\n  24: 16\n};","map":{"version":3,"sources":["overlay.tsx"],"names":["isAnimatedValue","it","Animated","surfaceColor","DarkTheme","surface","inputRange","outputRange","elevation","calculateColor","overlayTransparency","elevationOverlayTransparency","color"],"mappings":"AAAA,OAAA,KAAA,MAAA,OAAA;;AAEA,OAAA,SAAA;;AAEA,IAAMA,eAAe,GACnBC,SADID,eACJC,CAAAA,EADsB;EAAA,OAEGA,EAAE,YAAYC,QAAQ,CAFjD,KAAwB;AAAA,CAAxB;;AAIA,eAAe,SAAA,OAAA,CAAA,SAAA,EAG+C;EAAA,IAD5DC,YAC4D,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GADrCC,SAAS,CAATA,MAAAA,CAAiBC,OACoB;;EAC5D,IAAIL,eAAe,CAAnB,SAAmB,CAAnB,EAAgC;IAC9B,IAAMM,UAAU,GAAG,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EADW,EACX,CAAnB;IAGA,OAAO,SAAS,CAAT,WAAA,CAAsB;MAC3BA,UAD2B,EAC3BA,UAD2B;MAE3BC,WAAW,EAAE,UAAU,CAAV,GAAA,CAAgBC,UAAAA,SAAD,EAAe;QACzC,OAAOC,cAAc,CAAA,YAAA,EAArB,SAAqB,CAArB;MADW,CAAA;IAFc,CAAtB,CAAP;EAL0D;;EAc5D,OAAOA,cAAc,CAAA,YAAA,EAArB,SAAqB,CAArB;AACD;;AAED,SAAA,cAAA,CAAA,YAAA,EAAqE;EAAA,IAAvBD,SAAuB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAH,CAAG;EACnE,IAAA,mBAAA;;EACA,IAAIA,SAAS,IAATA,CAAAA,IAAkBA,SAAS,IAA/B,EAAA,EAAuC;IACrCE,mBAAmB,GAAGC,4BAA4B,CAAlDD,SAAkD,CAAlDA;EADF,CAAA,MAEO,IAAIF,SAAS,GAAb,EAAA,EAAoB;IACzBE,mBAAmB,GAAGC,4BAA4B,CAAlDD,EAAkD,CAAlDA;EADK,CAAA,MAEA;IACLA,mBAAmB,GAAGC,4BAA4B,CAAlDD,CAAkD,CAAlDA;EACD;;EACD,OAAOE,KAAK,CAALA,YAAK,CAALA,CAAAA,GAAAA,CACAA,KAAK,CADLA,OACK,CADLA,EACgBF,mBAAmB,GADnCE,IAAAA,EAAP,GAAOA,EAAP;AAGD;;AAED,IAAMD,4BAAoD,GAAG;EAC3D,GAD2D,CAAA;EAE3D,GAF2D,CAAA;EAG3D,GAH2D,CAAA;EAI3D,GAJ2D,CAAA;EAK3D,GAL2D,EAAA;EAM3D,GAN2D,EAAA;EAO3D,GAP2D,IAAA;EAQ3D,GAR2D,EAAA;EAS3D,GAT2D,IAAA;EAU3D,IAV2D,EAAA;EAW3D,IAX2D,IAAA;EAY3D,IAZ2D,EAAA;EAa3D,IAb2D,KAAA;EAc3D,IAd2D,IAAA;EAe3D,IAf2D,KAAA;EAgB3D,IAhB2D,EAAA;EAiB3D,IAjB2D,KAAA;EAkB3D,IAlB2D,KAAA;EAmB3D,IAnB2D,KAAA;EAoB3D,IApB2D,KAAA;EAqB3D,IArB2D,IAAA;EAsB3D,IAtB2D,KAAA;EAuB3D,IAvB2D,KAAA;EAwB3D,IAAI;AAxBuD,CAA7D","sourcesContent":["import color from 'color';\nimport { Animated } from 'react-native';\nimport DarkTheme from './DarkTheme';\n\nconst isAnimatedValue = (\n  it: number | Animated.AnimatedInterpolation\n): it is Animated.Value => it instanceof Animated.Value;\n\nexport default function overlay<T extends Animated.Value | number>(\n  elevation: T,\n  surfaceColor: string = DarkTheme.colors.surface\n): T extends number ? string : Animated.AnimatedInterpolation {\n  if (isAnimatedValue(elevation)) {\n    const inputRange = [0, 1, 2, 3, 8, 24];\n\n    // @ts-expect-error: TS doesn't seem to refine the type correctly\n    return elevation.interpolate({\n      inputRange,\n      outputRange: inputRange.map((elevation) => {\n        return calculateColor(surfaceColor, elevation);\n      }),\n    });\n  }\n\n  // @ts-expect-error: TS doesn't seem to refine the type correctly\n  return calculateColor(surfaceColor, elevation);\n}\n\nfunction calculateColor(surfaceColor: string, elevation: number = 1) {\n  let overlayTransparency: number;\n  if (elevation >= 1 && elevation <= 24) {\n    overlayTransparency = elevationOverlayTransparency[elevation];\n  } else if (elevation > 24) {\n    overlayTransparency = elevationOverlayTransparency[24];\n  } else {\n    overlayTransparency = elevationOverlayTransparency[1];\n  }\n  return color(surfaceColor)\n    .mix(color('white'), overlayTransparency * 0.01)\n    .hex();\n}\n\nconst elevationOverlayTransparency: Record<string, number> = {\n  1: 5,\n  2: 7,\n  3: 8,\n  4: 9,\n  5: 10,\n  6: 11,\n  7: 11.5,\n  8: 12,\n  9: 12.5,\n  10: 13,\n  11: 13.5,\n  12: 14,\n  13: 14.25,\n  14: 14.5,\n  15: 14.75,\n  16: 15,\n  17: 15.12,\n  18: 15.24,\n  19: 15.36,\n  20: 15.48,\n  21: 15.6,\n  22: 15.72,\n  23: 15.84,\n  24: 16,\n};\n"]},"metadata":{},"sourceType":"module"}