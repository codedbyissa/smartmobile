{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"enabled\", \"onValueChange\", \"selectedValue\", \"itemStyle\", \"mode\", \"prompt\", \"dropdownIconColor\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport * as ReactNativeWeb from \"react-native-web/dist/index\";\nimport { forwardRef, useRef } from 'react';\nimport PickerItem from \"./PickerItem\";\nvar createElement = ReactNativeWeb.createElement || ReactNativeWeb.unstable_createElement;\nvar Select = forwardRef(function (props, forwardedRef) {\n  return createElement('select', props);\n});\nvar Picker = forwardRef(function (props, forwardedRef) {\n  var enabled = props.enabled,\n      onValueChange = props.onValueChange,\n      selectedValue = props.selectedValue,\n      itemStyle = props.itemStyle,\n      mode = props.mode,\n      prompt = props.prompt,\n      dropdownIconColor = props.dropdownIconColor,\n      other = _objectWithoutProperties(props, _excluded);\n\n  var hostRef = useRef(null);\n  var handleChange = React.useCallback(function (e) {\n    var _e$target = e.target,\n        selectedIndex = _e$target.selectedIndex,\n        value = _e$target.value;\n\n    if (onValueChange) {\n      onValueChange(value, selectedIndex);\n    }\n  }, [onValueChange]);\n  return React.createElement(Select, _extends({\n    disabled: enabled === false ? true : undefined,\n    onChange: handleChange,\n    ref: hostRef,\n    value: selectedValue\n  }, other));\n});\nPicker.Item = PickerItem;\nexport default Picker;","map":{"version":3,"sources":["Picker.web.js"],"names":["createElement","ReactNativeWeb","Select","forwardRef","Picker","other","hostRef","useRef","handleChange","e","value","onValueChange","enabled","selectedValue"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAOA,OAAO,KAAP,KAAA,MAAA,OAAA;OACO,KAAP,c;AACA,SAAA,UAAA,EAAA,MAAA,QAAA,OAAA;AAIA,OAAA,UAAA;AAmBA,IAAMA,aAAa,GACjBC,cAAc,CAAdA,aAAAA,IAAgCA,cAAc,CADhD,sBAAA;AAGA,IAAMC,MAAM,GAAGC,UAAU,CAAC,UAAA,KAAA,EAAA,YAAA;EAAA,OACxBH,aAAa,CAAA,QAAA,EADf,KACe,CADW;AAAA,CAAD,CAAzB;AAIA,IAAMI,MAAmD,GAAGD,UAAU,CAGpE,UAAA,KAAA,EAAA,YAAA,EAAyB;EACzB,IAAM,OAAN,GAAA,KAAA,CAAM,OAAN;EAAA,IAAM,aAAN,GAAA,KAAA,CAAM,aAAN;EAAA,IAAM,aAAN,GAAA,KAAA,CAAM,aAAN;EAAA,IAAM,SAAN,GAAA,KAAA,CAAM,SAAN;EAAA,IAAM,IAAN,GAAA,KAAA,CAAM,IAAN;EAAA,IAAM,MAAN,GAAA,KAAA,CAAM,MAAN;EAAA,IAAM,iBAAN,GAAA,KAAA,CAAM,iBAAN;EAAA,IAQKE,KARL,4BAAA,KAAA;;EAWA,IAAMC,OAAO,GAAGC,MAAM,CAAtB,IAAsB,CAAtB;EAEA,IAAMC,YAAY,GAAG,KAAK,CAAL,WAAA,CAClBC,UAAAA,CAAD,EAAe;IACb,gBAA+BA,CAAC,CAAhC,MAAA;IAAA,IAAM,aAAN,aAAM,aAAN;IAAA,IAAsBC,KAAtB,aAAsBA,KAAtB;;IACA,IAAA,aAAA,EAAmB;MACjBC,aAAa,CAAA,KAAA,EAAbA,aAAa,CAAbA;IACD;EALgB,CAAA,EAOnB,CAPF,aAOE,CAPmB,CAArB;EAUA,OAEE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;IACE,QAAQ,EAAEC,OAAO,KAAPA,KAAAA,GAAAA,IAAAA,GADZ,SAAA;IAEE,QAAQ,EAFV,YAAA;IAGE,GAAG,EAHL,OAAA;IAIE,KAAK,EAAEC;EAJT,CAAA,EAAA,KAAA,CAAA,CAFF;AA3BF,CAAsE,CAAtE;AAwCAT,MAAM,CAANA,IAAAA,GAAAA,UAAAA;AAEA,eAAA,MAAA","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * @flow\n *\n */\n\nimport * as React from 'react';\nimport * as ReactNativeWeb from 'react-native-web';\nimport {forwardRef, useRef} from 'react';\nimport type {ViewProps} from 'react-native-web/src/exports/View/types';\nimport type {GenericStyleProp} from 'react-native-web/src/types';\nimport type {TextStyle} from 'react-native-web/src/exports/Text/types';\nimport PickerItem from './PickerItem';\n\ntype PickerProps = {\n  ...ViewProps,\n  children?: typeof PickerItem | Array<typeof PickerItem>,\n  enabled?: boolean,\n  onValueChange?: (number | string, number) => void,\n  selectedValue?: number | string,\n  /**\n   * dropdownIconColor\n   * Not used for Web.\n   */\n  dropdownIconColor?: string,\n  /* compat */\n  itemStyle?: GenericStyleProp<TextStyle>,\n  mode?: string,\n  prompt?: string,\n};\n\nconst createElement =\n  ReactNativeWeb.createElement || ReactNativeWeb.unstable_createElement;\n\nconst Select = forwardRef((props: any, forwardedRef) =>\n  createElement('select', props),\n);\n\nconst Picker: React$AbstractComponent<PickerProps, empty> = forwardRef<\n  PickerProps,\n  *,\n>((props, forwardedRef) => {\n  const {\n    enabled,\n    onValueChange,\n    selectedValue,\n    itemStyle,\n    mode,\n    prompt,\n    dropdownIconColor,\n    ...other\n  } = props;\n\n  const hostRef = useRef(null);\n\n  const handleChange = React.useCallback<any>(\n    (e: Object) => {\n      const {selectedIndex, value} = e.target;\n      if (onValueChange) {\n        onValueChange(value, selectedIndex);\n      }\n    },\n    [onValueChange],\n  );\n\n  return (\n    // $FlowFixMe\n    <Select\n      disabled={enabled === false ? true : undefined}\n      onChange={handleChange}\n      ref={hostRef}\n      value={selectedValue}\n      {...other}\n    />\n  );\n});\n\n// $FlowFixMe\nPicker.Item = PickerItem;\n\nexport default Picker;\n"]},"metadata":{},"sourceType":"module"}