{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AnimatedText from \"../../Typography/AnimatedText\";\n\nvar LabelBackground = function LabelBackground(_ref) {\n  var parentState = _ref.parentState,\n      _ref$labelProps = _ref.labelProps,\n      placeholderStyle = _ref$labelProps.placeholderStyle,\n      baseLabelTranslateX = _ref$labelProps.baseLabelTranslateX,\n      topPosition = _ref$labelProps.topPosition,\n      hasActiveOutline = _ref$labelProps.hasActiveOutline,\n      label = _ref$labelProps.label,\n      backgroundColor = _ref$labelProps.backgroundColor,\n      roundness = _ref$labelProps.roundness,\n      labelStyle = _ref.labelStyle,\n      maxFontSizeMultiplier = _ref.maxFontSizeMultiplier;\n  var hasFocus = hasActiveOutline || parentState.value;\n  var opacity = parentState.labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasFocus ? 1 : 0, 0]\n  });\n  var labelTranslationX = {\n    transform: [{\n      translateX: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [-baseLabelTranslateX, 0]\n      })\n    }]\n  };\n  return label ? [React.createElement(Animated.View, {\n    key: \"labelBackground-view\",\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.view, {\n      backgroundColor: backgroundColor,\n      maxHeight: Math.max(roundness / 3, 2),\n      opacity: opacity,\n      bottom: Math.max(roundness, 2)\n    }, labelTranslationX]\n  }), React.createElement(AnimatedText, {\n    key: \"labelBackground-text\",\n    style: [placeholderStyle, labelStyle, styles.outlinedLabel, {\n      top: topPosition + 1,\n      backgroundColor: backgroundColor,\n      opacity: opacity,\n      transform: [].concat(_toConsumableArray(labelStyle.transform), [{\n        scaleY: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.2, 1]\n        })\n      }]),\n      maxWidth: parentState.labelLayout.width - 2 * placeholderStyle.paddingHorizontal\n    }],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, label)] : null;\n};\n\nexport default LabelBackground;\nvar styles = StyleSheet.create({\n  view: {\n    position: 'absolute',\n    top: 6,\n    left: 10,\n    width: 12\n  },\n  outlinedLabel: {\n    position: 'absolute',\n    left: 18,\n    paddingHorizontal: 0,\n    color: 'transparent'\n  }\n});","map":{"version":3,"sources":["LabelBackground.tsx"],"names":["LabelBackground","labelProps","roundness","maxFontSizeMultiplier","hasFocus","hasActiveOutline","parentState","opacity","inputRange","outputRange","labelTranslationX","transform","translateX","label","StyleSheet","styles","backgroundColor","maxHeight","Math","bottom","top","topPosition","labelStyle","scaleY","maxWidth","placeholderStyle","paddingHorizontal","view","position","left","width","outlinedLabel","color"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\n\nimport AnimatedText from '../../Typography/AnimatedText';\n\nimport type { LabelBackgroundProps } from '../types';\n\nconst LabelBackground = ({\n  parentState,\n  labelProps: {\n    placeholderStyle,\n    baseLabelTranslateX,\n    topPosition,\n    hasActiveOutline,\n    label,\n    backgroundColor,\n    roundness,\n  },\n  labelStyle,\n  maxFontSizeMultiplier,\n}: LabelBackgroundProps) => {\n  const hasFocus = hasActiveOutline || parentState.value;\n  const opacity = parentState.labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasFocus ? 1 : 0, 0],\n  });\n\n  const labelTranslationX = {\n    transform: [\n      {\n        translateX: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [-baseLabelTranslateX, 0],\n        }),\n      },\n    ],\n  };\n\n  return label\n    ? [\n        <Animated.View\n          key=\"labelBackground-view\"\n          pointerEvents=\"none\"\n          style={[\n            StyleSheet.absoluteFill,\n            styles.view,\n            {\n              backgroundColor,\n              maxHeight: Math.max(roundness / 3, 2),\n              opacity,\n              bottom: Math.max(roundness, 2),\n            },\n            labelTranslationX,\n          ]}\n        />,\n        <AnimatedText\n          key=\"labelBackground-text\"\n          style={[\n            placeholderStyle,\n            labelStyle,\n            styles.outlinedLabel,\n            {\n              top: topPosition + 1,\n              backgroundColor,\n              opacity,\n              transform: [\n                ...labelStyle.transform,\n                {\n                  scaleY: parentState.labeled.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [0.2, 1],\n                  }),\n                },\n              ],\n              maxWidth:\n                parentState.labelLayout.width -\n                2 * placeholderStyle.paddingHorizontal,\n            },\n          ]}\n          numberOfLines={1}\n          maxFontSizeMultiplier={maxFontSizeMultiplier}\n        >\n          {label}\n        </AnimatedText>,\n      ]\n    : null;\n};\n\nexport default LabelBackground;\n\nconst styles = StyleSheet.create({\n  view: {\n    position: 'absolute',\n    top: 6,\n    left: 10,\n    width: 12,\n  },\n  outlinedLabel: {\n    position: 'absolute',\n    left: 18,\n    paddingHorizontal: 0,\n    color: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}