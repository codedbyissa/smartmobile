{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _excluded = [\"enabled\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Hammer from '@egjs/hammerjs';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { State } from \"../State\";\nimport { EventMap } from \"./constants\";\nimport * as NodeManager from \"./NodeManager\";\nvar gestureInstances = 0;\n\nvar GestureHandler = function () {\n  function GestureHandler() {\n    var _this = this;\n\n    _classCallCheck(this, GestureHandler);\n\n    _defineProperty(this, \"handlerTag\", void 0);\n\n    _defineProperty(this, \"isGestureRunning\", false);\n\n    _defineProperty(this, \"view\", null);\n\n    _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n\n    _defineProperty(this, \"hasGestureFailed\", false);\n\n    _defineProperty(this, \"hammer\", null);\n\n    _defineProperty(this, \"initialRotation\", null);\n\n    _defineProperty(this, \"__initialX\", void 0);\n\n    _defineProperty(this, \"__initialY\", void 0);\n\n    _defineProperty(this, \"config\", {});\n\n    _defineProperty(this, \"previousState\", State.UNDETERMINED);\n\n    _defineProperty(this, \"pendingGestures\", {});\n\n    _defineProperty(this, \"oldState\", State.UNDETERMINED);\n\n    _defineProperty(this, \"lastSentState\", null);\n\n    _defineProperty(this, \"gestureInstance\", void 0);\n\n    _defineProperty(this, \"_stillWaiting\", void 0);\n\n    _defineProperty(this, \"propsRef\", void 0);\n\n    _defineProperty(this, \"ref\", void 0);\n\n    _defineProperty(this, \"clearSelfAsPending\", function () {\n      if (Array.isArray(_this.config.waitFor)) {\n        for (var _iterator = _createForOfIteratorHelperLoose(_this.config.waitFor), _step; !(_step = _iterator()).done;) {\n          var gesture = _step.value;\n          gesture.removePendingGesture(_this.id);\n        }\n      }\n    });\n\n    _defineProperty(this, \"destroy\", function () {\n      _this.clearSelfAsPending();\n\n      if (_this.hammer) {\n        _this.hammer.stop(false);\n\n        _this.hammer.destroy();\n      }\n\n      _this.hammer = null;\n    });\n\n    _defineProperty(this, \"isPointInView\", function (_ref) {\n      var x = _ref.x,\n          y = _ref.y;\n\n      var rect = _this.view.getBoundingClientRect();\n\n      var pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    });\n\n    _defineProperty(this, \"sendEvent\", function (nativeEvent) {\n      var _this$propsRef$curren = _this.propsRef.current,\n          onGestureHandlerEvent = _this$propsRef$curren.onGestureHandlerEvent,\n          onGestureHandlerStateChange = _this$propsRef$curren.onGestureHandlerStateChange;\n\n      var event = _this.transformEventData(nativeEvent);\n\n      invokeNullableMethod(onGestureHandlerEvent, event);\n\n      if (_this.lastSentState !== event.nativeEvent.state) {\n        _this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod(onGestureHandlerStateChange, event);\n      }\n    });\n\n    _defineProperty(this, \"sync\", function () {\n      var gesture = _this.hammer.get(_this.name);\n\n      if (!gesture) return;\n\n      var enable = function enable(recognizer, inputData) {\n        if (!_this.config.enabled) {\n          _this.isGestureRunning = false;\n          _this.hasGestureFailed = false;\n          return false;\n        }\n\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return _this.shouldEnableGestureOnSetup;\n        }\n\n        if (_this.hasGestureFailed) {\n          return false;\n        }\n\n        if (!_this.isDiscrete) {\n          if (_this.isGestureRunning) {\n            return true;\n          }\n\n          _this._stillWaiting = _this._getPendingGestures();\n\n          if (_this._stillWaiting.length) {\n            for (var _iterator2 = _createForOfIteratorHelperLoose(_this._stillWaiting), _step2; !(_step2 = _iterator2()).done;) {\n              var _gesture2 = _step2.value;\n\n              if (!_gesture2.isDiscrete && _gesture2.isGestureRunning) {\n                _this.hasGestureFailed = true;\n                _this.isGestureRunning = false;\n                return false;\n              }\n            }\n\n            return false;\n          }\n        }\n\n        if (!_this.hasCustomActivationCriteria) {\n          return true;\n        }\n\n        var deltaRotation = _this.initialRotation == null ? 0 : inputData.rotation - _this.initialRotation;\n\n        var _this$isGestureEnable = _this.isGestureEnabledForEvent(_this.getConfig(), recognizer, _objectSpread(_objectSpread({}, inputData), {}, {\n          deltaRotation: deltaRotation\n        })),\n            success = _this$isGestureEnable.success,\n            failed = _this$isGestureEnable.failed;\n\n        if (failed) {\n          _this.simulateCancelEvent(inputData);\n\n          _this.hasGestureFailed = true;\n        }\n\n        return success;\n      };\n\n      var params = _this.getHammerConfig();\n\n      gesture.set(_objectSpread(_objectSpread({}, params), {}, {\n        enable: enable\n      }));\n    });\n\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  _createClass(GestureHandler, [{\n    key: \"id\",\n    get: function get() {\n      return \"\" + this.name + this.gestureInstance;\n    }\n  }, {\n    key: \"isDiscrete\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(_gesture) {}\n  }, {\n    key: \"removePendingGesture\",\n    value: function removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n  }, {\n    key: \"addPendingGesture\",\n    value: function addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_config, _recognizer, _event) {\n      return {\n        success: true\n      };\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(_config) {\n      return true;\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref2) {\n      var _ref2$enabled = _ref2.enabled,\n          enabled = _ref2$enabled === void 0 ? true : _ref2$enabled,\n          props = _objectWithoutProperties(_ref2, _excluded);\n\n      this.clearSelfAsPending();\n      this.config = ensureConfig(_objectSpread({\n        enabled: enabled\n      }, props));\n      this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n\n      if (Array.isArray(this.config.waitFor)) {\n        for (var _iterator3 = _createForOfIteratorHelperLoose(this.config.waitFor), _step3; !(_step3 = _iterator3()).done;) {\n          var gesture = _step3.value;\n          gesture.addPendingGesture(this);\n        }\n      }\n\n      if (this.hammer) {\n        this.sync();\n      }\n\n      return this.config;\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      if (type == 0) {\n        return 0;\n      }\n\n      return EventMap[type];\n    }\n  }, {\n    key: \"transformEventData\",\n    value: function transformEventData(event) {\n      var eventType = event.eventType,\n          numberOfPointers = event.maxPointers;\n      var changedTouch = event.changedPointers[0];\n      var pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      });\n      var state = this.getState(eventType);\n\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n\n      return {\n        nativeEvent: _objectSpread(_objectSpread({\n          numberOfPointers: numberOfPointers,\n          state: state,\n          pointerInside: pointerInside\n        }, this.transformNativeEvent(event)), {}, {\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          oldState: this.oldState\n        }),\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_event) {\n      return {};\n    }\n  }, {\n    key: \"cancelPendingGestures\",\n    value: function cancelPendingGestures(event) {\n      for (var _i = 0, _Object$values = Object.values(this.pendingGestures); _i < _Object$values.length; _i++) {\n        var gesture = _Object$values[_i];\n\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n  }, {\n    key: \"notifyPendingGestures\",\n    value: function notifyPendingGestures() {\n      for (var _i2 = 0, _Object$values2 = Object.values(this.pendingGestures); _i2 < _Object$values2.length; _i2++) {\n        var gesture = _Object$values2[_i2];\n\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n  }, {\n    key: \"forceInvalidate\",\n    value: function forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n  }, {\n    key: \"cancelEvent\",\n    value: function cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: Hammer.INPUT_CANCEL,\n        isFinal: true\n      }));\n      this.onGestureEnded(event);\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(_ref3) {\n      var isFirst = _ref3.isFirst;\n\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n  }, {\n    key: \"setView\",\n    value: function setView(ref, propsRef) {\n      var _this2 = this;\n\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      }\n\n      this.propsRef = propsRef;\n      this.ref = ref;\n      this.view = findNodeHandle(ref);\n      this.hammer = new Hammer.Manager(this.view);\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n      this.lastSentState = null;\n      var NativeGestureClass = this.NativeGestureClass;\n      var gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', function (ev) {\n        if (!_this2.config.enabled) {\n          _this2.hasGestureFailed = false;\n          _this2.isGestureRunning = false;\n          return;\n        }\n\n        _this2.onRawEvent(ev);\n\n        if (_this2.initialRotation === null && ev.rotation !== 0) {\n          _this2.initialRotation = ev.rotation;\n        }\n\n        if (ev.isFinal) {\n          setTimeout(function () {\n            _this2.initialRotation = null;\n            _this2.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this3 = this;\n\n      if (!this.isDiscrete) {\n        this.hammer.on(this.name + \"start\", function (event) {\n          return _this3.onStart(event);\n        });\n        this.hammer.on(this.name + \"end \" + this.name + \"cancel\", function (event) {\n          _this3.onGestureEnded(event);\n        });\n      }\n\n      this.hammer.on(this.name, function (ev) {\n        return _this3.onGestureActivated(ev);\n      });\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(_ref4) {\n      var deltaX = _ref4.deltaX,\n          deltaY = _ref4.deltaY,\n          rotation = _ref4.rotation;\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n  }, {\n    key: \"onSuccess\",\n    value: function onSuccess() {}\n  }, {\n    key: \"_getPendingGestures\",\n    value: function _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        var stillWaiting = this.config.waitFor.filter(function (_ref5) {\n          var hasGestureFailed = _ref5.hasGestureFailed;\n          return hasGestureFailed === false;\n        });\n        return stillWaiting;\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      var pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers: pointers\n      };\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(_inputData) {}\n  }]);\n\n  return GestureHandler;\n}();\n\nfunction invokeNullableMethod(method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        var handler = method.__getHandler();\n\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          var argMapping = method.__nodeConfig.argMapping;\n\n          if (Array.isArray(argMapping)) {\n            for (var _iterator4 = _createForOfIteratorHelperLoose(argMapping.entries()), _step4; !(_step4 = _iterator4()).done;) {\n              var _ref6 = _step4.value;\n\n              var _ref7 = _slicedToArray(_ref6, 2);\n\n              var index = _ref7[0];\n\n              var _ref7$ = _slicedToArray(_ref7[1], 2);\n\n              var key = _ref7$[0];\n              var value = _ref7$[1];\n\n              if (key in event.nativeEvent) {\n                var nativeValue = event.nativeEvent[key];\n\n                if (value && value.setValue) {\n                  value.setValue(nativeValue);\n                } else {\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction ensureConfig(config) {\n  var props = _objectSpread({}, config);\n\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist * props.minDist;\n  }\n\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity * props.minVelocity;\n  }\n\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist * config.maxDist;\n  }\n\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor).map(function (_ref8) {\n      var handlerTag = _ref8.handlerTag;\n      return NodeManager.getHandler(handlerTag);\n    }).filter(function (v) {\n      return v;\n    });\n  } else {\n    props.waitFor = null;\n  }\n\n  var configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n  configProps.forEach(function (prop) {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props;\n}\n\nfunction asArray(value) {\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;","map":{"version":3,"sources":["GestureHandler.ts"],"names":["gestureInstances","State","UNDETERMINED","id","name","isDiscrete","shouldEnableGestureOnSetup","constructor","getConfig","onWaitingEnded","removePendingGesture","addPendingGesture","gesture","isGestureEnabledForEvent","success","NativeGestureClass","updateHasCustomActivationCriteria","Array","updateGestureConfig","enabled","props","ensureConfig","y","rect","pointerInside","x","getState","type","EventMap","transformEventData","maxPointers","numberOfPointers","changedTouch","event","clientY","state","nativeEvent","handlerTag","target","oldState","timeStamp","Date","transformNativeEvent","onGestureHandlerStateChange","invokeNullableMethod","cancelPendingGestures","Object","notifyPendingGestures","onGestureEnded","forceInvalidate","cancelEvent","eventType","Hammer","isFinal","onRawEvent","isFirst","setView","ref","findNodeHandle","ev","setTimeout","setupEvents","onStart","rotation","onGestureActivated","onSuccess","_getPendingGestures","stillWaiting","hasGestureFailed","getHammerConfig","pointers","enable","recognizer","inputData","deltaRotation","failed","params","simulateCancelEvent","method","handler","argMapping","key","nativeValue","value","config","asArray","NodeManager","v","configProps","prop","Number"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAA,MAAA,MAAA,gBAAA;;AAGA,SAAA,KAAA;AACA,SAAA,QAAA;AACA,OAAO,KAAP,WAAA;AA4BA,IAAIA,gBAAgB,GAApB,CAAA;;IAEA,c;EAkCEO,0BAAc;IAAA;;IAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,kBAAA,EAhCY,KAgCZ,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EA/Be,IA+Bf,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,6BAAA,EAAA,KAAA,CAAA,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,kBAAA,EA7Be,KA6Bf,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EA5B2B,IA4B3B,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EA3B6B,IA2B7B,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAxBa,EAwBb,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EAvBmBN,KAAK,CAACC,YAuBzB,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAtBkC,EAsBlC,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EArBYD,KAAK,CAACC,YAqBlB,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EApBwB,IAoBxB,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAAA,KAAA,CAAA,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EAAA,KAAA,CAAA,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,KAAA,EAAA,KAAA,CAAA,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,oBAAA,EAmCO,YAAM;MACzB,IAAIe,KAAK,CAALA,OAAAA,CAAc,KAAA,CAAA,MAAA,CAAlB,OAAIA,CAAJ,EAAwC;QACtC,qDAAsB,KAAA,CAAA,MAAA,CAAtB,OAAA,wCAA2C;UAAA,IAA3C,OAA2C;UACzCL,OAAO,CAAPA,oBAAAA,CAA6B,KAAA,CAA7BA,EAAAA;QACD;MACF;IAxCW,CAAA,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EA8DJ,YAAM;MACd,KAAA,CAAA,kBAAA;;MAEA,IAAI,KAAA,CAAJ,MAAA,EAAiB;QACf,KAAA,CAAA,MAAA,CAAA,IAAA,CAAA,KAAA;;QACA,KAAA,CAAA,MAAA,CAAA,OAAA;MACD;;MACD,KAAA,CAAA,MAAA,GAAA,IAAA;IArEY,CAAA,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,eAAA,EAwEE,gBAAwC;MAAA,IAAvC,CAAuC,QAAvC,CAAuC;MAAA,IAAlCU,CAAkC,QAAlCA,CAAkC;;MAEtD,IAAMC,IAAI,GAAG,KAAA,CAAA,IAAA,CAAb,qBAAa,EAAb;;MACA,IAAMC,aAAa,GACjBC,CAAC,IAAIF,IAAI,CAATE,IAAAA,IAAkBA,CAAC,IAAIF,IAAI,CAA3BE,KAAAA,IAAqCH,CAAC,IAAIC,IAAI,CAA9CE,GAAAA,IAAsDH,CAAC,IAAIC,IAAI,CADjE,MAAA;MAEA,OAAA,aAAA;IA7EY,CAAA,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EA2HDa,UAAAA,WAAD,EAAiC;MAC3C,4BAGI,KAAA,CAAA,QAAA,CAHJ,OAAA;MAAA,IAAM,qBAAN,yBAAM,qBAAN;MAAA,IAEEO,2BAFF,yBAEEA,2BAFF;;MAKA,IAAMV,KAAK,GAAG,KAAA,CAAA,kBAAA,CAAd,WAAc,CAAd;;MAEAW,oBAAoB,CAAA,qBAAA,EAApBA,KAAoB,CAApBA;;MACA,IAAI,KAAA,CAAA,aAAA,KAAuBX,KAAK,CAALA,WAAAA,CAA3B,KAAA,EAAoD;QAClD,KAAA,CAAA,aAAA,GAAqBA,KAAK,CAALA,WAAAA,CAArB,KAAA;QACAW,oBAAoB,CAAA,2BAAA,EAApBA,KAAoB,CAApBA;MACD;IAvIW,CAAA,CAAA;;IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAmSP,YAAM;MACX,IAAMhC,OAAO,GAAG,KAAA,CAAA,MAAA,CAAA,GAAA,CAAiB,KAAA,CAAjC,IAAgB,CAAhB;;MACA,IAAI,CAAJ,OAAA,EAAc;;MAEd,IAAM2D,MAAM,GAAG,SAATA,MAAS,CAAA,UAAA,EAAA,SAAA,EAAqC;QAClD,IAAI,CAAC,KAAA,CAAA,MAAA,CAAL,OAAA,EAA0B;UACxB,KAAA,CAAA,gBAAA,GAAA,KAAA;UACA,KAAA,CAAA,gBAAA,GAAA,KAAA;UACA,OAAA,KAAA;QAJgD;;QAQlD,IACE,CAAA,SAAA,IACA,CAACC,UAAU,CADX,OAAA,IAEA,OAAOC,SAAS,CAAhB,WAAA,KAHF,WAAA,EAIE;UACA,OAAO,KAAA,CAAP,0BAAA;QACD;;QAED,IAAI,KAAA,CAAJ,gBAAA,EAA2B;UACzB,OAAA,KAAA;QACD;;QAED,IAAI,CAAC,KAAA,CAAL,UAAA,EAAsB;UACpB,IAAI,KAAA,CAAJ,gBAAA,EAA2B;YACzB,OAAA,IAAA;UAFkB;;UAMpB,KAAA,CAAA,aAAA,GAAqB,KAAA,CAND,mBAMC,EAArB;;UAEA,IAAI,KAAA,CAAA,aAAA,CAAJ,MAAA,EAA+B;YAG7B,sDAAsB,KAAA,CAAtB,aAAA,2CAA0C;cAAA,IAA1C,SAA0C;;cAExC,IAAI,CAAC7D,SAAO,CAAR,UAAA,IAAuBA,SAAO,CAAlC,gBAAA,EAAqD;gBACnD,KAAA,CAAA,gBAAA,GAAA,IAAA;gBACA,KAAA,CAAA,gBAAA,GAAA,KAAA;gBACA,OAAA,KAAA;cACD;YAT0B;;YAY7B,OAAA,KAAA;UACD;QAzC+C;;QA6ClD,IAAI,CAAC,KAAA,CAAL,2BAAA,EAAuC;UACrC,OAAA,IAAA;QACD;;QAED,IAAM8D,aAAa,GACjB,KAAA,CAAA,eAAA,IAAA,IAAA,GAAA,CAAA,GAEID,SAAS,CAATA,QAAAA,GAAqB,KAAA,CApDuB,eAiDlD;;QAKA,4BAA4B,KAAA,CAAA,wBAAA,CAC1B,KAAA,CAD0B,SAC1B,EAD0B,EAAA,UAAA,kCAG1B,SAH0B;UAKxBC,aAAAA,EAAAA;QALwB,GAA5B;QAAA,IAAM,OAAN,yBAAM,OAAN;QAAA,IAAiBC,MAAjB,yBAAiBA,MAAjB;;QASA,IAAA,MAAA,EAAY;UACV,KAAA,CAAA,mBAAA,CAAA,SAAA;;UACA,KAAA,CAAA,gBAAA,GAAA,IAAA;QACD;;QACD,OAAA,OAAA;MAnEF,CAAA;;MAsEA,IAAMC,MAAM,GAAG,KAAA,CA1EJ,eA0EI,EAAf;;MAEAhE,OAAO,CAAPA,GAAAA,iCAAY,MAAZA;QAAyB2D,MAAAA,EAAAA;MAAzB3D;IA/WY,CAAA,CAAA;;IACZ,KAAA,eAAA,GAAuBZ,gBAAvB,EAAA;IACA,KAAA,2BAAA,GAAA,KAAA;EACD;;;;SAfGG,eAAK;MACP,YAAU,KAAKC,IAAf,GAAsB,KAAtB,eAAA;IACD;;;SAEGC,eAAa;MACf,OAAA,KAAA;IACD;;;SAEGC,eAAsC;MACxC,MAAM,IAAA,KAAA,CAAN,yDAAM,CAAN;IACD;;;WAODE,qBAAY;MACV,OAAO,KAAP,MAAA;IACD;;;WAEDC,wBAAc,QAAdA,EAA+B,CAAE;;;WAEjCC,8BAAoB,EAApBA,EAAiC;MAC/B,OAAO,KAAA,eAAA,CAAP,EAAO,CAAP;IACD;;;WAEDC,2BAAiB,OAAjBA,EAAiC;MAC/B,KAAA,eAAA,CAAqBC,OAAO,CAA5B,EAAA,IAAA,OAAA;IACD;;;WAEDC,kCAAwB,OAAxBA,EAAwB,WAAxBA,EAAwB,MAAxBA,EAI2C;MACzC,OAAO;QAAEC,OAAO,EAAE;MAAX,CAAP;IACD;;;SAEGC,eAAuC;MACzC,MAAM,IAAA,KAAA,CAAN,iDAAM,CAAN;IACD;;;WAEDC,2CAAiC,OAAjCA,EAAmD;MACjD,OAAA,IAAA;IACD;;;WAUDE,oCAAkD;MAAA,0BAA5BC,OAA4B;MAAA,IAA5BA,OAA4B,8BAA9B,IAA8B;MAAA,IAATC,KAAS;;MAChD,KAAA,kBAAA;MAEA,KAAA,MAAA,GAAcC,YAAY;QAAGF,OAAF,EAAEA;MAAH,GAAeC,KAAf,EAA1B;MACA,KAAA,2BAAA,GAAmC,KAAA,iCAAA,CACjC,KADF,MAAmC,CAAnC;;MAGA,IAAIH,KAAK,CAALA,OAAAA,CAAc,KAAA,MAAA,CAAlB,OAAIA,CAAJ,EAAwC;QACtC,sDAAsB,KAAA,MAAA,CAAtB,OAAA,2CAA2C;UAAA,IAA3C,OAA2C;UACzCL,OAAO,CAAPA,iBAAAA,CAAAA,IAAAA;QACD;MACF;;MAED,IAAI,KAAJ,MAAA,EAAiB;QACf,KAAA,IAAA;MACD;;MACD,OAAO,KAAP,MAAA;IACD;;;WAoBDc,kBAAQ,IAARA,EAA6C;MAE3C,IAAIC,IAAI,IAAR,CAAA,EAAe;QACb,OAAA,CAAA;MACD;;MACD,OAAOC,QAAQ,CAAf,IAAe,CAAf;IACD;;;WAEDC,4BAAkB,KAAlBA,EAA0C;MACxC,IAAM,SAAN,GADwC,KACxC,CAAM,SAAN;MAAA,IAAgCE,gBAAhC,GADwC,KACxC,CAAmBD,WAAnB;MAEA,IAAME,YAAY,GAAGC,KAAK,CAALA,eAAAA,CAArB,CAAqBA,CAArB;MACA,IAAMT,aAAa,GAAG,KAAA,aAAA,CAAmB;QACvCC,CAAC,EAAEO,YAAY,CADwB,OAAA;QAEvCV,CAAC,EAAEU,YAAY,CAACE;MAFuB,CAAnB,CAAtB;MAMA,IAAMC,KAAK,GAAG,KAAA,QAAA,CAAd,SAAc,CAAd;;MACA,IAAIA,KAAK,KAAK,KAAd,aAAA,EAAkC;QAChC,KAAA,QAAA,GAAgB,KAAhB,aAAA;QACA,KAAA,aAAA,GAAA,KAAA;MACD;;MAED,OAAO;QACLC,WAAW;UACTL,gBADW,EACXA,gBADS;UAETI,KAFW,EAEXA,KAFS;UAGTX,aAHW,EAGXA;QAHS,GAIN,KAAA,oBAAA,CAJQ,KAIR,CAJM;UAMTa,UAAU,EAAE,KAND,UAAF;UAOTC,MAAM,EAAE,KAPG,GAAF;UAQTC,QAAQ,EAAE,KAAKA;QARN,EADN;QAWLC,SAAS,EAAEC,IAAI,CAAJA,GAAAA;MAXN,CAAP;IAaD;;;WAEDC,8BAAoB,MAApBA,EAA6C;MAC3C,OAAA,EAAA;IACD;;;WAiBDG,+BAAqB,KAArBA,EAA6C;MAC3C,kCAAsBC,MAAM,CAANA,MAAAA,CAAc,KAApC,eAAsBA,CAAtB,oCAA2D;QAAtD,IAAMlC,OAAX,qBAAK;;QACH,IAAIA,OAAO,IAAIA,OAAO,CAAtB,gBAAA,EAAyC;UACvCA,OAAO,CAAPA,gBAAAA,GAAAA,IAAAA;UACAA,OAAO,CAAPA,WAAAA,CAAAA,KAAAA;QACD;MACF;IACF;;;WAEDmC,iCAAwB;MACtB,oCAAsBD,MAAM,CAANA,MAAAA,CAAc,KAApC,eAAsBA,CAAtB,uCAA2D;QAAtD,IAAMlC,OAAX,uBAAK;;QACH,IAAA,OAAA,EAAa;UACXA,OAAO,CAAPA,cAAAA,CAAAA,IAAAA;QACD;MACF;IA1LyB;;;WA8L5BoC,wBAAc,KAAdA,EAAsC;MACpC,KAAA,gBAAA,GAAA,KAAA;MACA,KAAA,qBAAA,CAAA,KAAA;IACD;;;WAEDC,yBAAe,KAAfA,EAAuC;MACrC,IAAI,KAAJ,gBAAA,EAA2B;QACzB,KAAA,gBAAA,GAAA,IAAA;QACA,KAAA,WAAA,CAAA,KAAA;MACD;IACF;;;WAEDC,qBAAW,KAAXA,EAAmC;MACjC,KAAA,qBAAA;MACA,KAAA,SAAA,iCAAe,KAAf;QAEEC,SAAS,EAAEC,MAAM,CAFJ,YAAf;QAGEC,OAAO,EAAE;MAHX;MAKA,KAAA,cAAA,CAAA,KAAA;IACD;;;WAEDC,2BAAwC;MAAA,IAA3BC,OAA2B,SAA3BA,OAA2B;;MACtC,IAAA,OAAA,EAAa;QACX,KAAA,gBAAA,GAAA,KAAA;MACD;IACF;;;WAEDC,iBAAO,GAAPA,EAAO,QAAPA,EAAoE;MAAA;;MAClE,IAAIC,GAAG,IAAP,IAAA,EAAiB;QACf,KAAA,OAAA;QACA,KAAA,IAAA,GAAA,IAAA;QACA;MACD;;MAED,KAAA,QAAA,GAAA,QAAA;MACA,KAAA,GAAA,GAAA,GAAA;MAEA,KAAA,IAAA,GAAYC,cAAc,CAA1B,GAA0B,CAA1B;MACA,KAAA,MAAA,GAAc,IAAIN,MAAM,CAAV,OAAA,CAAmB,KAAjC,IAAc,CAAd;MAEA,KAAA,QAAA,GAAgBnD,KAAK,CAArB,YAAA;MACA,KAAA,aAAA,GAAqBA,KAAK,CAA1B,YAAA;MACA,KAAA,aAAA,GAAA,IAAA;MAEA,IAAQc,kBAAR,GAjBkE,IAiBlE,CAAQA,kBAAR;MAEA,IAAMH,OAAO,GAAG,IAAA,kBAAA,CAAuB,KAAvC,eAAuC,EAAvB,CAAhB;MACA,KAAA,MAAA,CAAA,GAAA,CAAA,OAAA;MAEA,KAAA,MAAA,CAAA,EAAA,CAAA,cAAA,EAAgC+C,UAAAA,EAAD,EAAqB;QAClD,IAAI,CAAC,MAAA,CAAA,MAAA,CAAL,OAAA,EAA0B;UACxB,MAAA,CAAA,gBAAA,GAAA,KAAA;UACA,MAAA,CAAA,gBAAA,GAAA,KAAA;UACA;QACD;;QAED,MAAA,CAAA,UAAA,CAPkD,EAOlD;;QAIA,IAAI,MAAA,CAAA,eAAA,KAAA,IAAA,IAAiCA,EAAE,CAAFA,QAAAA,KAArC,CAAA,EAAwD;UACtD,MAAA,CAAA,eAAA,GAAuBA,EAAE,CAAzB,QAAA;QACD;;QACD,IAAIA,EAAE,CAAN,OAAA,EAAgB;UAEdC,UAAU,CAAC,YAAM;YACf,MAAA,CAAA,eAAA,GAAA,IAAA;YACA,MAAA,CAAA,gBAAA,GAAA,KAAA;UAFFA,CAAU,CAAVA;QAID;MApBH,CAAA;MAuBA,KAAA,WAAA;MACA,KAAA,IAAA;IACD;;;WAEDC,uBAAc;MAAA;;MAEZ,IAAI,CAAC,KAAL,UAAA,EAAsB;QACpB,KAAA,MAAA,CAAA,EAAA,CAAmB,KAAnB,IAAA,YAAsC5B,UAAAA,KAAD;UAAA,OACnC,MAAA,CAAA,OAAA,CADF,KACE,CADmC;QAAA,CAArC;QAGA,KAAA,MAAA,CAAA,EAAA,CACK,KAAK7B,IADV,YACqB,KADrB,IAAA,aAEG6B,UAAAA,KAAD,EAAwB;UACtB,MAAA,CAAA,cAAA,CAAA,KAAA;QAHJ,CAAA;MAMD;;MACD,KAAA,MAAA,CAAA,EAAA,CAAgB,KAAhB,IAAA,EAA4B0B,UAAAA,EAAD;QAAA,OACzB,MAAA,CAAA,kBAAA,CAdU,EAcV,CADyB;MAAA,CAA3B;IAGD;;;WAEDG,wBAAsD;MAAA,IAA9C,MAA8C,SAA9C,MAA8C;MAAA,IAA9C,MAA8C,SAA9C,MAA8C;MAAA,IAA5BC,QAA4B,SAA5BA,QAA4B;MAEpD,KAAA,QAAA,GAAgB9D,KAAK,CAArB,YAAA;MACA,KAAA,aAAA,GAAqBA,KAAK,CAA1B,YAAA;MACA,KAAA,aAAA,GAAA,IAAA;MAEA,KAAA,gBAAA,GAAA,IAAA;MACA,KAAA,UAAA,GAAA,MAAA;MACA,KAAA,UAAA,GAAA,MAAA;MACA,KAAA,eAAA,GAAA,QAAA;IACD;;;WAED+D,4BAAkB,EAAlBA,EAAuC;MACrC,KAAA,SAAA,CAAA,EAAA;IACD;;;WAEDC,qBAAY,CAAE;;;WAEdC,+BAAsB;MACpB,IAAIjD,KAAK,CAALA,OAAAA,CAAc,KAAA,MAAA,CAAdA,OAAAA,KAAsC,KAAA,MAAA,CAAA,OAAA,CAA1C,MAAA,EAAsE;QAGpE,IAAMkD,YAAY,GAAG,KAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CACnB;UAAA,IAAGC,gBAAH,SAAGA,gBAAH;UAAA,OAA0BA,gBAAgB,KAD5C,KACE;QAAA,CADmB,CAArB;QAGA,OAAA,YAAA;MACD;;MACD,OAAA,EAAA;IACD;;;WAEDC,2BAAkB;MAChB,IAAMC,QAAQ,GACZ,KAAA,MAAA,CAAA,WAAA,KAA4B,KAAA,MAAA,CAA5B,WAAA,GACI,KAAA,MAAA,CADJ,WAAA,GADF,CAAA;MAIA,OAAO;QACLA,QAAAA,EAAAA;MADK,CAAP;IAGD;;;WAiFDO,6BAAmB,UAAnBA,EAAqC,CAAE;;;;;;AAKzC,SAAA,oBAAA,CAAA,MAAA,EAAA,KAAA,EAME;EACA,IAAA,MAAA,EAAY;IACV,IAAI,OAAA,MAAA,KAAJ,UAAA,EAAkC;MAChCC,MAAM,CAANA,KAAM,CAANA;IADF,CAAA,MAEO;MAEL,IACE,kBAAA,MAAA,IACA,OAAOA,MAAM,CAAb,YAAA,KAFF,UAAA,EAGE;QACA,IAAMC,OAAO,GAAGD,MAAM,CAAtB,YAAgBA,EAAhB;;QACAlC,oBAAoB,CAAA,OAAA,EAApBA,KAAoB,CAApBA;MALF,CAAA,MAMO;QACL,IAAI,kBAAJ,MAAA,EAA8B;UAC5B,IAAQoC,UAAR,GAAuBF,MAAM,CAA7B,YAAA,CAAQE,UAAR;;UACA,IAAI/D,KAAK,CAALA,OAAAA,CAAJ,UAAIA,CAAJ,EAA+B;YAC7B,sDAAoC+D,UAAU,CAA9C,OAAoCA,EAApC,2CAA0D;cAAA;;cAAA;;cAAA,IAA/C,KAA+C;;cAAA;;cAAA,IAAvC,GAAuC;cAAA,IAA1D,KAA0D;;cACxD,IAAIC,GAAG,IAAIhD,KAAK,CAAhB,WAAA,EAA8B;gBAE5B,IAAMiD,WAAW,GAAGjD,KAAK,CAALA,WAAAA,CAApB,GAAoBA,CAApB;;gBACA,IAAIkD,KAAK,IAAIA,KAAK,CAAlB,QAAA,EAA6B;kBAE3BA,KAAK,CAALA,QAAAA,CAAAA,WAAAA;gBAFF,CAAA,MAGO;kBAELL,MAAM,CAANA,YAAAA,CAAAA,UAAAA,CAAAA,KAAAA,IAAwC,CAAA,GAAA,EAAxCA,WAAwC,CAAxCA;gBACD;cACF;YACF;UACF;QACF;MACF;IACF;EACF;AAGH;;AACA,SAAA,YAAA,CAAA,MAAA,EAAwD;EACtD,IAAM1D,KAAK,qBAAQgE,MAAR,CAAX;;EAGA,IAAI,aAAJ,MAAA,EAAyB;IACvBhE,KAAK,CAALA,OAAAA,GAAgBgE,MAAM,CAAtBhE,OAAAA;IACAA,KAAK,CAALA,SAAAA,GAAkBA,KAAK,CAALA,OAAAA,GAAiBA,KAAK,CAAxCA,OAAAA;EACD;;EACD,IAAI,iBAAJ,MAAA,EAA6B;IAC3BA,KAAK,CAALA,WAAAA,GAAoBgE,MAAM,CAA1BhE,WAAAA;IACAA,KAAK,CAALA,aAAAA,GAAsBA,KAAK,CAALA,WAAAA,GAAqBA,KAAK,CAAhDA,WAAAA;EACD;;EACD,IAAI,aAAJ,MAAA,EAAyB;IACvBA,KAAK,CAALA,OAAAA,GAAgBgE,MAAM,CAAtBhE,OAAAA;IACAA,KAAK,CAALA,SAAAA,GAAkBgE,MAAM,CAANA,OAAAA,GAAkBA,MAAM,CAA1ChE,OAAAA;EACD;;EACD,IAAI,aAAJ,MAAA,EAAyB;IACvBA,KAAK,CAALA,OAAAA,GAAgBiE,OAAO,CAACD,MAAM,CAAdC,OAAO,CAAPA,CAAAA,GAAAA,CACT;MAAA,IAAGhD,UAAH,SAAGA,UAAH;MAAA,OACHiD,WAAW,CAAXA,UAAAA,CAFYD,UAEZC,CADG;IAAA,CADSD,EAAAA,MAAAA,CAILE,UAAAA,CAAD;MAAA,OAJVnE,CAIU;IAAA,CAJMiE,CAAhBjE;EADF,CAAA,MAMO;IACLA,KAAK,CAALA,OAAAA,GAAAA,IAAAA;EACD;;EAED,IAAMoE,WAAW,GAAG,CAAA,aAAA,EAAA,aAAA,EAAA,SAAA,EAAA,SAAA,EAAA,WAAA,EAAA,eAAA,EAAA,WAAA,EAAA,aAAA,EAAA,kBAAA,EAAA,kBAAA,EAAA,gBAAA,EAAA,gBAAA,EAAA,oBAAA,EAAA,kBAAA,EAAA,oBAAA,EAApB,kBAAoB,CAApB;EAkBAA,WAAW,CAAXA,OAAAA,CAAqBC,UAAAA,IAAD,EAAsC;IACxD,IAAI,OAAOrE,KAAK,CAAZ,IAAY,CAAZ,KAAJ,WAAA,EAAwC;MACtCA,KAAK,CAALA,IAAK,CAALA,GAAcsE,MAAM,CAApBtE,GAAAA;IACD;EAHHoE,CAAAA;EAKA,OAjDsD,KAiDtD;AACD;;AAED,SAAA,OAAA,CAAA,KAAA,EAAoC;EAElC,OAAOL,KAAK,IAALA,IAAAA,GAAAA,EAAAA,GAAqBlE,KAAK,CAALA,OAAAA,CAAAA,KAAAA,IAAAA,KAAAA,GAA+B,CAA3D,KAA2D,CAA3D;AACD;;AAED,eAAA,cAAA","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\n\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\n\n// TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\nexport type HammerInputExt = Omit<HammerInput, 'destroy' | 'handler' | 'init'>;\n\nexport type Config = Partial<{\n  enabled: boolean;\n  minPointers: number;\n  maxPointers: number;\n  minDist: number;\n  minDistSq: number;\n  minVelocity: number;\n  minVelocitySq: number;\n  maxDist: number;\n  maxDistSq: number;\n  failOffsetXStart: number;\n  failOffsetYStart: number;\n  failOffsetXEnd: number;\n  failOffsetYEnd: number;\n  activeOffsetXStart: number;\n  activeOffsetXEnd: number;\n  activeOffsetYStart: number;\n  activeOffsetYEnd: number;\n  waitFor: any[] | null;\n}>;\n\ntype NativeEvent = ReturnType<GestureHandler['transformEventData']>;\n\nlet gestureInstances = 0;\n\nabstract class GestureHandler {\n  public handlerTag: any;\n  public isGestureRunning = false;\n  public view: number | null = null;\n  protected hasCustomActivationCriteria: boolean;\n  protected hasGestureFailed = false;\n  protected hammer: HammerManager | null = null;\n  protected initialRotation: number | null = null;\n  protected __initialX: any;\n  protected __initialY: any;\n  protected config: Config = {};\n  protected previousState: State = State.UNDETERMINED;\n  private pendingGestures: Record<string, this> = {};\n  private oldState: State = State.UNDETERMINED;\n  private lastSentState: State | null = null;\n  private gestureInstance: number;\n  private _stillWaiting: any;\n  private propsRef: any;\n  private ref: any;\n\n  abstract get name(): string;\n\n  get id() {\n    return `${this.name}${this.gestureInstance}`;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(_gesture: this) {}\n\n  removePendingGesture(id: string) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture: this) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent(\n    _config: any,\n    _recognizer: any,\n    _event: any\n  ): { failed?: boolean; success?: boolean } {\n    return { success: true };\n  }\n\n  get NativeGestureClass(): RecognizerStatic {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(_config: Config) {\n    return true;\n  }\n\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n\n  updateGestureConfig({ enabled = true, ...props }) {\n    this.clearSelfAsPending();\n\n    this.config = ensureConfig({ enabled, ...props });\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(\n      this.config\n    );\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n\n  destroy = () => {\n    this.clearSelfAsPending();\n\n    if (this.hammer) {\n      this.hammer.stop(false);\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n\n  isPointInView = ({ x, y }: { x: number; y: number }) => {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n    const pointerInside =\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n\n  getState(type: keyof typeof EventMap): State {\n    // @ts-ignore TODO(TS) check if this is needed\n    if (type == 0) {\n      return 0;\n    }\n    return EventMap[type];\n  }\n\n  transformEventData(event: HammerInputExt) {\n    const { eventType, maxPointers: numberOfPointers } = event;\n    // const direction = DirectionMap[ev.direction];\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY,\n    });\n\n    // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n    const state = this.getState(eventType as 1 | 2 | 4 | 8);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        oldState: this.oldState,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  transformNativeEvent(_event: HammerInputExt) {\n    return {};\n  }\n\n  sendEvent = (nativeEvent: HammerInputExt) => {\n    const {\n      onGestureHandlerEvent,\n      onGestureHandlerStateChange,\n    } = this.propsRef.current;\n\n    const event = this.transformEventData(nativeEvent);\n\n    invokeNullableMethod(onGestureHandlerEvent, event);\n    if (this.lastSentState !== event.nativeEvent.state) {\n      this.lastSentState = event.nativeEvent.state as State;\n      invokeNullableMethod(onGestureHandlerStateChange, event);\n    }\n  };\n\n  cancelPendingGestures(event: HammerInputExt) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n  onGestureEnded(event: HammerInputExt) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event: HammerInputExt) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true,\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({ isFirst }: HammerInputExt) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  setView(ref: Parameters<typeof findNodeHandle>['0'], propsRef: any) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    this.view = findNodeHandle(ref);\n    this.hammer = new Hammer.Manager(this.view as any);\n\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    const { NativeGestureClass } = this;\n    // @ts-ignore TODO(TS)\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n\n    this.hammer.on('hammer.input', (ev: HammerInput) => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent((ev as unknown) as HammerInputExt);\n\n      // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    // TODO(TS) Hammer types aren't exactly that what we get in runtime\n    if (!this.isDiscrete) {\n      this.hammer!.on(`${this.name}start`, (event: HammerInput) =>\n        this.onStart((event as unknown) as HammerInputExt)\n      );\n      this.hammer!.on(\n        `${this.name}end ${this.name}cancel`,\n        (event: HammerInput) => {\n          this.onGestureEnded((event as unknown) as HammerInputExt);\n        }\n      );\n    }\n    this.hammer!.on(this.name, (ev: HammerInput) =>\n      this.onGestureActivated((ev as unknown) as HammerInputExt)\n    ); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n  }\n\n  onStart({ deltaX, deltaY, rotation }: HammerInputExt) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(\n        ({ hasGestureFailed }) => hasGestureFailed === false\n      );\n      return stillWaiting;\n    }\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers =\n      this.config.minPointers === this.config.maxPointers\n        ? this.config.minPointers\n        : 0;\n    return {\n      pointers,\n    };\n  }\n\n  sync = () => {\n    const gesture = this.hammer!.get(this.name);\n    if (!gesture) return;\n\n    const enable = (recognizer: any, inputData: any) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n\n      // Prevent events before the system is ready.\n      if (\n        !inputData ||\n        !recognizer.options ||\n        typeof inputData.maxPointers === 'undefined'\n      ) {\n        return this.shouldEnableGestureOnSetup;\n      }\n\n      if (this.hasGestureFailed) {\n        return false;\n      }\n\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n        // Only process if there are views to wait for.\n        this._stillWaiting = this._getPendingGestures();\n        // This gesture should continue waiting.\n        if (this._stillWaiting.length) {\n          // Check to see if one of the gestures you're waiting for has started.\n          // If it has then the gesture should fail.\n          for (const gesture of this._stillWaiting) {\n            // When the target gesture has started, this gesture must force fail.\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          // This gesture shouldn't start until the others have finished.\n          return false;\n        }\n      }\n\n      // Use default behaviour\n      if (!this.hasCustomActivationCriteria) {\n        return true;\n      }\n\n      const deltaRotation =\n        this.initialRotation == null\n          ? 0\n          : inputData.rotation - this.initialRotation;\n      // @ts-ignore FIXME(TS)\n      const { success, failed } = this.isGestureEnabledForEvent(\n        this.getConfig(),\n        recognizer,\n        {\n          ...inputData,\n          deltaRotation,\n        }\n      );\n\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n\n    const params = this.getHammerConfig();\n    // @ts-ignore FIXME(TS)\n    gesture.set({ ...params, enable });\n  };\n\n  simulateCancelEvent(_inputData: any) {}\n}\n\n// TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(\n  method:\n    | ((event: NativeEvent) => void)\n    | { __getHandler: () => (event: NativeEvent) => void }\n    | { __nodeConfig: { argMapping: any } },\n  event: NativeEvent\n) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if (\n        '__getHandler' in method &&\n        typeof method.__getHandler === 'function'\n      ) {\n        const handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const { argMapping } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const [index, [key, value]] of argMapping.entries()) {\n              if (key in event.nativeEvent) {\n                // @ts-ignore fix method type\n                const nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// Validate the props\nfunction ensureConfig(config: Config): Required<Config> {\n  const props = { ...config };\n\n  // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist! * props.minDist!;\n  }\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity! * props.minVelocity!;\n  }\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist! * config.maxDist!;\n  }\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor)\n      .map(({ handlerTag }: { handlerTag: number }) =>\n        NodeManager.getHandler(handlerTag)\n      )\n      .filter((v) => v);\n  } else {\n    props.waitFor = null;\n  }\n\n  const configProps = [\n    'minPointers',\n    'maxPointers',\n    'minDist',\n    'maxDist',\n    'maxDistSq',\n    'minVelocitySq',\n    'minDistSq',\n    'minVelocity',\n    'failOffsetXStart',\n    'failOffsetYStart',\n    'failOffsetXEnd',\n    'failOffsetYEnd',\n    'activeOffsetXStart',\n    'activeOffsetXEnd',\n    'activeOffsetYStart',\n    'activeOffsetYEnd',\n  ] as const;\n  configProps.forEach((prop: typeof configProps[number]) => {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props as Required<Config>; // TODO(TS) how to convince TS that props are filled?\n}\n\nfunction asArray<T>(value: T | T[]) {\n  // TODO(TS) use config.waitFor type\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n"]},"metadata":{},"sourceType":"module"}