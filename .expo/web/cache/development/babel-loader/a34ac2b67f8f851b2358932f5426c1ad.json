{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nvar focusVisibleAttributeName = 'data-focusvisible-polyfill';\nvar rule = \":focus:not([\" + focusVisibleAttributeName + \"]){outline: none;}\";\n\nvar modality = function modality(insertRule) {\n  insertRule(rule);\n\n  if (!canUseDOM) {\n    return;\n  }\n\n  var hadKeyboardEvent = true;\n  var hadFocusVisibleRecently = false;\n  var hadFocusVisibleRecentlyTimeout = null;\n  var inputTypesWhitelist = {\n    text: true,\n    search: true,\n    url: true,\n    tel: true,\n    email: true,\n    password: true,\n    number: true,\n    date: true,\n    month: true,\n    week: true,\n    time: true,\n    datetime: true,\n    'datetime-local': true\n  };\n\n  function isValidFocusTarget(el) {\n    if (el && el !== document && el.nodeName !== 'HTML' && el.nodeName !== 'BODY' && 'classList' in el && 'contains' in el.classList) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function focusTriggersKeyboardModality(el) {\n    var type = el.type;\n    var tagName = el.tagName;\n    var isReadOnly = el.readOnly;\n\n    if (tagName === 'INPUT' && inputTypesWhitelist[type] && !isReadOnly) {\n      return true;\n    }\n\n    if (tagName === 'TEXTAREA' && !isReadOnly) {\n      return true;\n    }\n\n    if (el.isContentEditable) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function addFocusVisibleAttribute(el) {\n    if (el.hasAttribute(focusVisibleAttributeName)) {\n      return;\n    }\n\n    el.setAttribute(focusVisibleAttributeName, true);\n  }\n\n  function removeFocusVisibleAttribute(el) {\n    el.removeAttribute(focusVisibleAttributeName);\n  }\n\n  function removeAllFocusVisibleAttributes() {\n    var list = document.querySelectorAll(\"[\" + focusVisibleAttributeName + \"]\");\n\n    for (var i = 0; i < list.length; i += 1) {\n      removeFocusVisibleAttribute(list[i]);\n    }\n  }\n\n  function onKeyDown(e) {\n    if (e.key !== 'Tab' && (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey)) {\n      return;\n    }\n\n    if (isValidFocusTarget(document.activeElement)) {\n      addFocusVisibleAttribute(document.activeElement);\n    }\n\n    hadKeyboardEvent = true;\n  }\n\n  function onPointerDown(e) {\n    if (hadKeyboardEvent === true) {\n      removeAllFocusVisibleAttributes();\n    }\n\n    hadKeyboardEvent = false;\n  }\n\n  function onFocus(e) {\n    if (!isValidFocusTarget(e.target)) {\n      return;\n    }\n\n    if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {\n      addFocusVisibleAttribute(e.target);\n    }\n  }\n\n  function onBlur(e) {\n    if (!isValidFocusTarget(e.target)) {\n      return;\n    }\n\n    if (e.target.hasAttribute(focusVisibleAttributeName)) {\n      hadFocusVisibleRecently = true;\n      window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n      hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {\n        hadFocusVisibleRecently = false;\n        window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n      }, 100);\n      removeFocusVisibleAttribute(e.target);\n    }\n  }\n\n  function onVisibilityChange(e) {\n    if (document.visibilityState === 'hidden') {\n      if (hadFocusVisibleRecently) {\n        hadKeyboardEvent = true;\n      }\n\n      addInitialPointerMoveListeners();\n    }\n  }\n\n  function addInitialPointerMoveListeners() {\n    document.addEventListener('mousemove', onInitialPointerMove);\n    document.addEventListener('mousedown', onInitialPointerMove);\n    document.addEventListener('mouseup', onInitialPointerMove);\n    document.addEventListener('pointermove', onInitialPointerMove);\n    document.addEventListener('pointerdown', onInitialPointerMove);\n    document.addEventListener('pointerup', onInitialPointerMove);\n    document.addEventListener('touchmove', onInitialPointerMove);\n    document.addEventListener('touchstart', onInitialPointerMove);\n    document.addEventListener('touchend', onInitialPointerMove);\n  }\n\n  function removeInitialPointerMoveListeners() {\n    document.removeEventListener('mousemove', onInitialPointerMove);\n    document.removeEventListener('mousedown', onInitialPointerMove);\n    document.removeEventListener('mouseup', onInitialPointerMove);\n    document.removeEventListener('pointermove', onInitialPointerMove);\n    document.removeEventListener('pointerdown', onInitialPointerMove);\n    document.removeEventListener('pointerup', onInitialPointerMove);\n    document.removeEventListener('touchmove', onInitialPointerMove);\n    document.removeEventListener('touchstart', onInitialPointerMove);\n    document.removeEventListener('touchend', onInitialPointerMove);\n  }\n\n  function onInitialPointerMove(e) {\n    if (e.target.nodeName === 'HTML') {\n      return;\n    }\n\n    hadKeyboardEvent = false;\n    removeInitialPointerMoveListeners();\n  }\n\n  document.addEventListener('keydown', onKeyDown, true);\n  document.addEventListener('mousedown', onPointerDown, true);\n  document.addEventListener('pointerdown', onPointerDown, true);\n  document.addEventListener('touchstart', onPointerDown, true);\n  document.addEventListener('focus', onFocus, true);\n  document.addEventListener('blur', onBlur, true);\n  document.addEventListener('visibilitychange', onVisibilityChange, true);\n  addInitialPointerMoveListeners();\n};\n\nexport default modality;","map":{"version":3,"names":["canUseDOM","focusVisibleAttributeName","rule","modality","insertRule","hadKeyboardEvent","hadFocusVisibleRecently","hadFocusVisibleRecentlyTimeout","inputTypesWhitelist","text","search","url","tel","email","password","number","date","month","week","time","datetime","isValidFocusTarget","el","document","nodeName","classList","focusTriggersKeyboardModality","type","tagName","isReadOnly","readOnly","isContentEditable","addFocusVisibleAttribute","hasAttribute","setAttribute","removeFocusVisibleAttribute","removeAttribute","removeAllFocusVisibleAttributes","list","querySelectorAll","i","length","onKeyDown","e","key","metaKey","altKey","ctrlKey","shiftKey","activeElement","onPointerDown","onFocus","target","onBlur","window","clearTimeout","setTimeout","onVisibilityChange","visibilityState","addInitialPointerMoveListeners","addEventListener","onInitialPointerMove","removeInitialPointerMoveListeners","removeEventListener"],"sources":["C:/React N/SmartMobile/node_modules/react-native-web/dist/exports/StyleSheet/modality.js"],"sourcesContent":["/**\n * Adapts focus styles based on the user's active input modality (i.e., how\n * they are interacting with the UI right now).\n *\n * Focus styles are only relevant when using the keyboard to interact with the\n * page. If we only show the focus ring when relevant, we can avoid user\n * confusion without compromising accessibility.\n *\n * The script uses two heuristics to determine whether the keyboard is being used:\n *\n * 1. a keydown event occurred immediately before a focus event;\n * 2. a focus event happened on an element which requires keyboard interaction (e.g., a text field);\n *\n * This software or document includes material copied from or derived from https://github.com/WICG/focus-visible.\n * Copyright © 2018 W3C® (MIT, ERCIM, Keio, Beihang).\n * W3C Software Notice and License: https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n * \n */\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nvar focusVisibleAttributeName = 'data-focusvisible-polyfill';\nvar rule = \":focus:not([\" + focusVisibleAttributeName + \"]){outline: none;}\";\n\nvar modality = function modality(insertRule) {\n  insertRule(rule);\n\n  if (!canUseDOM) {\n    return;\n  }\n\n  var hadKeyboardEvent = true;\n  var hadFocusVisibleRecently = false;\n  var hadFocusVisibleRecentlyTimeout = null;\n  var inputTypesWhitelist = {\n    text: true,\n    search: true,\n    url: true,\n    tel: true,\n    email: true,\n    password: true,\n    number: true,\n    date: true,\n    month: true,\n    week: true,\n    time: true,\n    datetime: true,\n    'datetime-local': true\n  };\n  /**\n   * Helper function for legacy browsers and iframes which sometimes focus\n   * elements like document, body, and non-interactive SVG.\n   */\n\n  function isValidFocusTarget(el) {\n    if (el && el !== document && el.nodeName !== 'HTML' && el.nodeName !== 'BODY' && 'classList' in el && 'contains' in el.classList) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Computes whether the given element should automatically trigger the\n   * `focus-visible` attribute being added, i.e. whether it should always match\n   * `:focus-visible` when focused.\n   */\n\n\n  function focusTriggersKeyboardModality(el) {\n    var type = el.type;\n    var tagName = el.tagName;\n    var isReadOnly = el.readOnly;\n\n    if (tagName === 'INPUT' && inputTypesWhitelist[type] && !isReadOnly) {\n      return true;\n    }\n\n    if (tagName === 'TEXTAREA' && !isReadOnly) {\n      return true;\n    }\n\n    if (el.isContentEditable) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Add the `focus-visible` attribute to the given element if it was not added by\n   * the author.\n   */\n\n\n  function addFocusVisibleAttribute(el) {\n    if (el.hasAttribute(focusVisibleAttributeName)) {\n      return;\n    }\n\n    el.setAttribute(focusVisibleAttributeName, true);\n  }\n  /**\n   * Remove the `focus-visible` attribute from the given element if it was not\n   * originally added by the author.\n   */\n\n\n  function removeFocusVisibleAttribute(el) {\n    el.removeAttribute(focusVisibleAttributeName);\n  }\n  /**\n   * Remove the `focus-visible` attribute from all elements in the document.\n   */\n\n\n  function removeAllFocusVisibleAttributes() {\n    var list = document.querySelectorAll(\"[\" + focusVisibleAttributeName + \"]\");\n\n    for (var i = 0; i < list.length; i += 1) {\n      removeFocusVisibleAttribute(list[i]);\n    }\n  }\n  /**\n   * Treat `keydown` as a signal that the user is in keyboard modality.\n   * Apply `focus-visible` to any current active element and keep track\n   * of our keyboard modality state with `hadKeyboardEvent`.\n   */\n\n\n  function onKeyDown(e) {\n    if (e.key !== 'Tab' && (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey)) {\n      return;\n    }\n\n    if (isValidFocusTarget(document.activeElement)) {\n      addFocusVisibleAttribute(document.activeElement);\n    }\n\n    hadKeyboardEvent = true;\n  }\n  /**\n   * If at any point a user clicks with a pointing device, ensure that we change\n   * the modality away from keyboard.\n   * This avoids the situation where a user presses a key on an already focused\n   * element, and then clicks on a different element, focusing it with a\n   * pointing device, while we still think we're in keyboard modality.\n   * It also avoids the situation where a user presses on an element within a\n   * previously keyboard-focused element (i.e., `e.target` is not the previously\n   * focused element, but one of its descendants) and we need to remove the\n   * focus ring because a `blur` event doesn't occur.\n   */\n\n\n  function onPointerDown(e) {\n    if (hadKeyboardEvent === true) {\n      removeAllFocusVisibleAttributes();\n    }\n\n    hadKeyboardEvent = false;\n  }\n  /**\n   * On `focus`, add the `focus-visible` attribute to the target if:\n   * - the target received focus as a result of keyboard navigation, or\n   * - the event target is an element that will likely require interaction\n   *   via the keyboard (e.g. a text box)\n   */\n\n\n  function onFocus(e) {\n    // Prevent IE from focusing the document or HTML element.\n    if (!isValidFocusTarget(e.target)) {\n      return;\n    }\n\n    if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {\n      addFocusVisibleAttribute(e.target);\n    }\n  }\n  /**\n   * On `blur`, remove the `focus-visible` attribute from the target.\n   */\n\n\n  function onBlur(e) {\n    if (!isValidFocusTarget(e.target)) {\n      return;\n    }\n\n    if (e.target.hasAttribute(focusVisibleAttributeName)) {\n      // To detect a tab/window switch, we look for a blur event followed\n      // rapidly by a visibility change.\n      // If we don't see a visibility change within 100ms, it's probably a\n      // regular focus change.\n      hadFocusVisibleRecently = true;\n      window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n      hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {\n        hadFocusVisibleRecently = false;\n        window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n      }, 100);\n      removeFocusVisibleAttribute(e.target);\n    }\n  }\n  /**\n   * If the user changes tabs, keep track of whether or not the previously\n   * focused element had the focus-visible attribute.\n   */\n\n\n  function onVisibilityChange(e) {\n    if (document.visibilityState === 'hidden') {\n      // If the tab becomes active again, the browser will handle calling focus\n      // on the element (Safari actually calls it twice).\n      // If this tab change caused a blur on an element with focus-visible,\n      // re-apply the attribute when the user switches back to the tab.\n      if (hadFocusVisibleRecently) {\n        hadKeyboardEvent = true;\n      }\n\n      addInitialPointerMoveListeners();\n    }\n  }\n  /**\n   * Add a group of listeners to detect usage of any pointing devices.\n   * These listeners will be added when the polyfill first loads, and anytime\n   * the window is blurred, so that they are active when the window regains\n   * focus.\n   */\n\n\n  function addInitialPointerMoveListeners() {\n    document.addEventListener('mousemove', onInitialPointerMove);\n    document.addEventListener('mousedown', onInitialPointerMove);\n    document.addEventListener('mouseup', onInitialPointerMove);\n    document.addEventListener('pointermove', onInitialPointerMove);\n    document.addEventListener('pointerdown', onInitialPointerMove);\n    document.addEventListener('pointerup', onInitialPointerMove);\n    document.addEventListener('touchmove', onInitialPointerMove);\n    document.addEventListener('touchstart', onInitialPointerMove);\n    document.addEventListener('touchend', onInitialPointerMove);\n  }\n\n  function removeInitialPointerMoveListeners() {\n    document.removeEventListener('mousemove', onInitialPointerMove);\n    document.removeEventListener('mousedown', onInitialPointerMove);\n    document.removeEventListener('mouseup', onInitialPointerMove);\n    document.removeEventListener('pointermove', onInitialPointerMove);\n    document.removeEventListener('pointerdown', onInitialPointerMove);\n    document.removeEventListener('pointerup', onInitialPointerMove);\n    document.removeEventListener('touchmove', onInitialPointerMove);\n    document.removeEventListener('touchstart', onInitialPointerMove);\n    document.removeEventListener('touchend', onInitialPointerMove);\n  }\n  /**\n   * When the polfyill first loads, assume the user is in keyboard modality.\n   * If any event is received from a pointing device (e.g. mouse, pointer,\n   * touch), turn off keyboard modality.\n   * This accounts for situations where focus enters the page from the URL bar.\n   */\n\n\n  function onInitialPointerMove(e) {\n    // Work around a Safari quirk that fires a mousemove on <html> whenever the\n    // window blurs, even if you're tabbing out of the page. ¯\\_(ツ)_/¯\n    if (e.target.nodeName === 'HTML') {\n      return;\n    }\n\n    hadKeyboardEvent = false;\n    removeInitialPointerMoveListeners();\n  }\n\n  document.addEventListener('keydown', onKeyDown, true);\n  document.addEventListener('mousedown', onPointerDown, true);\n  document.addEventListener('pointerdown', onPointerDown, true);\n  document.addEventListener('touchstart', onPointerDown, true);\n  document.addEventListener('focus', onFocus, true);\n  document.addEventListener('blur', onBlur, true);\n  document.addEventListener('visibilitychange', onVisibilityChange, true);\n  addInitialPointerMoveListeners();\n};\n\nexport default modality;"],"mappings":"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"},"metadata":{},"sourceType":"module"}