{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"status\", \"theme\", \"disabled\", \"onPress\", \"testID\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\nvar ANIMATION_DURATION = 100;\n\nvar CheckboxAndroid = function CheckboxAndroid(_ref) {\n  var status = _ref.status,\n      theme = _ref.theme,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      testID = _ref.testID,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new Animated.Value(1)),\n      scaleAnim = _React$useRef.current;\n\n  var isFirstRendering = React.useRef(true);\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    var checked = status === 'checked';\n    Animated.sequence([Animated.timing(scaleAnim, {\n      toValue: 0.85,\n      duration: checked ? ANIMATION_DURATION * scale : 0,\n      useNativeDriver: false\n    }), Animated.timing(scaleAnim, {\n      toValue: 1,\n      duration: checked ? ANIMATION_DURATION * scale : ANIMATION_DURATION * scale * 1.75,\n      useNativeDriver: false\n    })]).start();\n  }, [status, scaleAnim, scale]);\n  var checked = status === 'checked';\n  var indeterminate = status === 'indeterminate';\n  var checkedColor = rest.color || theme.colors.accent;\n  var uncheckedColor = rest.uncheckedColor || color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  var rippleColor, checkboxColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n    checkboxColor = theme.colors.disabled;\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n    checkboxColor = checked ? checkedColor : uncheckedColor;\n  }\n\n  var borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0]\n  });\n  var icon = indeterminate ? 'minus-box' : checked ? 'checkbox-marked' : 'checkbox-blank-outline';\n  return React.createElement(TouchableRipple, _extends({}, rest, {\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onPress,\n    disabled: disabled,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      disabled: disabled,\n      checked: checked\n    },\n    accessibilityLiveRegion: \"polite\",\n    style: styles.container,\n    testID: testID\n  }), React.createElement(Animated.View, {\n    style: {\n      transform: [{\n        scale: scaleAnim\n      }]\n    }\n  }, React.createElement(MaterialCommunityIcon, {\n    allowFontScaling: false,\n    name: icon,\n    size: 24,\n    color: checkboxColor,\n    direction: \"ltr\"\n  }), React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.fillContainer]\n  }, React.createElement(Animated.View, {\n    style: [styles.fill, {\n      borderColor: checkboxColor\n    }, {\n      borderWidth: borderWidth\n    }]\n  }))));\n};\n\nCheckboxAndroid.displayName = 'Checkbox.Android';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  fill: {\n    height: 14,\n    width: 14\n  }\n});\nexport default withTheme(CheckboxAndroid);\nvar CheckboxAndroidWithTheme = withTheme(CheckboxAndroid);\nexport { CheckboxAndroidWithTheme as CheckboxAndroid };","map":{"version":3,"sources":["CheckboxAndroid.tsx"],"names":["ANIMATION_DURATION","CheckboxAndroid","rest","current","scaleAnim","React","Animated","isFirstRendering","animation","scale","checked","status","toValue","duration","useNativeDriver","indeterminate","checkedColor","theme","uncheckedColor","color","rippleColor","checkboxColor","borderWidth","inputRange","outputRange","icon","disabled","styles","testID","transform","StyleSheet","borderColor","container","borderRadius","width","height","padding","fillContainer","alignItems","justifyContent","fill","withTheme","CheckboxAndroidWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxAndroid = ({\n  status,\n  theme,\n  disabled,\n  onPress,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: scaleAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    const checked = status === 'checked';\n\n    Animated.sequence([\n      Animated.timing(scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * scale : 0,\n        useNativeDriver: false,\n      }),\n      Animated.timing(scaleAnim, {\n        toValue: 1,\n        duration: checked\n          ? ANIMATION_DURATION * scale\n          : ANIMATION_DURATION * scale * 1.75,\n        useNativeDriver: false,\n      }),\n    ]).start();\n  }, [status, scaleAnim, scale]);\n\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor =\n    rest.uncheckedColor ||\n    color(theme.colors.text)\n      .alpha(theme.dark ? 0.7 : 0.54)\n      .rgb()\n      .string();\n\n  let rippleColor, checkboxColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n    checkboxColor = theme.colors.disabled;\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n    checkboxColor = checked ? checkedColor : uncheckedColor;\n  }\n\n  const borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0],\n  });\n\n  const icon = indeterminate\n    ? 'minus-box'\n    : checked\n    ? 'checkbox-marked'\n    : 'checkbox-blank-outline';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkboxColor}\n          direction=\"ltr\"\n        />\n        <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n          <Animated.View\n            style={[\n              styles.fill,\n              { borderColor: checkboxColor },\n              { borderWidth },\n            ]}\n          />\n        </View>\n      </Animated.View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxAndroid.displayName = 'Checkbox.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n\n// @component-docs ignore-next-line\nconst CheckboxAndroidWithTheme = withTheme(CheckboxAndroid);\n// @component-docs ignore-next-line\nexport { CheckboxAndroidWithTheme as CheckboxAndroid };\n"]},"metadata":{},"sourceType":"module"}