{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"visible\", \"icon\", \"children\", \"actions\", \"contentStyle\", \"style\", \"theme\", \"onShowAnimationFinished\", \"onHideAnimationFinished\"],\n    _excluded2 = [\"label\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Surface from \"./Surface\";\nimport Text from \"./Typography/Text\";\nimport Button from \"./Button\";\nimport Icon from \"./Icon\";\nimport { withTheme } from \"../core/theming\";\nimport shadow from \"../styles/shadow\";\nvar ELEVATION = 1;\nvar DEFAULT_MAX_WIDTH = 960;\n\nvar Banner = function Banner(_ref) {\n  var visible = _ref.visible,\n      icon = _ref.icon,\n      children = _ref.children,\n      actions = _ref.actions,\n      contentStyle = _ref.contentStyle,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$onShowAnimationF = _ref.onShowAnimationFinished,\n      onShowAnimationFinished = _ref$onShowAnimationF === void 0 ? function () {} : _ref$onShowAnimationF,\n      _ref$onHideAnimationF = _ref.onHideAnimationFinished,\n      onHideAnimationFinished = _ref$onHideAnimationF === void 0 ? function () {} : _ref$onHideAnimationF,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new Animated.Value(visible ? 1 : 0)),\n      position = _React$useRef.current;\n\n  var _React$useState = React.useState({\n    height: 0,\n    measured: false\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      layout = _React$useState2[0],\n      setLayout = _React$useState2[1];\n\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (visible) {\n      Animated.timing(position, {\n        duration: 250 * scale,\n        toValue: 1,\n        useNativeDriver: false\n      }).start(onShowAnimationFinished);\n    } else {\n      Animated.timing(position, {\n        duration: 200 * scale,\n        toValue: 0,\n        useNativeDriver: false\n      }).start(onHideAnimationFinished);\n    }\n  }, [visible, position, scale]);\n\n  var handleLayout = function handleLayout(_ref2) {\n    var nativeEvent = _ref2.nativeEvent;\n    var height = nativeEvent.layout.height;\n    setLayout({\n      height: height,\n      measured: true\n    });\n  };\n\n  var height = Animated.multiply(position, layout.height);\n  var translateY = Animated.multiply(Animated.add(position, -1), layout.height);\n  return React.createElement(Surface, _extends({}, rest, {\n    style: [styles.container, shadow(ELEVATION), style],\n    theme: theme\n  }), React.createElement(View, {\n    style: [styles.wrapper, contentStyle]\n  }, React.createElement(Animated.View, {\n    style: {\n      height: height\n    }\n  }), React.createElement(Animated.View, {\n    onLayout: handleLayout,\n    style: [layout.measured || !visible ? [styles.absolute, {\n      transform: [{\n        translateY: translateY\n      }]\n    }] : null, !layout.measured && !visible ? {\n      opacity: 0\n    } : null]\n  }, React.createElement(View, {\n    style: styles.content\n  }, icon ? React.createElement(View, {\n    style: styles.icon\n  }, React.createElement(Icon, {\n    source: icon,\n    size: 40\n  })) : null, React.createElement(Text, {\n    style: [styles.message, {\n      color: theme.colors.text\n    }],\n    accessibilityLiveRegion: visible ? 'polite' : 'none',\n    accessibilityRole: \"alert\"\n  }, children)), React.createElement(View, {\n    style: styles.actions\n  }, actions.map(function (_ref3, i) {\n    var label = _ref3.label,\n        others = _objectWithoutProperties(_ref3, _excluded2);\n\n    return React.createElement(Button, _extends({\n      key: i,\n      compact: true,\n      mode: \"text\",\n      style: styles.button,\n      color: theme.colors.primary\n    }, others), label);\n  })))));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    elevation: ELEVATION\n  },\n  wrapper: {\n    overflow: 'hidden',\n    alignSelf: 'center',\n    width: '100%',\n    maxWidth: DEFAULT_MAX_WIDTH\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    width: '100%'\n  },\n  content: {\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    marginHorizontal: 8,\n    marginTop: 16,\n    marginBottom: 0\n  },\n  icon: {\n    margin: 8\n  },\n  message: {\n    flex: 1,\n    margin: 8\n  },\n  actions: {\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    margin: 4\n  },\n  button: {\n    margin: 4\n  }\n});\nexport default withTheme(Banner);","map":{"version":3,"sources":["Banner.tsx"],"names":["ELEVATION","DEFAULT_MAX_WIDTH","Banner","onShowAnimationFinished","onHideAnimationFinished","rest","current","position","React","Animated","visible","height","measured","scale","theme","duration","toValue","useNativeDriver","handleLayout","nativeEvent","setLayout","layout","translateY","styles","shadow","transform","opacity","content","icon","color","text","actions","others","primary","container","elevation","wrapper","overflow","alignSelf","width","maxWidth","absolute","top","flexDirection","justifyContent","marginHorizontal","marginTop","marginBottom","margin","message","flex","button","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp, Animated } from 'react-native';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport Button from './Button';\nimport Icon, { IconSource } from './Icon';\nimport { withTheme } from '../core/theming';\nimport type { $RemoveChildren } from '../types';\nimport shadow from '../styles/shadow';\n\nconst ELEVATION = 1;\nconst DEFAULT_MAX_WIDTH = 960;\n\ntype Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Whether banner is currently visible.\n   */\n  visible: boolean;\n  /**\n   * Content that will be displayed inside banner.\n   */\n  children: string;\n  /**\n   * Icon to display for the `Banner`. Can be an image.\n   */\n  icon?: IconSource;\n  /**\n   * Action items to shown in the banner.\n   * An action item should contain the following properties:\n   *\n   * - `label`: label of the action button (required)\n   * - `onPress`: callback that is called when button is pressed (required)\n   *\n   * To customize button you can pass other props that button component takes.\n   */\n  actions: Array<\n    {\n      label: string;\n    } & Omit<React.ComponentProps<typeof Button>, 'children'>\n  >;\n  /**\n   * Style of banner's inner content.\n   * Use this prop to apply custom width for wide layouts.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<View>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * @optional\n   * Optional callback that will be called after the opening animation finished running normally\n   */\n  onShowAnimationFinished?: Animated.EndCallback;\n  /**\n   * @optional\n   * Optional callback that will be called after the closing animation finished running normally\n   */\n  onHideAnimationFinished?: Animated.EndCallback;\n};\n\ntype NativeEvent = {\n  nativeEvent: {\n    layout: {\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n    };\n  };\n};\n\n/**\n * Banner displays a prominent message and related actions.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/banner.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Image } from 'react-native';\n * import { Banner } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(true);\n *\n *   return (\n *     <Banner\n *       visible={visible}\n *       actions={[\n *         {\n *           label: 'Fix it',\n *           onPress: () => setVisible(false),\n *         },\n *         {\n *           label: 'Learn more',\n *           onPress: () => setVisible(false),\n *         },\n *       ]}\n *       icon={({size}) => (\n *         <Image\n *           source={{\n *             uri: 'https://avatars3.githubusercontent.com/u/17571969?s=400&v=4',\n *           }}\n *           style={{\n *             width: size,\n *             height: size,\n *           }}\n *         />\n *       )}>\n *       There was a problem processing a transaction on your credit card.\n *     </Banner>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Banner = ({\n  visible,\n  icon,\n  children,\n  actions,\n  contentStyle,\n  style,\n  theme,\n  onShowAnimationFinished = () => {},\n  onHideAnimationFinished = () => {},\n  ...rest\n}: Props) => {\n  const { current: position } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const [layout, setLayout] = React.useState<{\n    height: number;\n    measured: boolean;\n  }>({\n    height: 0,\n    measured: false,\n  });\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      // show\n      Animated.timing(position, {\n        duration: 250 * scale,\n        toValue: 1,\n        useNativeDriver: false,\n      }).start(onShowAnimationFinished);\n    } else {\n      // hide\n      Animated.timing(position, {\n        duration: 200 * scale,\n        toValue: 0,\n        useNativeDriver: false,\n      }).start(onHideAnimationFinished);\n    }\n  }, [visible, position, scale]);\n\n  const handleLayout = ({ nativeEvent }: NativeEvent) => {\n    const { height } = nativeEvent.layout;\n    setLayout({ height, measured: true });\n  };\n\n  // The banner animation has 2 parts:\n  // 1. Blank spacer element which animates its height to move the content\n  // 2. Actual banner which animates its translateY\n  // In initial render, we position everything normally and measure the height of the banner\n  // Once we have the height, we apply the height to the spacer and switch the banner to position: absolute\n  // We need this because we need to move the content below as if banner's height was being animated\n  // However we can't animated banner's height directly as it'll also resize the content inside\n  const height = Animated.multiply(position, layout.height);\n\n  const translateY = Animated.multiply(\n    Animated.add(position, -1),\n    layout.height\n  );\n  return (\n    <Surface\n      {...rest}\n      style={[styles.container, shadow(ELEVATION) as ViewStyle, style]}\n      theme={theme}\n    >\n      <View style={[styles.wrapper, contentStyle]}>\n        <Animated.View style={{ height }} />\n        <Animated.View\n          onLayout={handleLayout}\n          style={[\n            layout.measured || !visible\n              ? // If we have measured banner's height or it's invisible,\n                // Position it absolutely, the layout will be taken care of the spacer\n                [styles.absolute, { transform: [{ translateY }] }]\n              : // Otherwise position it normally\n                null,\n            !layout.measured && !visible\n              ? // If we haven't measured banner's height yet and it's invisible,\n                // hide it with opacity: 0 so user doesn't see it\n                { opacity: 0 }\n              : null,\n          ]}\n        >\n          <View style={styles.content}>\n            {icon ? (\n              <View style={styles.icon}>\n                <Icon source={icon} size={40} />\n              </View>\n            ) : null}\n            <Text\n              style={[styles.message, { color: theme.colors.text }]}\n              accessibilityLiveRegion={visible ? 'polite' : 'none'}\n              accessibilityRole=\"alert\"\n            >\n              {children}\n            </Text>\n          </View>\n          <View style={styles.actions}>\n            {actions.map(({ label, ...others }, i) => (\n              <Button\n                key={/* eslint-disable-line react/no-array-index-key */ i}\n                compact\n                mode=\"text\"\n                style={styles.button}\n                color={theme.colors.primary}\n                {...others}\n              >\n                {label}\n              </Button>\n            ))}\n          </View>\n        </Animated.View>\n      </View>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    elevation: ELEVATION,\n  },\n  wrapper: {\n    overflow: 'hidden',\n    alignSelf: 'center',\n    width: '100%',\n    maxWidth: DEFAULT_MAX_WIDTH,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    width: '100%',\n  },\n  content: {\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    marginHorizontal: 8,\n    marginTop: 16,\n    marginBottom: 0,\n  },\n  icon: {\n    margin: 8,\n  },\n  message: {\n    flex: 1,\n    margin: 8,\n  },\n  actions: {\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    margin: 4,\n  },\n  button: {\n    margin: 4,\n  },\n});\n\nexport default withTheme(Banner);\n"]},"metadata":{},"sourceType":"module"}