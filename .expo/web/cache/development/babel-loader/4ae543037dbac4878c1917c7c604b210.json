{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"shouldCancelWhenOutside\", \"maxDeltaX\", \"maxDeltaY\", \"numberOfTaps\", \"minDurationMs\", \"maxDelayMs\", \"maxDurationMs\", \"maxDist\", \"minPointers\", \"maxPointers\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport Hammer from '@egjs/hammerjs';\nimport DiscreteGestureHandler from \"./DiscreteGestureHandler\";\nimport { isnan } from \"./utils\";\n\nvar TapGestureHandler = function (_DiscreteGestureHandl) {\n  _inherits(TapGestureHandler, _DiscreteGestureHandl);\n\n  var _super = _createSuper(TapGestureHandler);\n\n  function TapGestureHandler() {\n    var _this;\n\n    _classCallCheck(this, TapGestureHandler);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"_shouldFireEndEvent\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_timer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_multiTapTimer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onSuccessfulTap\", function (ev) {\n      if (_this._getPendingGestures().length) {\n        _this._shouldFireEndEvent = ev;\n        return;\n      }\n\n      if (ev.eventType === Hammer.INPUT_END) {\n        _this.sendEvent(_objectSpread(_objectSpread({}, ev), {}, {\n          eventType: Hammer.INPUT_MOVE\n        }));\n      }\n\n      _this.sendEvent(_objectSpread(_objectSpread({}, ev), {}, {\n        isFinal: true\n      }));\n\n      _this.onGestureEnded(ev);\n    });\n\n    return _this;\n  }\n\n  _createClass(TapGestureHandler, [{\n    key: \"name\",\n    get: function get() {\n      return 'tap';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return Hammer.Tap;\n    }\n  }, {\n    key: \"maxDelayMs\",\n    get: function get() {\n      return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(inputData) {\n      if (this.isGestureRunning) {\n        this.cancelEvent(inputData);\n      }\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      if (this.isGestureRunning) {\n        this.onSuccessfulTap(ev);\n      }\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(TapGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (!this.hasGestureFailed && !this.isGestureRunning && !ev.isFinal) {\n        var gesture = this.hammer.get(this.name);\n\n        if (gesture.options.enable(gesture, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n\n      if (ev.isFinal && ev.maxPointers > 1) {\n        setTimeout(function () {\n          if (_this2.isGestureRunning) {\n            _this2.cancelEvent(ev);\n          }\n        });\n      }\n\n      if (this.hasGestureFailed) {\n        return;\n      }\n\n      if (ev.isFinal) {\n        if (ev.maxPointers > 1) {\n          setTimeout(function () {\n            if (_this2.isGestureRunning) {\n              _this2.cancelEvent(ev);\n            }\n          });\n        }\n\n        clearTimeout(this._timer);\n        this._timer = setTimeout(function () {\n          _this2.hasGestureFailed = true;\n\n          _this2.cancelEvent(ev);\n        }, this.maxDelayMs);\n      } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n        var _gesture2 = this.hammer.get(this.name);\n\n        if (_gesture2.options.enable(_gesture2, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(TapGestureHandler.prototype), \"getHammerConfig\", this).call(this)), {}, {\n        event: this.name,\n        taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n        interval: this.maxDelayMs,\n        time: isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null ? 250 : this.config.maxDurationMs\n      });\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$shouldCancelWhen = _ref.shouldCancelWhenOutside,\n          shouldCancelWhenOutside = _ref$shouldCancelWhen === void 0 ? true : _ref$shouldCancelWhen,\n          _ref$maxDeltaX = _ref.maxDeltaX,\n          maxDeltaX = _ref$maxDeltaX === void 0 ? Number.NaN : _ref$maxDeltaX,\n          _ref$maxDeltaY = _ref.maxDeltaY,\n          maxDeltaY = _ref$maxDeltaY === void 0 ? Number.NaN : _ref$maxDeltaY,\n          _ref$numberOfTaps = _ref.numberOfTaps,\n          numberOfTaps = _ref$numberOfTaps === void 0 ? 1 : _ref$numberOfTaps,\n          _ref$minDurationMs = _ref.minDurationMs,\n          minDurationMs = _ref$minDurationMs === void 0 ? 525 : _ref$minDurationMs,\n          _ref$maxDelayMs = _ref.maxDelayMs,\n          maxDelayMs = _ref$maxDelayMs === void 0 ? Number.NaN : _ref$maxDelayMs,\n          _ref$maxDurationMs = _ref.maxDurationMs,\n          maxDurationMs = _ref$maxDurationMs === void 0 ? Number.NaN : _ref$maxDurationMs,\n          _ref$maxDist = _ref.maxDist,\n          maxDist = _ref$maxDist === void 0 ? 2 : _ref$maxDist,\n          _ref$minPointers = _ref.minPointers,\n          minPointers = _ref$minPointers === void 0 ? 1 : _ref$minPointers,\n          _ref$maxPointers = _ref.maxPointers,\n          maxPointers = _ref$maxPointers === void 0 ? 1 : _ref$maxPointers,\n          props = _objectWithoutProperties(_ref, _excluded);\n\n      return _get(_getPrototypeOf(TapGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        shouldCancelWhenOutside: shouldCancelWhenOutside,\n        numberOfTaps: numberOfTaps,\n        maxDeltaX: maxDeltaX,\n        maxDeltaY: maxDeltaY,\n        minDurationMs: minDurationMs,\n        maxDelayMs: maxDelayMs,\n        maxDist: maxDist,\n        minPointers: minPointers,\n        maxPointers: maxPointers\n      }, props));\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded() {\n      var _get2;\n\n      clearTimeout(this._timer);\n\n      for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        props[_key2] = arguments[_key2];\n      }\n\n      (_get2 = _get(_getPrototypeOf(TapGestureHandler.prototype), \"onGestureEnded\", this)).call.apply(_get2, [this].concat(props));\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(_gesture) {\n      if (this._shouldFireEndEvent) {\n        this.onSuccessfulTap(this._shouldFireEndEvent);\n        this._shouldFireEndEvent = null;\n      }\n    }\n  }]);\n\n  return TapGestureHandler;\n}(DiscreteGestureHandler);\n\nexport default TapGestureHandler;","map":{"version":3,"sources":["TapGestureHandler.ts"],"names":["name","NativeGestureClass","Hammer","maxDelayMs","isnan","simulateCancelEvent","onGestureActivated","ev","eventType","INPUT_MOVE","isFinal","onRawEvent","gesture","clearTimeout","setTimeout","getHammerConfig","event","taps","interval","time","maxDurationMs","updateGestureConfig","shouldCancelWhenOutside","maxDeltaX","Number","maxDeltaY","numberOfTaps","minDurationMs","maxDist","minPointers","maxPointers","props","onGestureEnded","onWaitingEnded"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,MAAA,MAAA,gBAAA;AAEA,OAAA,sBAAA;AAEA,SAAA,KAAA;;IAEA,iB;;;;;EAAuD,6BAAA;IAAA;;IAAA;;IAAA,kCAAA,IAAA;MAAA,IAAA;IAAA;;IAAA,gDAAA,IAAA;;IAAA,eAAA,gCAAA,qBAAA,EAAA,IAAA,CAAA;;IAAA,eAAA,gCAAA,QAAA,EAAA,KAAA,CAAA,CAAA;;IAAA,eAAA,gCAAA,gBAAA,EAAA,KAAA,CAAA,CAAA;;IAAA,eAAA,gCAAA,iBAAA,EA6BlCO,UAAAA,EAAD,EAAwB;MACxC,IAAI,MAAA,mBAAA,GAAJ,MAAA,EAAuC;QACrC,MAAA,mBAAA,GAAA,EAAA;QACA;MACD;;MACD,IAAIA,EAAE,CAAFA,SAAAA,KAAiBL,MAAM,CAA3B,SAAA,EAAuC;QACrC,MAAA,SAAA,iCAAe,EAAf;UAAwBM,SAAS,EAAEN,MAAM,CAACO;QAA1C;MANsC;;MASxC,MAAA,SAAA,iCAAe,EAAf;QAAwBC,OAAO,EAAE;MAAjC;;MACA,MAAA,cAAA,CAAA,EAAA;IAvCmD,CAAA,CAAA;;IAAA;EAAA;;;;SAIjDV,eAAO;MACT,OAAA,KAAA;IACD;;;SAEGC,eAAqB;MACvB,OAAOC,MAAM,CAAb,GAAA;IACD;;;SAEGC,eAAa;MAEf,OAAOC,KAAK,CAAC,KAAA,MAAA,CAANA,UAAK,CAALA,GAAAA,GAAAA,GAAsC,KAAA,MAAA,CAA7C,UAAA;IACD;;;WAEDC,6BAAmB,SAAnBA,EAA+C;MAC7C,IAAI,KAAJ,gBAAA,EAA2B;QACzB,KAAA,WAAA,CAAA,SAAA;MACD;IACF;;;WAEDC,4BAAkB,EAAlBA,EAAuC;MACrC,IAAI,KAAJ,gBAAA,EAA2B;QACzB,KAAA,eAAA,CAAA,EAAA;MACD;IACF;;;WAeDK,oBAAU,EAAVA,EAA4B;MAAA;;MAC1B,kFAD0B,EAC1B;;MAGA,IACE,CAAC,KAAD,gBAAA,IACA,CAAC,KADD,gBAAA,IAGA,CAACJ,EAAE,CAJL,OAAA,EAKE;QAEA,IAAMK,OAAO,GAAG,KAAA,MAAA,CAAA,GAAA,CAAiB,KAFjC,IAEgB,CAAhB;;QAEA,IAAIA,OAAO,CAAPA,OAAAA,CAAAA,MAAAA,CAAAA,OAAAA,EAAJ,EAAIA,CAAJ,EAAyC;UACvCC,YAAY,CAAC,KAAbA,cAAY,CAAZA;UAEA,KAAA,OAAA,CAAA,EAAA;UACA,KAAA,SAAA,CAAA,EAAA;QACD;MACF;;MACD,IAAIN,EAAE,CAAFA,OAAAA,IAAcA,EAAE,CAAFA,WAAAA,GAAlB,CAAA,EAAsC;QACpCO,UAAU,CAAC,YAAM;UAGf,IAAI,MAAA,CAAJ,gBAAA,EAA2B;YACzB,MAAA,CAAA,WAAA,CAAA,EAAA;UACD;QALHA,CAAU,CAAVA;MAOD;;MAED,IAAI,KAAJ,gBAAA,EAA2B;QACzB;MA/BwB;;MAmC1B,IAAIP,EAAE,CAAN,OAAA,EAAgB;QAGd,IAAIA,EAAE,CAAFA,WAAAA,GAAJ,CAAA,EAAwB;UACtBO,UAAU,CAAC,YAAM;YACf,IAAI,MAAA,CAAJ,gBAAA,EAA2B;cACzB,MAAA,CAAA,WAAA,CAAA,EAAA;YACD;UAHHA,CAAU,CAAVA;QAJY;;QAYdD,YAAY,CAAC,KAZC,MAYF,CAAZA;QAEA,KAAA,MAAA,GAAcC,UAAU,CAAC,YAAM;UAC7B,MAAA,CAAA,gBAAA,GAAA,IAAA;;UACA,MAAA,CAAA,WAAA,CAAA,EAAA;QAFsB,CAAA,EAGrB,KAHH,UAAwB,CAAxB;MAdF,CAAA,MAkBO,IAAI,CAAC,KAAD,gBAAA,IAA0B,CAAC,KAA/B,gBAAA,EAAsD;QAE3D,IAAMF,SAAO,GAAG,KAAA,MAAA,CAAA,GAAA,CAAiB,KAF0B,IAE3C,CAAhB;;QAEA,IAAIA,SAAO,CAAPA,OAAAA,CAAAA,MAAAA,CAAAA,SAAAA,EAAJ,EAAIA,CAAJ,EAAyC;UACvCC,YAAY,CAAC,KAAbA,cAAY,CAAZA;UAEA,KAAA,OAAA,CAAA,EAAA;UACA,KAAA,SAAA,CAAA,EAAA;QACD;MACF;IACF;;;WAEDE,2BAAkB;MAChB;QAEEC,KAAK,EAAE,KAFF,IAAP;QAIEC,IAAI,EAAEb,KAAK,CAAC,KAAA,MAAA,CAANA,YAAK,CAALA,GAAAA,CAAAA,GAAsC,KAAA,MAAA,CAJvC,YAAP;QAKEc,QAAQ,EAAE,KALL,UAAP;QAMEC,IAAI,EAEFf,KAAK,CAAC,KAAA,MAAA,CAANA,aAAK,CAALA,IAAoC,KAAA,MAAA,CAAA,aAAA,IAApCA,IAAAA,GAAAA,GAAAA,GAGI,KAAA,MAAA,CAAYgB;MAXpB;IAaD;;;WAEDC,mCAaG;MAAA,iCAZDC,uBAYC;MAAA,IAZDA,uBAYC,sCAbiB,IAajB;MAAA,0BAXDC,SAWC;MAAA,IAXDA,SAWC,+BAXWC,MAAM,CAFA,GAajB;MAAA,0BAVDC,SAUC;MAAA,IAVDA,SAUC,+BAVWD,MAAM,CAHA,GAajB;MAAA,6BATDE,YASC;MAAA,IATDA,YASC,kCAbiB,CAajB;MAAA,8BARDC,aAQC;MAAA,IARDA,aAQC,mCAbiB,GAajB;MAAA,2BAPDxB,UAOC;MAAA,IAPDA,UAOC,gCAPYqB,MAAM,CAND,GAajB;MAAA,8BALDJ,aAKC;MAAA,IALDA,aAKC,mCALeI,MAAM,CARJ,GAajB;MAAA,wBAJDI,OAIC;MAAA,IAJDA,OAIC,6BAbiB,CAajB;MAAA,4BAHDC,WAGC;MAAA,IAHDA,WAGC,iCAbiB,CAajB;MAAA,4BAFDC,WAEC;MAAA,IAFDA,WAEC,iCAbiB,CAajB;MAAA,IADEC,KACF;;MACD;QACET,uBAD+B,EAC/BA,uBADF;QAEEI,YAF+B,EAE/BA,YAFF;QAGEH,SAH+B,EAG/BA,SAHF;QAIEE,SAJ+B,EAI/BA,SAJF;QAKEE,aAL+B,EAK/BA,aALF;QAMExB,UAN+B,EAM/BA,UANF;QAOEyB,OAP+B,EAO/BA,OAPF;QAQEC,WAR+B,EAQ/BA,WARF;QASEC,WAT+B,EAS/BA;MATF,GAUKC,KAVL;IAYD;;;WAEDC,0BAA8B;MAAA;;MAC5BnB,YAAY,CAAC,KADe,MAChB,CAAZA;;MAD4B,mCAAhB,KAAgB;QAAhB,KAAgB;MAAA;;MAG5B,qHAAA,KAAA;IACD;;;WAEDoB,wBAAc,QAAdA,EAA8B;MAC5B,IAAI,KAAJ,mBAAA,EAA8B;QAC5B,KAAA,eAAA,CAAqB,KAArB,mBAAA;QACA,KAAA,mBAAA,GAAA,IAAA;MACD;IACF;;;;EAnKH,sB;;AAqKA,eAAA,iBAAA","sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\nimport { isnan } from './utils';\n\nclass TapGestureHandler extends DiscreteGestureHandler {\n  private _shouldFireEndEvent: HammerInputExt | null = null;\n  private _timer: any;\n  private _multiTapTimer: any; // TODO unused?\n  get name() {\n    return 'tap';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Tap;\n  }\n\n  get maxDelayMs() {\n    // @ts-ignore TODO(TS) trace down config\n    return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n  }\n\n  simulateCancelEvent(inputData: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.cancelEvent(inputData);\n    }\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.onSuccessfulTap(ev);\n    }\n  }\n\n  onSuccessfulTap = (ev: HammerInputExt) => {\n    if (this._getPendingGestures().length) {\n      this._shouldFireEndEvent = ev;\n      return;\n    }\n    if (ev.eventType === Hammer.INPUT_END) {\n      this.sendEvent({ ...ev, eventType: Hammer.INPUT_MOVE });\n    }\n    // When handler gets activated it will turn into State.END immediately.\n    this.sendEvent({ ...ev, isFinal: true });\n    this.onGestureEnded(ev);\n  };\n\n  onRawEvent(ev: HammerInput) {\n    super.onRawEvent(ev);\n\n    // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\n    if (\n      !this.hasGestureFailed &&\n      !this.isGestureRunning &&\n      // Prevent multi-pointer events from misfiring.\n      !ev.isFinal\n    ) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n    if (ev.isFinal && ev.maxPointers > 1) {\n      setTimeout(() => {\n        // Handle case where one finger presses slightly\n        // after the first finger on a multi-tap event\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    }\n\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      // Handle case where one finger presses slightly\n      // after the first finger on a multi-tap event\n      if (ev.maxPointers > 1) {\n        setTimeout(() => {\n          if (this.isGestureRunning) {\n            this.cancelEvent(ev);\n          }\n        });\n      }\n\n      // Clear last timer\n      clearTimeout(this._timer);\n      // Create time out for multi-taps.\n      this._timer = setTimeout(() => {\n        this.hasGestureFailed = true;\n        this.cancelEvent(ev);\n      }, this.maxDelayMs);\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      event: this.name,\n      // @ts-ignore TODO(TS) trace down config\n      taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n      interval: this.maxDelayMs,\n      time:\n        // @ts-ignore TODO(TS) trace down config\n        isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null\n          ? 250\n          : // @ts-ignore TODO(TS) trace down config\n            this.config.maxDurationMs,\n    };\n  }\n\n  updateGestureConfig({\n    shouldCancelWhenOutside = true,\n    maxDeltaX = Number.NaN,\n    maxDeltaY = Number.NaN,\n    numberOfTaps = 1,\n    minDurationMs = 525,\n    maxDelayMs = Number.NaN,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TODO possibly forgotten to use in updateGestureConfig?\n    maxDurationMs = Number.NaN,\n    maxDist = 2,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldCancelWhenOutside,\n      numberOfTaps,\n      maxDeltaX,\n      maxDeltaY,\n      minDurationMs,\n      maxDelayMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  onGestureEnded(...props: any) {\n    clearTimeout(this._timer);\n    // @ts-ignore TODO(TS) check how onGestureEnded works\n    super.onGestureEnded(...props);\n  }\n\n  onWaitingEnded(_gesture: any) {\n    if (this._shouldFireEndEvent) {\n      this.onSuccessfulTap(this._shouldFireEndEvent);\n      this._shouldFireEndEvent = null;\n    }\n  }\n}\nexport default TapGestureHandler;\n"]},"metadata":{},"sourceType":"module"}