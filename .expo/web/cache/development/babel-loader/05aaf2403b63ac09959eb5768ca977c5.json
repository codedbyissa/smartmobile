{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"numberOfPointers\", \"direction\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Hammer from '@egjs/hammerjs';\nimport { Direction } from \"./constants\";\nimport { GesturePropError } from \"./Errors\";\nimport DraggingGestureHandler from \"./DraggingGestureHandler\";\nimport { isnan } from \"./utils\";\n\nvar FlingGestureHandler = function (_DraggingGestureHandl) {\n  _inherits(FlingGestureHandler, _DraggingGestureHandl);\n\n  var _super = _createSuper(FlingGestureHandler);\n\n  function FlingGestureHandler() {\n    _classCallCheck(this, FlingGestureHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FlingGestureHandler, [{\n    key: \"name\",\n    get: function get() {\n      return 'swipe';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return Hammer.Swipe;\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(event) {\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: Hammer.INPUT_MOVE,\n        isFinal: false,\n        isFirst: true\n      }));\n      this.isGestureRunning = false;\n      this.hasGestureFailed = false;\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: Hammer.INPUT_END,\n        isFinal: true\n      }));\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this = this;\n\n      _get(_getPrototypeOf(FlingGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (this.hasGestureFailed) {\n        return;\n      }\n\n      if (ev.isFinal) {\n        setTimeout(function () {\n          if (_this.isGestureRunning) {\n            _this.cancelEvent(ev);\n          }\n        });\n      } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n        var gesture = this.hammer.get(this.name);\n\n        if (gesture.options.enable(gesture, ev)) {\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return {\n        pointers: this.config.numberOfPointers,\n        direction: this.getDirection()\n      };\n    }\n  }, {\n    key: \"getTargetDirections\",\n    value: function getTargetDirections(direction) {\n      var directions = [];\n\n      if (direction & Direction.RIGHT) {\n        directions.push(Hammer.DIRECTION_RIGHT);\n      }\n\n      if (direction & Direction.LEFT) {\n        directions.push(Hammer.DIRECTION_LEFT);\n      }\n\n      if (direction & Direction.UP) {\n        directions.push(Hammer.DIRECTION_UP);\n      }\n\n      if (direction & Direction.DOWN) {\n        directions.push(Hammer.DIRECTION_DOWN);\n      }\n\n      return directions;\n    }\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      var _this$getConfig = this.getConfig(),\n          direction = _this$getConfig.direction;\n\n      var directions = [];\n\n      if (direction & Direction.RIGHT) {\n        directions.push(Hammer.DIRECTION_HORIZONTAL);\n      }\n\n      if (direction & Direction.LEFT) {\n        directions.push(Hammer.DIRECTION_HORIZONTAL);\n      }\n\n      if (direction & Direction.UP) {\n        directions.push(Hammer.DIRECTION_VERTICAL);\n      }\n\n      if (direction & Direction.DOWN) {\n        directions.push(Hammer.DIRECTION_VERTICAL);\n      }\n\n      directions = _toConsumableArray(new Set(directions));\n      if (directions.length === 0) return Hammer.DIRECTION_NONE;\n      if (directions.length === 1) return directions[0];\n      return Hammer.DIRECTION_ALL;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_ref, _recognizer, _ref2) {\n      var numberOfPointers = _ref.numberOfPointers;\n      var pointerLength = _ref2.maxPointers;\n      var validPointerCount = pointerLength === numberOfPointers;\n\n      if (!validPointerCount && this.isGestureRunning) {\n        return {\n          failed: true\n        };\n      }\n\n      return {\n        success: validPointerCount\n      };\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref3) {\n      var _ref3$numberOfPointer = _ref3.numberOfPointers,\n          numberOfPointers = _ref3$numberOfPointer === void 0 ? 1 : _ref3$numberOfPointer,\n          direction = _ref3.direction,\n          props = _objectWithoutProperties(_ref3, _excluded);\n\n      if (isnan(direction) || typeof direction !== 'number') {\n        throw new GesturePropError('direction', direction, 'number');\n      }\n\n      return _get(_getPrototypeOf(FlingGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        numberOfPointers: numberOfPointers,\n        direction: direction\n      }, props));\n    }\n  }]);\n\n  return FlingGestureHandler;\n}(DraggingGestureHandler);\n\nexport default FlingGestureHandler;","map":{"version":3,"sources":["FlingGestureHandler.ts"],"names":["name","NativeGestureClass","Hammer","onGestureActivated","eventType","isFinal","isFirst","onRawEvent","ev","setTimeout","gesture","getHammerConfig","pointers","direction","getTargetDirections","directions","Direction","getDirection","isGestureEnabledForEvent","numberOfPointers","maxPointers","pointerLength","validPointerCount","failed","success","updateGestureConfig","props","isnan"],"mappings":"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","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\n\nimport { Direction } from './constants';\nimport { GesturePropError } from './Errors';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isnan } from './utils';\nimport { HammerInputExt } from './GestureHandler';\n\nclass FlingGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'swipe';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Swipe;\n  }\n\n  onGestureActivated(event: HammerInputExt) {\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_MOVE,\n      isFinal: false,\n      isFirst: true,\n    });\n    this.isGestureRunning = false;\n    this.hasGestureFailed = false;\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_END,\n      isFinal: true,\n    });\n  }\n\n  onRawEvent(ev: HammerInputExt) {\n    super.onRawEvent(ev);\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      setTimeout(() => {\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore FIXME(TS)\n      if (gesture.options.enable(gesture, ev)) {\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      // @ts-ignore FIXME(TS)\n      pointers: this.config.numberOfPointers,\n      direction: this.getDirection(),\n    };\n  }\n\n  getTargetDirections(direction: number) {\n    const directions = [];\n    if (direction & Direction.RIGHT) {\n      directions.push(Hammer.DIRECTION_RIGHT);\n    }\n    if (direction & Direction.LEFT) {\n      directions.push(Hammer.DIRECTION_LEFT);\n    }\n    if (direction & Direction.UP) {\n      directions.push(Hammer.DIRECTION_UP);\n    }\n    if (direction & Direction.DOWN) {\n      directions.push(Hammer.DIRECTION_DOWN);\n    }\n    // const hammerDirection = directions.reduce((a, b) => a | b, 0);\n    return directions;\n  }\n\n  getDirection() {\n    // @ts-ignore FIXME(TS)\n    const { direction } = this.getConfig();\n\n    let directions = [];\n    if (direction & Direction.RIGHT) {\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\n    }\n    if (direction & Direction.LEFT) {\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\n    }\n    if (direction & Direction.UP) {\n      directions.push(Hammer.DIRECTION_VERTICAL);\n    }\n    if (direction & Direction.DOWN) {\n      directions.push(Hammer.DIRECTION_VERTICAL);\n    }\n    directions = [...new Set(directions)];\n\n    if (directions.length === 0) return Hammer.DIRECTION_NONE;\n    if (directions.length === 1) return directions[0];\n    return Hammer.DIRECTION_ALL;\n  }\n\n  isGestureEnabledForEvent(\n    { numberOfPointers }: any,\n    _recognizer: any,\n    { maxPointers: pointerLength }: any\n  ) {\n    const validPointerCount = pointerLength === numberOfPointers;\n    if (!validPointerCount && this.isGestureRunning) {\n      return { failed: true };\n    }\n    return { success: validPointerCount };\n  }\n\n  updateGestureConfig({ numberOfPointers = 1, direction, ...props }: any) {\n    if (isnan(direction) || typeof direction !== 'number') {\n      throw new GesturePropError('direction', direction, 'number');\n    }\n    return super.updateGestureConfig({\n      numberOfPointers,\n      direction,\n      ...props,\n    });\n  }\n}\n\nexport default FlingGestureHandler;\n"]},"metadata":{},"sourceType":"module"}