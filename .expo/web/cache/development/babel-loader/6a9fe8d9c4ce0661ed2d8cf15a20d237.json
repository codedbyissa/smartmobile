{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport default {\n  get name() {\n    return 'ExpoClipboard';\n  },\n\n  getStringAsync: function getStringAsync() {\n    return function _callee() {\n      var text;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              text = '';\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(navigator.clipboard.readText());\n\n            case 4:\n              text = _context.sent;\n              _context.next = 16;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](1);\n              _context.prev = 9;\n              text = window.clipboardData.getData('Text');\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t1 = _context[\"catch\"](9);\n              return _context.abrupt(\"return\", Promise.reject(new Error('Unable to retrieve item from clipboard.')));\n\n            case 16:\n              return _context.abrupt(\"return\", text);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 7], [9, 13]], Promise);\n    }();\n  },\n  setString: function setString(text) {\n    var success = false;\n    var textField = document.createElement('textarea');\n    textField.textContent = text;\n    document.body.appendChild(textField);\n    textField.select();\n\n    try {\n      document.execCommand('copy');\n      success = true;\n    } catch (e) {}\n\n    document.body.removeChild(textField);\n    return success;\n  },\n  addClipboardListener: function addClipboardListener() {},\n  removeClipboardListener: function removeClipboardListener() {}\n};","map":{"version":3,"sources":["../src/ExpoClipboard.web.ts"],"names":[],"mappings":";AAAA,eAAe;EACb,IAAI,IAAJ,GAAQ;IACN,OAAO,eAAP;EACD,CAHY;;EAIP,cAJO,4BAIO;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cACd,IADc,GACP,EADO;cAAA;cAAA;cAAA,iCAGH,SAAS,CAAC,SAAV,CAAoB,QAApB,EAHG;;YAAA;cAGhB,IAHgB;cAAA;cAAA;;YAAA;cAAA;cAAA;cAAA;cAQd,IAAI,GAAG,MAAM,CAAC,aAAP,CAAqB,OAArB,CAA6B,MAA7B,CAAP;cARc;cAAA;;YAAA;cAAA;cAAA;cAAA,iCAUP,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,yCAAV,CAAf,CAVO;;YAAA;cAAA,iCAaX,IAbW;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAcnB,CAlBY;EAmBb,SAnBa,qBAmBH,IAnBG,EAmBS;IACpB,IAAI,OAAO,GAAG,KAAd;IACA,IAAM,SAAS,GAAG,QAAQ,CAAC,aAAT,CAAuB,UAAvB,CAAlB;IACA,SAAS,CAAC,WAAV,GAAwB,IAAxB;IACA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,SAA1B;IACA,SAAS,CAAC,MAAV;;IACA,IAAI;MACF,QAAQ,CAAC,WAAT,CAAqB,MAArB;MACA,OAAO,GAAG,IAAV;IACD,CAHD,CAGE,OAAO,CAAP,EAAU,CAAE;;IACd,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,SAA1B;IACA,OAAO,OAAP;EACD,CA/BY;EAgCb,oBAhCa,kCAgCO,CAAW,CAhClB;EAiCb,uBAjCa,qCAiCU,CAAW;AAjCrB,CAAf","sourcesContent":["export default {\n  get name(): string {\n    return 'ExpoClipboard';\n  },\n  async getStringAsync(): Promise<string> {\n    let text = '';\n    try {\n      text = await navigator.clipboard.readText();\n    } catch (e) {\n      try {\n        // Internet Explorer\n        // @ts-ignore\n        text = window.clipboardData.getData('Text');\n      } catch (e) {\n        return Promise.reject(new Error('Unable to retrieve item from clipboard.'));\n      }\n    }\n    return text;\n  },\n  setString(text: string): boolean {\n    let success = false;\n    const textField = document.createElement('textarea');\n    textField.textContent = text;\n    document.body.appendChild(textField);\n    textField.select();\n    try {\n      document.execCommand('copy');\n      success = true;\n    } catch (e) {}\n    document.body.removeChild(textField);\n    return success;\n  },\n  addClipboardListener(): void {},\n  removeClipboardListener(): void {},\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}