{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"defaultStatus\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { nanoid } from 'nanoid/non-secure';\nimport TabRouter, { TabActions } from \"./TabRouter\";\nexport var DrawerActions = _objectSpread(_objectSpread({}, TabActions), {}, {\n  openDrawer: function openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n  closeDrawer: function closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n  toggleDrawer: function toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n});\nexport default function DrawerRouter(_ref) {\n  var _ref$defaultStatus = _ref.defaultStatus,\n      defaultStatus = _ref$defaultStatus === void 0 ? 'closed' : _ref$defaultStatus,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var router = TabRouter(rest);\n\n  var isDrawerInHistory = function isDrawerInHistory(state) {\n    var _state$history;\n\n    return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(function (it) {\n      return it.type === 'drawer';\n    }));\n  };\n\n  var addDrawerToHistory = function addDrawerToHistory(state) {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      history: [].concat(_toConsumableArray(state.history), [{\n        type: 'drawer',\n        status: defaultStatus === 'open' ? 'closed' : 'open'\n      }])\n    });\n  };\n\n  var removeDrawerFromHistory = function removeDrawerFromHistory(state) {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      history: state.history.filter(function (it) {\n        return it.type !== 'drawer';\n      })\n    });\n  };\n\n  var openDrawer = function openDrawer(state) {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  var closeDrawer = function closeDrawer(state) {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return _objectSpread(_objectSpread({}, router), {}, {\n    type: 'drawer',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList,\n          routeGetIdList = _ref2.routeGetIdList;\n      var state = router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: \"drawer-\" + nanoid()\n      });\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList,\n          routeGetIdList = _ref3.routeGetIdList;\n\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      var state = router.getRehydratedState(partialState, {\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        default: defaultStatus,\n        type: 'drawer',\n        key: \"drawer-\" + nanoid()\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var result = router.getStateForRouteFocus(state, key);\n      return closeDrawer(result);\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            var result = router.getStateForAction(state, action, options);\n\n            if (result != null && result.index !== state.index) {\n              return closeDrawer(result);\n            }\n\n            return result;\n          }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n    actionCreators: DrawerActions\n  });\n}","map":{"version":3,"sources":["DrawerRouter.tsx"],"names":["DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","defaultStatus","rest","router","TabRouter","isDrawerInHistory","state","Boolean","it","addDrawerToHistory","history","status","removeDrawerFromHistory","getInitialState","routeGetIdList","routeNames","routeParamList","default","stale","key","nanoid","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport TabRouter, {\n  TabActionHelpers,\n  TabActions,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nimport type {\n  CommonNavigationAction,\n  ParamListBase,\n  PartialState,\n  Router,\n} from './types';\nexport type DrawerStatus = 'open' | 'closed';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  defaultStatus?: DrawerStatus;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * Default status of the drawer.\n   */\n  default: DrawerStatus;\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: (\n    | { type: 'route'; key: string }\n    | { type: 'drawer'; status: DrawerStatus }\n  )[];\n};\n\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\n  TabActionHelpers<ParamList> & {\n    /**\n     * Open the drawer sidebar.\n     */\n    openDrawer(): void;\n\n    /**\n     * Close the drawer sidebar.\n     */\n    closeDrawer(): void;\n\n    /**\n     * Open the drawer sidebar if closed, or close if opened.\n     */\n    toggleDrawer(): void;\n  };\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nexport default function DrawerRouter({\n  defaultStatus = 'closed',\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = TabRouter(rest) as unknown as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  const isDrawerInHistory = (\n    state:\n      | DrawerNavigationState<ParamListBase>\n      | PartialState<DrawerNavigationState<ParamListBase>>\n  ) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\n  const addDrawerToHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: [\n        ...state.history,\n        {\n          type: 'drawer',\n          status: defaultStatus === 'open' ? 'closed' : 'open',\n        },\n      ],\n    };\n  };\n\n  const removeDrawerFromHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: state.history.filter((it) => it.type !== 'drawer'),\n    };\n  };\n\n  const openDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  const closeDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      return {\n        ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return {\n        ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          const result = router.getStateForAction(state, action, options);\n\n          if (result != null && result.index !== state.index) {\n            return closeDrawer(result as DrawerNavigationState<ParamListBase>);\n          }\n\n          return result;\n        }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}