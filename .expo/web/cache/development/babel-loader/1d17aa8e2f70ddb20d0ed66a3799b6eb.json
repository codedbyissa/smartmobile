{"ast":null,"code":"import * as Colors from \"./colors\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nvar SHADOW_COLOR = Colors.black;\nvar SHADOW_OPACITY = 0.24;\nexport default function shadow() {\n  var elevation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n  if (elevation instanceof Animated.Value) {\n    var inputRange = [0, 1, 2, 3, 8, 24];\n    return {\n      shadowColor: SHADOW_COLOR,\n      shadowOffset: {\n        width: new Animated.Value(0),\n        height: elevation.interpolate({\n          inputRange: inputRange,\n          outputRange: [0, 0.5, 0.75, 2, 7, 23]\n        })\n      },\n      shadowOpacity: elevation.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, SHADOW_OPACITY],\n        extrapolate: 'clamp'\n      }),\n      shadowRadius: elevation.interpolate({\n        inputRange: inputRange,\n        outputRange: [0, 0.75, 1.5, 3, 8, 24]\n      })\n    };\n  } else {\n    if (elevation === 0) {\n      return {};\n    }\n\n    var height, radius;\n\n    switch (elevation) {\n      case 1:\n        height = 0.5;\n        radius = 0.75;\n        break;\n\n      case 2:\n        height = 0.75;\n        radius = 1.5;\n        break;\n\n      default:\n        height = elevation - 1;\n        radius = elevation;\n    }\n\n    return {\n      shadowColor: SHADOW_COLOR,\n      shadowOffset: {\n        width: 0,\n        height: height\n      },\n      shadowOpacity: SHADOW_OPACITY,\n      shadowRadius: radius\n    };\n  }\n}","map":{"version":3,"sources":["shadow.tsx"],"names":["SHADOW_COLOR","Colors","SHADOW_OPACITY","elevation","Animated","inputRange","shadowColor","shadowOffset","width","height","outputRange","shadowOpacity","extrapolate","shadowRadius","radius"],"mappings":"AAAA,OAAO,KAAP,MAAA;;AAGA,IAAMA,YAAY,GAAGC,MAAM,CAA3B,KAAA;AACA,IAAMC,cAAc,GAApB,IAAA;AAEA,eAAe,SAAA,MAAA,GAAwD;EAAA,IAAxCC,SAAwC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAH,CAAG;;EACrE,IAAIA,SAAS,YAAYC,QAAQ,CAAjC,KAAA,EAAyC;IACvC,IAAMC,UAAU,GAAG,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAnB,EAAmB,CAAnB;IAEA,OAAO;MACLC,WAAW,EADN,YAAA;MAELC,YAAY,EAAE;QACZC,KAAK,EAAE,IAAIJ,QAAQ,CAAZ,KAAA,CADK,CACL,CADK;QAEZK,MAAM,EAAE,SAAS,CAAT,WAAA,CAAsB;UAC5BJ,UAD4B,EAC5BA,UAD4B;UAE5BK,WAAW,EAAE,CAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA;QAFe,CAAtB;MAFI,CAFT;MASLC,aAAa,EAAE,SAAS,CAAT,WAAA,CAAsB;QACnCN,UAAU,EAAE,CAAA,CAAA,EADuB,CACvB,CADuB;QAEnCK,WAAW,EAAE,CAAA,CAAA,EAFsB,cAEtB,CAFsB;QAGnCE,WAAW,EAAE;MAHsB,CAAtB,CATV;MAcLC,YAAY,EAAE,SAAS,CAAT,WAAA,CAAsB;QAClCR,UADkC,EAClCA,UADkC;QAElCK,WAAW,EAAE,CAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA;MAFqB,CAAtB;IAdT,CAAP;EAHF,CAAA,MAsBO;IACL,IAAIP,SAAS,KAAb,CAAA,EAAqB;MACnB,OAAA,EAAA;IACD;;IAED,IAAA,MAAA,EAAA,MAAA;;IACA,QAAA,SAAA;MACE,KAAA,CAAA;QACEM,MAAM,GAANA,GAAAA;QACAK,MAAM,GAANA,IAAAA;QACA;;MACF,KAAA,CAAA;QACEL,MAAM,GAANA,IAAAA;QACAK,MAAM,GAANA,GAAAA;QACA;;MACF;QACEL,MAAM,GAAGN,SAAS,GAAlBM,CAAAA;QACAK,MAAM,GAANA,SAAAA;IAXJ;;IAcA,OAAO;MACLR,WAAW,EADN,YAAA;MAELC,YAAY,EAAE;QACZC,KAAK,EADO,CAAA;QAEZC,MAAAA,EAAAA;MAFY,CAFT;MAMLE,aAAa,EANR,cAAA;MAOLE,YAAY,EAAEC;IAPT,CAAP;EASD;AACF","sourcesContent":["import * as Colors from './colors';\nimport { Animated } from 'react-native';\n\nconst SHADOW_COLOR = Colors.black;\nconst SHADOW_OPACITY = 0.24;\n\nexport default function shadow(elevation: number | Animated.Value = 0) {\n  if (elevation instanceof Animated.Value) {\n    const inputRange = [0, 1, 2, 3, 8, 24];\n\n    return {\n      shadowColor: SHADOW_COLOR,\n      shadowOffset: {\n        width: new Animated.Value(0),\n        height: elevation.interpolate({\n          inputRange,\n          outputRange: [0, 0.5, 0.75, 2, 7, 23],\n        }),\n      },\n      shadowOpacity: elevation.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, SHADOW_OPACITY],\n        extrapolate: 'clamp',\n      }),\n      shadowRadius: elevation.interpolate({\n        inputRange,\n        outputRange: [0, 0.75, 1.5, 3, 8, 24],\n      }),\n    };\n  } else {\n    if (elevation === 0) {\n      return {};\n    }\n\n    let height, radius;\n    switch (elevation) {\n      case 1:\n        height = 0.5;\n        radius = 0.75;\n        break;\n      case 2:\n        height = 0.75;\n        radius = 1.5;\n        break;\n      default:\n        height = elevation - 1;\n        radius = elevation;\n    }\n\n    return {\n      shadowColor: SHADOW_COLOR,\n      shadowOffset: {\n        width: 0,\n        height,\n      },\n      shadowOpacity: SHADOW_OPACITY,\n      shadowRadius: radius,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}