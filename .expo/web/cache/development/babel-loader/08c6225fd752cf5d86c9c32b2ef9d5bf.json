{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError } from 'expo-modules-core';\nimport ExpoFontLoader from \"./ExpoFontLoader\";\nimport { FontDisplay } from \"./Font\";\n\nfunction uriFromFontSource(asset) {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'object') {\n    return asset.uri || asset.localUri || null;\n  }\n\n  return null;\n}\n\nfunction displayFromFontSource(asset) {\n  return asset.display || FontDisplay.AUTO;\n}\n\nexport function fontFamilyNeedsScoping(name) {\n  return false;\n}\nexport function getAssetForSource(source) {\n  var uri = uriFromFontSource(source);\n  var display = displayFromFontSource(source);\n\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n\n  return {\n    uri: uri,\n    display: display\n  };\n}\n\nfunction throwInvalidSourceError(source) {\n  var type = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new CodedError(\"ERR_FONT_SOURCE\", \"Expected font asset of type `string | FontResource | Asset` (number is not supported on web) instead got: \" + type);\n}\n\nexport function loadSingleFontAsync(name, input) {\n  return _regeneratorRuntime.async(function loadSingleFontAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (typeof input !== 'object' || typeof input.uri !== 'string' || input.downloadAsync) {\n            throwInvalidSourceError(input);\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(ExpoFontLoader.loadAsync(name, input));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getNativeFontName(name) {\n  return name;\n}","map":{"version":3,"sources":["../src/FontLoader.web.ts"],"names":[],"mappings":";AACA,SAAS,UAAT,QAA2B,mBAA3B;AAEA,OAAO,cAAP;AACA,SAAS,WAAT;;AAGA,SAAS,iBAAT,CAA2B,KAA3B,EAAqC;EACnC,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;IAC7B,OAAO,KAAK,IAAI,IAAhB;EACD,CAFD,MAEO,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;IACpC,OAAO,KAAK,CAAC,GAAN,IAAa,KAAK,CAAC,QAAnB,IAA+B,IAAtC;EACD;;EACD,OAAO,IAAP;AACD;;AAED,SAAS,qBAAT,CAA+B,KAA/B,EAAyC;EACvC,OAAO,KAAK,CAAC,OAAN,IAAiB,WAAW,CAAC,IAApC;AACD;;AAED,OAAM,SAAU,sBAAV,CAAiC,IAAjC,EAA6C;EACjD,OAAO,KAAP;AACD;AAED,OAAM,SAAU,iBAAV,CAA4B,MAA5B,EAA8C;EAClD,IAAM,GAAG,GAAG,iBAAiB,CAAC,MAAD,CAA7B;EACA,IAAM,OAAO,GAAG,qBAAqB,CAAC,MAAD,CAArC;;EAEA,IAAI,CAAC,GAAD,IAAQ,OAAO,GAAP,KAAe,QAA3B,EAAqC;IACnC,uBAAuB,CAAC,GAAD,CAAvB;EACD;;EAED,OAAO;IACL,GAAG,EAAE,GADA;IAEL,OAAO,EAAP;EAFK,CAAP;AAID;;AAED,SAAS,uBAAT,CAAiC,MAAjC,EAA4C;EAC1C,IAAI,IAAI,GAAW,OAAO,MAA1B;EACA,IAAI,IAAI,KAAK,QAAb,EAAuB,IAAI,GAAG,IAAI,CAAC,SAAL,CAAe,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAP;EACvB,MAAM,IAAI,UAAJ,mIAE2G,IAF3G,CAAN;AAID;;AAED,OAAO,SAAe,mBAAf,CACL,IADK,EAEL,KAFK;EAAA;IAAA;MAAA;QAAA;UAIL,IAAI,OAAO,KAAP,KAAiB,QAAjB,IAA6B,OAAO,KAAK,CAAC,GAAb,KAAqB,QAAlD,IAA+D,KAAa,CAAC,aAAjF,EAAgG;YAC9F,uBAAuB,CAAC,KAAD,CAAvB;UACD;;UANI;UAAA,iCAQC,cAAc,CAAC,SAAf,CAAyB,IAAzB,EAA+B,KAA/B,CARD;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAWP,OAAM,SAAU,iBAAV,CAA4B,IAA5B,EAAwC;EAC5C,OAAO,IAAP;AACD","sourcesContent":["import { Asset } from 'expo-asset';\nimport { CodedError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay } from './Font';\nimport { FontResource, FontSource } from './Font.types';\n\nfunction uriFromFontSource(asset: any): string | null {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'object') {\n    return asset.uri || asset.localUri || null;\n  }\n  return null;\n}\n\nfunction displayFromFontSource(asset: any): FontDisplay | undefined {\n  return asset.display || FontDisplay.AUTO;\n}\n\nexport function fontFamilyNeedsScoping(name: string): boolean {\n  return false;\n}\n\nexport function getAssetForSource(source: FontSource): Asset | FontResource {\n  const uri = uriFromFontSource(source);\n  const display = displayFromFontSource(source);\n\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n\n  return {\n    uri: uri!,\n    display,\n  };\n}\n\nfunction throwInvalidSourceError(source: any): never {\n  let type: string = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new CodedError(\n    `ERR_FONT_SOURCE`,\n    `Expected font asset of type \\`string | FontResource | Asset\\` (number is not supported on web) instead got: ${type}`\n  );\n}\n\nexport async function loadSingleFontAsync(\n  name: string,\n  input: Asset | FontResource\n): Promise<void> {\n  if (typeof input !== 'object' || typeof input.uri !== 'string' || (input as any).downloadAsync) {\n    throwInvalidSourceError(input);\n  }\n\n  await ExpoFontLoader.loadAsync(name, input);\n}\n\nexport function getNativeFontName(name: string): string {\n  return name;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}