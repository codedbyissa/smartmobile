{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"dark\", \"style\", \"theme\"],\n    _excluded2 = [\"backgroundColor\", \"elevation\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport AppbarContent from \"./AppbarContent\";\nimport AppbarAction from \"./AppbarAction\";\nimport AppbarBackAction from \"./AppbarBackAction\";\nimport Surface from \"../Surface\";\nimport { withTheme } from \"../../core/theming\";\nimport { black, white } from \"../../styles/colors\";\nimport overlay from \"../../styles/overlay\";\nexport var DEFAULT_APPBAR_HEIGHT = 56;\n\nvar Appbar = function Appbar(_ref) {\n  var children = _ref.children,\n      dark = _ref.dark,\n      style = _ref.style,\n      theme = _ref.theme,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var colors = theme.colors,\n      isDarkTheme = theme.dark,\n      mode = theme.mode;\n\n  var _ref2 = StyleSheet.flatten(style) || {},\n      customBackground = _ref2.backgroundColor,\n      _ref2$elevation = _ref2.elevation,\n      elevation = _ref2$elevation === void 0 ? 4 : _ref2$elevation,\n      restStyle = _objectWithoutProperties(_ref2, _excluded2);\n\n  var isDark;\n  var backgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.primary;\n\n  if (typeof dark === 'boolean') {\n    isDark = dark;\n  } else {\n    isDark = backgroundColor === 'transparent' ? false : typeof backgroundColor === 'string' ? !color(backgroundColor).isLight() : true;\n  }\n\n  var shouldCenterContent = false;\n  var shouldAddLeftSpacing = false;\n  var shouldAddRightSpacing = false;\n\n  if (Platform.OS === 'ios') {\n    var hasAppbarContent = false;\n    var leftItemsCount = 0;\n    var rightItemsCount = 0;\n    React.Children.forEach(children, function (child) {\n      if (React.isValidElement(child)) {\n        if (child.type === AppbarContent) {\n          hasAppbarContent = true;\n        } else if (hasAppbarContent) {\n          rightItemsCount++;\n        } else {\n          leftItemsCount++;\n        }\n      }\n    });\n    shouldCenterContent = hasAppbarContent && leftItemsCount < 2 && rightItemsCount < 2;\n    shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n    shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n  }\n\n  return React.createElement(Surface, _extends({\n    style: [{\n      backgroundColor: backgroundColor\n    }, styles.appbar, {\n      elevation: elevation\n    }, restStyle]\n  }, rest), shouldAddLeftSpacing ? React.createElement(View, {\n    style: styles.spacing\n  }) : null, React.Children.toArray(children).filter(function (child) {\n    return child != null && typeof child !== 'boolean';\n  }).map(function (child, i) {\n    if (!React.isValidElement(child) || ![AppbarContent, AppbarAction, AppbarBackAction].includes(child.type)) {\n      return child;\n    }\n\n    var props = {\n      color: typeof child.props.color !== 'undefined' ? child.props.color : isDark ? white : black\n    };\n\n    if (child.type === AppbarContent) {\n      props.style = [i !== 0 && {\n        marginLeft: 8\n      }, shouldCenterContent && {\n        alignItems: 'center'\n      }, child.props.style];\n    }\n\n    return React.cloneElement(child, props);\n  }), shouldAddRightSpacing ? React.createElement(View, {\n    style: styles.spacing\n  }) : null);\n};\n\nvar styles = StyleSheet.create({\n  appbar: {\n    height: DEFAULT_APPBAR_HEIGHT,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n    elevation: 4\n  },\n  spacing: {\n    width: 48\n  }\n});\nexport default withTheme(Appbar);\nvar AppbarWithTheme = withTheme(Appbar);\nexport { AppbarWithTheme as Appbar };","map":{"version":3,"sources":["Appbar.tsx"],"names":["DEFAULT_APPBAR_HEIGHT","Appbar","rest","dark","mode","backgroundColor","elevation","restStyle","StyleSheet","customBackground","isDarkTheme","overlay","colors","isDark","color","shouldCenterContent","shouldAddLeftSpacing","shouldAddRightSpacing","Platform","hasAppbarContent","leftItemsCount","rightItemsCount","React","child","styles","spacing","props","black","i","marginLeft","alignItems","appbar","height","flexDirection","paddingHorizontal","width","withTheme","AppbarWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, Platform, StyleSheet, StyleProp } from 'react-native';\nimport color from 'color';\n\nimport AppbarContent from './AppbarContent';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport overlay from '../../styles/overlay';\n\ntype Props = Partial<React.ComponentPropsWithRef<typeof View>> & {\n  /**\n   * Whether the background color is a dark color. A dark appbar will render light text and vice-versa.\n   */\n  dark?: boolean;\n  /**\n   * Content of the `Appbar`.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport const DEFAULT_APPBAR_HEIGHT = 56;\n\n/**\n * A component to display action items in a bar. It can be placed at the top or bottom.\n * The top bar usually contains the screen title, controls such as navigation buttons, menu button etc.\n * The bottom bar usually provides access to a drawer and up to four actions.\n *\n * By default Appbar uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more informations\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/appbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *  <Appbar style={styles.bottom}>\n *    <Appbar.Action\n *      icon=\"archive\"\n *      onPress={() => console.log('Pressed archive')}\n *     />\n *     <Appbar.Action icon=\"mail\" onPress={() => console.log('Pressed mail')} />\n *     <Appbar.Action icon=\"label\" onPress={() => console.log('Pressed label')} />\n *     <Appbar.Action\n *       icon=\"delete\"\n *       onPress={() => console.log('Pressed delete')}\n *     />\n *   </Appbar>\n *  );\n *\n * export default MyComponent\n *\n * const styles = StyleSheet.create({\n *   bottom: {\n *     position: 'absolute',\n *     left: 0,\n *     right: 0,\n *     bottom: 0,\n *   },\n * });\n * ```\n */\nconst Appbar = ({ children, dark, style, theme, ...rest }: Props) => {\n  const { colors, dark: isDarkTheme, mode } = theme;\n  const {\n    backgroundColor: customBackground,\n    elevation = 4,\n    ...restStyle\n  }: ViewStyle = StyleSheet.flatten(style) || {};\n\n  let isDark: boolean;\n\n  const backgroundColor = customBackground\n    ? customBackground\n    : isDarkTheme && mode === 'adaptive'\n    ? overlay(elevation, colors.surface)\n    : colors.primary;\n  if (typeof dark === 'boolean') {\n    isDark = dark;\n  } else {\n    isDark =\n      backgroundColor === 'transparent'\n        ? false\n        : typeof backgroundColor === 'string'\n        ? !color(backgroundColor).isLight()\n        : true;\n  }\n\n  let shouldCenterContent = false;\n  let shouldAddLeftSpacing = false;\n  let shouldAddRightSpacing = false;\n  if (Platform.OS === 'ios') {\n    let hasAppbarContent = false;\n    let leftItemsCount = 0;\n    let rightItemsCount = 0;\n\n    React.Children.forEach(children, (child) => {\n      if (React.isValidElement(child)) {\n        if (child.type === AppbarContent) {\n          hasAppbarContent = true;\n        } else if (hasAppbarContent) {\n          rightItemsCount++;\n        } else {\n          leftItemsCount++;\n        }\n      }\n    });\n\n    shouldCenterContent =\n      hasAppbarContent && leftItemsCount < 2 && rightItemsCount < 2;\n    shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n    shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n  }\n  return (\n    <Surface\n      style={[{ backgroundColor }, styles.appbar, { elevation }, restStyle]}\n      {...rest}\n    >\n      {shouldAddLeftSpacing ? <View style={styles.spacing} /> : null}\n      {React.Children.toArray(children)\n        .filter((child) => child != null && typeof child !== 'boolean')\n        .map((child, i) => {\n          if (\n            !React.isValidElement(child) ||\n            ![AppbarContent, AppbarAction, AppbarBackAction].includes(\n              // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n              child.type\n            )\n          ) {\n            return child;\n          }\n\n          const props: { color?: string; style?: StyleProp<ViewStyle> } = {\n            color:\n              typeof child.props.color !== 'undefined'\n                ? child.props.color\n                : isDark\n                ? white\n                : black,\n          };\n\n          if (child.type === AppbarContent) {\n            props.style = [\n              // Since content is not first item, add extra left margin\n              i !== 0 && { marginLeft: 8 },\n              shouldCenterContent && { alignItems: 'center' },\n              child.props.style,\n            ];\n          }\n          return React.cloneElement(child, props);\n        })}\n      {shouldAddRightSpacing ? <View style={styles.spacing} /> : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  appbar: {\n    height: DEFAULT_APPBAR_HEIGHT,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n    elevation: 4,\n  },\n  spacing: {\n    width: 48,\n  },\n});\n\nexport default withTheme(Appbar);\n\n// @component-docs ignore-next-line\nconst AppbarWithTheme = withTheme(Appbar);\n// @component-docs ignore-next-line\nexport { AppbarWithTheme as Appbar };\n"]},"metadata":{},"sourceType":"module"}