{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as queryString from 'query-string';\nimport fromEntries from \"./fromEntries\";\nimport validatePathConfig from \"./validatePathConfig\";\n\nvar getActiveRoute = function getActiveRoute(state) {\n  var route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n\nexport default function getPathFromState(state, options) {\n  if (state == null) {\n    throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n  }\n\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  var configs = options !== null && options !== void 0 && options.screens ? createNormalizedConfigs(options === null || options === void 0 ? void 0 : options.screens) : {};\n  var path = '/';\n  var current = state;\n  var allParams = {};\n\n  var _loop = function _loop() {\n    var index = typeof current.index === 'number' ? current.index : 0;\n    var route = current.routes[index];\n    var pattern = void 0;\n    var focusedParams = void 0;\n    var focusedRoute = getActiveRoute(state);\n    var currentOptions = configs;\n    var nestedRouteNames = [];\n    var hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        (function () {\n          var stringify = (_currentOptions$route = currentOptions[route.name]) === null || _currentOptions$route === void 0 ? void 0 : _currentOptions$route.stringify;\n          var currentParams = fromEntries(Object.entries(route.params).map(function (_ref) {\n            var _ref3 = _slicedToArray(_ref, 2),\n                key = _ref3[0],\n                value = _ref3[1];\n\n            return [key, stringify !== null && stringify !== void 0 && stringify[key] ? stringify[key](value) : String(value)];\n          }));\n\n          if (pattern) {\n            _extends(allParams, currentParams);\n          }\n\n          if (focusedRoute === route) {\n            focusedParams = _objectSpread({}, currentParams);\n            (_pattern = pattern) === null || _pattern === void 0 ? void 0 : _pattern.split('/').filter(function (p) {\n              return p.startsWith(':');\n            }).forEach(function (p) {\n              var name = getParamName(p);\n\n              if (focusedParams) {\n                delete focusedParams[name];\n              }\n            });\n          }\n        })();\n      }\n\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n        var nextRoute = route.state.routes[index];\n        var nestedConfig = currentOptions[route.name].screens;\n\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute;\n          currentOptions = nestedConfig;\n        } else {\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern.split('/').map(function (p) {\n        var name = getParamName(p);\n\n        if (p === '*') {\n          return route.name;\n        }\n\n        if (p.startsWith(':')) {\n          var value = allParams[name];\n\n          if (value === undefined && p.endsWith('?')) {\n            return '';\n          }\n\n          return encodeURIComponent(value);\n        }\n\n        return encodeURIComponent(p);\n      }).join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (var param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          delete focusedParams[param];\n        }\n      }\n\n      var query = queryString.stringify(focusedParams, {\n        sort: false\n      });\n\n      if (query) {\n        path += \"?\" + query;\n      }\n    }\n\n    current = route.state;\n  };\n\n  while (current) {\n    var _currentOptions$route;\n\n    var _pattern;\n\n    _loop();\n  }\n\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n  return path;\n}\n\nvar getParamName = function getParamName(pattern) {\n  return pattern.replace(/^:/, '').replace(/\\?$/, '');\n};\n\nvar joinPaths = function joinPaths() {\n  var _ref4;\n\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n\n  return (_ref4 = []).concat.apply(_ref4, _toConsumableArray(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\n\nvar createConfigItem = function createConfigItem(config, parentPattern) {\n  var _pattern2;\n\n  if (typeof config === 'string') {\n    var _pattern3 = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return {\n      pattern: _pattern3\n    };\n  }\n\n  var pattern;\n\n  if (config.exact && config.path === undefined) {\n    throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n  }\n\n  pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n  var screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n  return {\n    pattern: (_pattern2 = pattern) === null || _pattern2 === void 0 ? void 0 : _pattern2.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens: screens\n  };\n};\n\nvar createNormalizedConfigs = function createNormalizedConfigs(options, pattern) {\n  return fromEntries(Object.entries(options).map(function (_ref2) {\n    var _ref5 = _slicedToArray(_ref2, 2),\n        name = _ref5[0],\n        c = _ref5[1];\n\n    var result = createConfigItem(c, pattern);\n    return [name, result];\n  }));\n};","map":{"version":3,"sources":["getPathFromState.tsx"],"names":["getActiveRoute","state","route","Error","validatePathConfig","configs","options","createNormalizedConfigs","path","current","allParams","index","pattern","focusedParams","focusedRoute","currentOptions","nestedRouteNames","hasNext","stringify","currentParams","fromEntries","String","Object","p","name","getParamName","nextRoute","nestedConfig","value","encodeURIComponent","query","sort","joinPaths","paths","createConfigItem","parentPattern","config","screens","result"],"mappings":"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","sourcesContent":["import type {\n  NavigationState,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as queryString from 'query-string';\n\nimport fromEntries from './fromEntries';\nimport type { PathConfig, PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype State = NavigationState | Omit<PartialState<NavigationState>, 'stale'>;\n\ntype StringifyConfig = Record<string, (value: any) => string>;\n\ntype ConfigItem = {\n  pattern?: string;\n  stringify?: StringifyConfig;\n  screens?: Record<string, ConfigItem>;\n};\n\nconst getActiveRoute = (state: State): { name: string; params?: object } => {\n  const route =\n    typeof state.index === 'number'\n      ? state.routes[state.index]\n      : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * @example\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport default function getPathFromState<ParamList extends {}>(\n  state: State,\n  options?: Options<ParamList>\n): string {\n  if (state == null) {\n    throw Error(\n      \"Got 'undefined' for the navigation state. You must pass a valid state object.\"\n    );\n  }\n\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  // Create a normalized configs object which will be easier to use\n  const configs: Record<string, ConfigItem> = options?.screens\n    ? createNormalizedConfigs(options?.screens)\n    : {};\n\n  let path = '/';\n  let current: State | undefined = state;\n\n  const allParams: Record<string, any> = {};\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index] as Route<string> & {\n      state?: State;\n    };\n\n    let pattern: string | undefined;\n\n    let focusedParams: Record<string, any> | undefined;\n    let focusedRoute = getActiveRoute(state);\n    let currentOptions = configs;\n\n    // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n    let nestedRouteNames = [];\n\n    let hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        const stringify = currentOptions[route.name]?.stringify;\n\n        const currentParams = fromEntries(\n          Object.entries(route.params).map(([key, value]) => [\n            key,\n            stringify?.[key] ? stringify[key](value) : String(value),\n          ])\n        );\n\n        if (pattern) {\n          Object.assign(allParams, currentParams);\n        }\n\n        if (focusedRoute === route) {\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = { ...currentParams };\n\n          pattern\n            ?.split('/')\n            .filter((p) => p.startsWith(':'))\n            // eslint-disable-next-line no-loop-func\n            .forEach((p) => {\n              const name = getParamName(p);\n\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n        }\n      }\n\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index =\n          typeof route.state.index === 'number'\n            ? route.state.index\n            : route.state.routes.length - 1;\n\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens;\n\n        // if there is config for next route name, we go deeper\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute as Route<string> & { state?: State };\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern\n        .split('/')\n        .map((p) => {\n          const name = getParamName(p);\n\n          // We don't know what to show for wildcard patterns\n          // Showing the route name seems ok, though whatever we show here will be incorrect\n          // Since the page doesn't actually exist\n          if (p === '*') {\n            return route.name;\n          }\n\n          // If the path has a pattern for a param, put the param in the path\n          if (p.startsWith(':')) {\n            const value = allParams[name];\n\n            if (value === undefined && p.endsWith('?')) {\n              // Optional params without value assigned in route.params should be ignored\n              return '';\n            }\n\n            return encodeURIComponent(value);\n          }\n\n          return encodeURIComponent(p);\n        })\n        .join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (let param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n\n      const query = queryString.stringify(focusedParams, { sort: false });\n\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n\n    current = route.state;\n  }\n\n  // Remove multiple as well as trailing slashes\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n\n  return path;\n}\n\nconst getParamName = (pattern: string) =>\n  pattern.replace(/^:/, '').replace(/\\?$/, '');\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst createConfigItem = (\n  config: PathConfig<object> | string,\n  parentPattern?: string\n): ConfigItem => {\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return { pattern };\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  let pattern: string | undefined;\n\n  if (config.exact && config.path === undefined) {\n    throw new Error(\n      \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n    );\n  }\n\n  pattern =\n    config.exact !== true\n      ? joinPaths(parentPattern || '', config.path || '')\n      : config.path || '';\n\n  const screens = config.screens\n    ? createNormalizedConfigs(config.screens, pattern)\n    : undefined;\n\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: pattern?.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens,\n  };\n};\n\nconst createNormalizedConfigs = (\n  options: PathConfigMap<object>,\n  pattern?: string\n): Record<string, ConfigItem> =>\n  fromEntries(\n    Object.entries(options).map(([name, c]) => {\n      const result = createConfigItem(c, pattern);\n\n      return [name, result];\n    })\n  );\n"]},"metadata":{},"sourceType":"module"}