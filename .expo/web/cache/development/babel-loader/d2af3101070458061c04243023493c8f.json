{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { getPathFromState, NavigationHelpersContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport LinkingContext from \"./LinkingContext\";\n\nvar getRootStateForNavigate = function getRootStateForNavigate(navigation, state) {\n  var parent = navigation.getParent();\n\n  if (parent) {\n    var parentState = parent.getState();\n    return getRootStateForNavigate(parent, {\n      index: 0,\n      routes: [_objectSpread(_objectSpread({}, parentState.routes[parentState.index]), {}, {\n        state: state\n      })]\n    });\n  }\n\n  return state;\n};\n\nexport default function useLinkBuilder() {\n  var navigation = React.useContext(NavigationHelpersContext);\n  var linking = React.useContext(LinkingContext);\n  var buildLink = React.useCallback(function (name, params) {\n    var options = linking.options;\n\n    if ((options === null || options === void 0 ? void 0 : options.enabled) === false) {\n      return undefined;\n    }\n\n    var state = navigation ? getRootStateForNavigate(navigation, {\n      index: 0,\n      routes: [{\n        name: name,\n        params: params\n      }]\n    }) : {\n      index: 0,\n      routes: [{\n        name: name,\n        params: params\n      }]\n    };\n    var path = options !== null && options !== void 0 && options.getPathFromState ? options.getPathFromState(state, options === null || options === void 0 ? void 0 : options.config) : getPathFromState(state, options === null || options === void 0 ? void 0 : options.config);\n    return path;\n  }, [linking, navigation]);\n  return buildLink;\n}","map":{"version":3,"sources":["useLinkBuilder.tsx"],"names":["getRootStateForNavigate","parent","navigation","parentState","index","routes","state","React","linking","buildLink","options","name","params","path","getPathFromState"],"mappings":";;;;;;AAAA,SAAA,gBAAA,EAAA,wBAAA,QAAA,wBAAA;AAOA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,cAAA;;AAWA,IAAMA,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAA,UAAA,EAAA,KAAA,EAGb;EACjB,IAAMC,MAAM,GAAGC,UAAU,CAAzB,SAAeA,EAAf;;EAEA,IAAA,MAAA,EAAY;IACV,IAAMC,WAAW,GAAGF,MAAM,CAA1B,QAAoBA,EAApB;IAEA,OAAOD,uBAAuB,CAAA,MAAA,EAAS;MACrCI,KAAK,EADgC,CAAA;MAErCC,MAAM,EAAE,iCAEDF,WAAW,CAAXA,MAAAA,CAAmBA,WAAW,CADnC,KACKA,CAFC;QAGJG,KAAK,EAAEA;MAHH;IAF6B,CAAT,CAA9B;EASD;;EAED,OAAA,KAAA;AApBF,CAAA;;AA2BA,eAAe,SAAA,cAAA,GAA0B;EACvC,IAAMJ,UAAU,GAAGK,KAAK,CAALA,UAAAA,CAAnB,wBAAmBA,CAAnB;EACA,IAAMC,OAAO,GAAGD,KAAK,CAALA,UAAAA,CAAhB,cAAgBA,CAAhB;EAEA,IAAME,SAAS,GAAG,KAAK,CAAL,WAAA,CAChB,UAAA,IAAA,EAAA,MAAA,EAAmC;IACjC,IAAQC,OAAR,GAAA,OAAA,CAAQA,OAAR;;IAEA,IAAI,CAAA,OAAO,KAAP,IAAA,IAAA,OAAO,KAAA,KAAP,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAP,OAAA,MAAJ,KAAA,EAAgC;MAC9B,OAAA,SAAA;IACD;;IAED,IAAMJ,KAAK,GAAGJ,UAAU,GACpBF,uBAAuB,CAAA,UAAA,EAAa;MAClCI,KAAK,EAD6B,CAAA;MAElCC,MAAM,EAAE,CAAC;QAAEM,IAAF,EAAEA,IAAF;QAAQC,MAAAA,EAAAA;MAAR,CAAD;IAF0B,CAAb,CADH,GAOpB;MACER,KAAK,EADP,CAAA;MAEEC,MAAM,EAAE,CAAC;QAAEM,IAAF,EAAEA,IAAF;QAAQC,MAAAA,EAAAA;MAAR,CAAD;IAFV,CAPJ;IAYA,IAAMC,IAAI,GAAGH,OAAO,KAAPA,IAAAA,IAAAA,OAAO,KAAA,KAAPA,CAAAA,IAAAA,OAAO,CAAPA,gBAAAA,GACTA,OAAO,CAAPA,gBAAAA,CAAAA,KAAAA,EAAgCA,OAAhCA,KAAAA,IAAgCA,IAAAA,OAAhCA,KAAAA,KAAAA,CAAgCA,GAAhCA,KAAAA,CAAgCA,GAAAA,OAAO,CAD9BA,MACTA,CADSA,GAETI,gBAAgB,CAAA,KAAA,EAAQJ,OAAR,KAAA,IAAQA,IAAAA,OAAR,KAAA,KAAA,CAAQA,GAAR,KAAA,CAAQA,GAAAA,OAAO,CAFnC,MAEoB,CAFpB;IAIA,OAAA,IAAA;EAxBc,CAAA,EA0BhB,CAAA,OAAA,EA1BF,UA0BE,CA1BgB,CAAlB;EA6BA,OAAA,SAAA;AACD","sourcesContent":["import {\n  getPathFromState,\n  NavigationHelpers,\n  NavigationHelpersContext,\n  NavigationProp,\n  ParamListBase,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\n\ntype NavigationObject =\n  | NavigationHelpers<ParamListBase>\n  | NavigationProp<ParamListBase>;\n\ntype MinimalState = {\n  index: number;\n  routes: { name: string; params?: object; state?: MinimalState }[];\n};\n\nconst getRootStateForNavigate = (\n  navigation: NavigationObject,\n  state: MinimalState\n): MinimalState => {\n  const parent = navigation.getParent();\n\n  if (parent) {\n    const parentState = parent.getState();\n\n    return getRootStateForNavigate(parent, {\n      index: 0,\n      routes: [\n        {\n          ...parentState.routes[parentState.index],\n          state: state,\n        },\n      ],\n    });\n  }\n\n  return state;\n};\n\n/**\n * Build destination link for a navigate action.\n * Useful for showing anchor tags on the web for buttons that perform navigation.\n */\nexport default function useLinkBuilder() {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linking = React.useContext(LinkingContext);\n\n  const buildLink = React.useCallback(\n    (name: string, params?: object) => {\n      const { options } = linking;\n\n      if (options?.enabled === false) {\n        return undefined;\n      }\n\n      const state = navigation\n        ? getRootStateForNavigate(navigation, {\n            index: 0,\n            routes: [{ name, params }],\n          })\n        : // If we couldn't find a navigation object in context, we're at root\n          // So we'll construct a basic state object to use\n          {\n            index: 0,\n            routes: [{ name, params }],\n          };\n\n      const path = options?.getPathFromState\n        ? options.getPathFromState(state, options?.config)\n        : getPathFromState(state, options?.config);\n\n      return path;\n    },\n    [linking, navigation]\n  );\n\n  return buildLink;\n}\n"]},"metadata":{},"sourceType":"module"}