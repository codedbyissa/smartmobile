{"version":3,"file":"index.js","sources":["../../src/subscribable.ts","../../src/utils.ts","../../src/focusManager.ts","../../src/onlineManager.ts","../../src/retryer.ts","../../src/logger.ts","../../src/notifyManager.ts","../../src/removable.ts","../../src/query.ts","../../src/queryCache.ts","../../src/mutation.ts","../../src/mutationCache.ts","../../src/infiniteQueryBehavior.ts","../../src/queryClient.ts","../../src/queryObserver.ts","../../src/queriesObserver.ts","../../src/infiniteQueryObserver.ts","../../src/mutationObserver.ts","../../src/hydration.ts"],"sourcesContent":["type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: TListener[]\n\n  constructor() {\n    this.listeners = []\n    this.subscribe = this.subscribe.bind(this)\n  }\n\n  subscribe(listener: TListener): () => void {\n    this.listeners.push(listener as TListener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners = this.listeners.filter((x) => x !== listener)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.length > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","import type { Mutation } from './mutation'\nimport type { Query } from './query'\nimport type {\n  FetchStatus,\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Filter to active queries, inactive queries or all queries\n   */\n  type?: QueryTypeFilter\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include queries matching their fetchStatus\n   */\n  fetchStatus?: FetchStatus\n}\n\nexport interface MutationFilters {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (mutation: Mutation<any, any, any>) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Include or exclude fetching mutations\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\nexport type QueryTypeFilter = 'all' | 'active' | 'inactive'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput,\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: unknown): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter((x) => array2.indexOf(x) === -1)\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<\n  TOptions extends QueryOptions<any, any, any, TQueryKey>,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | TOptions,\n  arg2?: QueryFunction<any, TQueryKey> | TOptions,\n  arg3?: TOptions,\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>,\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions,\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown,\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions,\n): [TFilters, TOptions | undefined] {\n  return (\n    isQueryKey(arg1) ? [{ ...arg2, queryKey: arg1 }, arg3] : [arg1 || {}, arg2]\n  ) as [TFilters, TOptions]\n}\n\nexport function parseMutationFilterArgs<\n  TFilters extends MutationFilters,\n  TOptions = unknown,\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions,\n): [TFilters, TOptions | undefined] {\n  return (\n    isQueryKey(arg1)\n      ? [{ ...arg2, mutationKey: arg1 }, arg3]\n      : [arg1 || {}, arg2]\n  ) as [TFilters, TOptions]\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>,\n): boolean {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive()\n    if (type === 'active' && !isActive) {\n      return false\n    }\n    if (type === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (\n    typeof fetchStatus !== 'undefined' &&\n    fetchStatus !== query.state.fetchStatus\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>,\n): boolean {\n  const { exact, fetching, predicate, mutationKey } = filters\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (\n        hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)\n      ) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (\n    typeof fetching === 'boolean' &&\n    (mutation.state.status === 'loading') !== fetching\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: QueryOptions<any, any, any, TQueryKey>,\n): string {\n  const hashFn = options?.queryKeyHashFn || hashQueryKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query keys hash function.\n * Hashes the value into a stable hash.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  return JSON.stringify(queryKey, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val,\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean {\n  return partialDeepEqual(a, b)\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some((key) => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function isPlainArray(value: unknown) {\n  return Array.isArray(value) && value.length === Object.keys(value).length\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: unknown): value is QueryKey {\n  return Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeout)\n  })\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void) {\n  sleep(0).then(callback)\n}\n\nexport function getAbortController(): AbortController | undefined {\n  if (typeof AbortController === 'function') {\n    return new AbortController()\n  }\n}\n\nexport function replaceData<\n  TData,\n  TOptions extends QueryOptions<any, any, any, any>,\n>(prevData: TData | undefined, data: TData, options: TOptions): TData {\n  // Use prev data if an isDataEqual function is defined and returns `true`\n  if (options.isDataEqual?.(prevData, data)) {\n    return prevData as TData\n  } else if (options.structuralSharing !== false) {\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data)\n  }\n  return data\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void,\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable {\n  private focused?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = (onFocus) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', listener, false)\n        window.addEventListener('focus', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n          window.removeEventListener('focus', listener)\n        }\n      }\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((focused) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    this.focused = focused\n\n    if (focused) {\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach((listener) => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState,\n    )\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setOnline: (online?: boolean) => void,\n) => (() => void) | undefined\n\nexport class OnlineManager extends Subscribable {\n  private online?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = (onOnline) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline()\n        // Listen to online\n        window.addEventListener('online', listener, false)\n        window.addEventListener('offline', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener)\n          window.removeEventListener('offline', listener)\n        }\n      }\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach((listener) => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { sleep } from './utils'\nimport { CancelOptions, NetworkMode } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => void\n  cancelRetry: () => void\n  continueRetry: () => void\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError> = (\n  failureCount: number,\n  error: TError,\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError,\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = unknown>(\n  config: RetryerConfig<TData, TError>,\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let isResolved = false\n  let continueFn: ((value?: unknown) => void) | undefined\n  let promiseResolve: (data: TData) => void\n  let promiseReject: (error: TError) => void\n\n  const promise = new Promise<TData>((outerResolve, outerReject) => {\n    promiseResolve = outerResolve\n    promiseReject = outerReject\n  })\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions))\n\n      config.abort?.()\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const shouldPause = () =>\n    !focusManager.isFocused() ||\n    (config.networkMode !== 'always' && !onlineManager.isOnline())\n\n  const resolve = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onSuccess?.(value)\n      continueFn?.()\n      promiseResolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onError?.(value)\n      continueFn?.()\n      promiseReject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise((continueResolve) => {\n      continueFn = (value) => {\n        if (isResolved || !shouldPause()) {\n          return continueResolve(value)\n        }\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // Execute query\n    try {\n      promiseOrValue = config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch((error) => {\n        // Stop if the fetch is already resolved\n        if (isResolved) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? 3\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            if (shouldPause()) {\n              return pause()\n            }\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  // Start loop\n  if (canFetch(config.networkMode)) {\n    run()\n  } else {\n    pause().then(run)\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      continueFn?.()\n    },\n    cancelRetry,\n    continueRetry,\n  }\n}\n","export interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\nexport const defaultLogger: Logger = console\n","import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\nexport function createNotifyManager() {\n  let queue: NotifyCallback[] = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n\n  const batch = <T>(callback: () => T): T => {\n    let result\n    transactions++\n    try {\n      result = callback()\n    } finally {\n      transactions--\n      if (!transactions) {\n        flush()\n      }\n    }\n    return result\n  }\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  const batchCalls = <T extends Function>(callback: T): T => {\n    return ((...args: any[]) => {\n      schedule(() => {\n        callback(...args)\n      })\n    }) as any\n  }\n\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  const setNotifyFunction = (fn: NotifyFunction) => {\n    notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  const setBatchNotifyFunction = (fn: BatchNotifyFunction) => {\n    batchNotifyFn = fn\n  }\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction,\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n","import { isServer, isValidTimeout } from './utils'\n\nexport abstract class Removable {\n  cacheTime!: number\n  private gcTimeout?: ReturnType<typeof setTimeout>\n\n  destroy(): void {\n    this.clearGcTimeout()\n  }\n\n  protected scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  protected updateCacheTime(newCacheTime: number | undefined): void {\n    // Default to 5 minutes (Infinity for server-side) if no cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      newCacheTime ?? (isServer ? Infinity : 5 * 60 * 1000),\n    )\n  }\n\n  protected clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout)\n      this.gcTimeout = undefined\n    }\n  }\n\n  protected abstract optionalRemove(): void\n}\n","import { getAbortController, noop, replaceData, timeUntilStale } from './utils'\nimport type {\n  InitialDataFunction,\n  QueryKey,\n  QueryOptions,\n  QueryStatus,\n  QueryFunctionContext,\n  QueryMeta,\n  CancelOptions,\n  SetDataOptions,\n  FetchStatus,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport { defaultLogger, Logger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Retryer, isCancelledError, canFetch, createRetryer } from './retryer'\nimport { Removable } from './removable'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  logger?: Logger\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchMeta: any\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal?: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n  ) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: QueryState<TData, TError>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  initialState: QueryState<TData, TError>\n  revertState?: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n  isFetchingOptimistic?: boolean\n\n  private cache: QueryCache\n  private logger: Logger\n  private promise?: Promise<TData>\n  private retryer?: Retryer<TData>\n  private observers: QueryObserver<any, any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  private abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.abortSignalConsumed = false\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.logger = config.logger || defaultLogger\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || getDefaultState(this.options)\n    this.state = this.initialState\n    this.meta = config.meta\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    this.meta = options?.meta\n\n    this.updateCacheTime(this.options.cacheTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean },\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: QueryState<TData, TError>,\n    setStateOptions?: SetStateOptions,\n  ): void {\n    this.dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some((observer) => observer.options.enabled !== false)\n  }\n\n  isDisabled(): boolean {\n    return this.getObserversCount() > 0 && !this.isActive()\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some((observer) => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter((x) => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.abortSignalConsumed) {\n            this.retryer.cancel({ revert: true })\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions,\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.retryer?.continueRetry()\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (!Array.isArray(this.options.queryKey)) {\n      if (process.env.NODE_ENV !== 'production') {\n        this.logger.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`,\n        )\n      }\n    }\n\n    const abortController = getAbortController()\n\n    // Create query function context\n    const queryFnContext: QueryFunctionContext<TQueryKey> = {\n      queryKey: this.queryKey,\n      pageParam: undefined,\n      meta: this.meta,\n    }\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          if (abortController) {\n            this.abortSignalConsumed = true\n            return abortController.signal\n          }\n          return undefined\n        },\n      })\n    }\n\n    addSignalProperty(queryFnContext)\n\n    // Create fetch function\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject('Missing queryFn')\n      }\n      this.abortSignalConsumed = false\n      return this.options.queryFn(queryFnContext)\n    }\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData, TQueryKey> = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn,\n      meta: this.meta,\n    }\n\n    addSignalProperty(context)\n\n    this.options.behavior?.onFetch(context)\n\n    // Store state in case the current fetch needs to be reverted\n    this.revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.cache.config.onError?.(error, this as Query<any, any, any, any>)\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      }\n      this.isFetchingOptimistic = false\n    }\n\n    // Try to fetch the data\n    this.retryer = createRetryer({\n      fn: context.fetchFn as () => TData,\n      abort: abortController?.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (typeof data === 'undefined') {\n          onError(new Error('Query data cannot be undefined') as any)\n          return\n        }\n\n        this.setData(data as TData)\n\n        // Notify cache callback\n        this.cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc()\n        }\n        this.isFetchingOptimistic = false\n      },\n      onError,\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n    })\n\n    this.promise = this.retryer.promise\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>,\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: state.fetchFailureCount + 1,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            fetchFailureCount: 0,\n            fetchMeta: action.meta ?? null,\n            fetchStatus: canFetch(this.options.networkMode)\n              ? 'fetching'\n              : 'paused',\n            ...(!state.dataUpdatedAt && {\n              error: null,\n              status: 'loading',\n            }),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n            }),\n          }\n        case 'error':\n          const error = action.error as unknown\n\n          if (isCancelledError(error) && error.revert && this.revertState) {\n            return { ...this.revertState }\n          }\n\n          return {\n            ...state,\n            error: error as TError,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasInitialData = typeof options.initialData !== 'undefined'\n\n  const initialDataUpdatedAt = hasInitialData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  const hasData = typeof data !== 'undefined'\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'loading',\n    fetchStatus: 'idle',\n  }\n}\n","import {\n  QueryFilters,\n  hashQueryKeyByOptions,\n  matchQuery,\n  parseFilterArgs,\n} from './utils'\nimport { Action, Query, QueryState } from './query'\nimport type { QueryKey, QueryOptions } from './types'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryAdded {\n  type: 'added'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved {\n  type: 'removed'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated {\n  type: 'updated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventQueryObserverAdded {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverRemoved {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverResultsUpdated {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ntype QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventQueryObserverAdded\n  | NotifyEventQueryObserverRemoved\n  | NotifyEventQueryObserverResultsUpdated\n\ntype QueryCacheListener = (event: QueryCacheNotifyEvent) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any, any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData, TQueryKey extends QueryKey>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    state?: QueryState<TData, TError>,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey!\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n        meta: options.meta,\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify({\n        type: 'added',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter((x) => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify({ type: 'removed', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueyKey extends QueryKey = QueryKey,\n  >(\n    queryHash: string,\n  ): Query<TQueryFnData, TError, TData, TQueyKey> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters,\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find((query) => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return Object.keys(filters).length > 0\n      ? this.queries.filter((query) => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(event: QueryCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach((query) => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import type { MutationOptions, MutationStatus, MutationMeta } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport { defaultLogger, Logger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport { canFetch, Retryer, createRetryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  logger?: Logger\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n  meta?: MutationMeta\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n  meta: MutationMeta | undefined\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private logger: Logger\n  private retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.logger = config.logger || defaultLogger\n    this.observers = []\n    this.state = config.state || getDefaultState()\n    this.meta = config.meta\n\n    this.updateCacheTime(this.options.cacheTime)\n    this.scheduleGc()\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc()\n      } else {\n        this.mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<TData> {\n    if (this.retryer) {\n      this.retryer.continue()\n      return this.retryer.promise\n    }\n    return this.execute()\n  }\n\n  async execute(): Promise<TData> {\n    const executeMutation = () => {\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found')\n          }\n          return this.options.mutationFn(this.state.variables!)\n        },\n        onFail: () => {\n          this.dispatch({ type: 'failed' })\n        },\n        onPause: () => {\n          this.dispatch({ type: 'pause' })\n        },\n        onContinue: () => {\n          this.dispatch({ type: 'continue' })\n        },\n        retry: this.options.retry ?? 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode,\n      })\n\n      return this.retryer.promise\n    }\n\n    const restored = this.state.status === 'loading'\n    try {\n      if (!restored) {\n        this.dispatch({ type: 'loading', variables: this.options.variables! })\n        // Notify cache callback\n        this.mutationCache.config.onMutate?.(\n          this.state.variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(this.state.variables!)\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables,\n          })\n        }\n      }\n      const data = await executeMutation()\n\n      // Notify cache callback\n      this.mutationCache.config.onSuccess?.(\n        data,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(\n        data,\n        this.state.variables!,\n        this.state.context!,\n      )\n\n      await this.options.onSettled?.(\n        data,\n        null,\n        this.state.variables!,\n        this.state.context,\n      )\n\n      this.dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        this.mutationCache.config.onError?.(\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n\n        await this.options.onError?.(\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.dispatch({ type: 'error', error: error as TError })\n      }\n    }\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: state.failureCount + 1,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'loading':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            isPaused: false,\n            status: 'error',\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n","import { MutationObserver } from './mutationObserver'\nimport type { MutationOptions } from './types'\nimport type { QueryClient } from './queryClient'\nimport { notifyManager } from './notifyManager'\nimport { Action, Mutation, MutationState } from './mutation'\nimport { matchMutation, MutationFilters, noop } from './utils'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => void\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => void\n  onMutate?: (\n    variables: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>,\n  ) => void\n}\n\ninterface NotifyEventMutationAdded {\n  type: 'added'\n  mutation: Mutation<any, any, any, any>\n}\ninterface NotifyEventMutationRemoved {\n  type: 'removed'\n  mutation: Mutation<any, any, any, any>\n}\n\ninterface NotifyEventMutationObserverAdded {\n  type: 'observerAdded'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverRemoved {\n  type: 'observerRemoved'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationUpdated {\n  type: 'updated'\n  mutation: Mutation<any, any, any, any>\n  action: Action<any, any, any, any>\n}\n\ntype MutationCacheNotifyEvent =\n  | NotifyEventMutationAdded\n  | NotifyEventMutationRemoved\n  | NotifyEventMutationObserverAdded\n  | NotifyEventMutationObserverRemoved\n  | NotifyEventMutationUpdated\n\ntype MutationCacheListener = (event: MutationCacheNotifyEvent) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  config: MutationCacheConfig\n\n  private mutations: Mutation<any, any, any, any>[]\n  private mutationId: number\n\n  constructor(config?: MutationCacheConfig) {\n    super()\n    this.config = config || {}\n    this.mutations = []\n    this.mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>,\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      logger: client.getLogger(),\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey\n        ? client.getMutationDefaults(options.mutationKey)\n        : undefined,\n      meta: options.meta,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.mutations.push(mutation)\n    this.notify({ type: 'added', mutation })\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.mutations = this.mutations.filter((x) => x !== mutation)\n    this.notify({ type: 'removed', mutation })\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.mutations.forEach((mutation) => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Mutation[] {\n    return this.mutations\n  }\n\n  find<TData = unknown, TError = unknown, TVariables = any, TContext = unknown>(\n    filters: MutationFilters,\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.mutations.find((mutation) => matchMutation(filters, mutation))\n  }\n\n  findAll(filters: MutationFilters): Mutation[] {\n    return this.mutations.filter((mutation) => matchMutation(filters, mutation))\n  }\n\n  notify(event: MutationCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  resumePausedMutations(): Promise<void> {\n    const pausedMutations = this.mutations.filter((x) => x.state.isPaused)\n    return notifyManager.batch(() =>\n      pausedMutations.reduce(\n        (promise, mutation) =>\n          promise.then(() => mutation.continue().catch(noop)),\n        Promise.resolve(),\n      ),\n    )\n  }\n}\n","import type { QueryBehavior } from './query'\n\nimport type {\n  InfiniteData,\n  QueryFunctionContext,\n  QueryOptions,\n  RefetchQueryFilters,\n} from './types'\n\nexport function infiniteQueryBehavior<\n  TQueryFnData,\n  TError,\n  TData,\n>(): QueryBehavior<TQueryFnData, TError, InfiniteData<TData>> {\n  return {\n    onFetch: (context) => {\n      context.fetchFn = () => {\n        const refetchPage: RefetchQueryFilters['refetchPage'] | undefined =\n          context.fetchOptions?.meta?.refetchPage\n        const fetchMore = context.fetchOptions?.meta?.fetchMore\n        const pageParam = fetchMore?.pageParam\n        const isFetchingNextPage = fetchMore?.direction === 'forward'\n        const isFetchingPreviousPage = fetchMore?.direction === 'backward'\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        let newPageParams = oldPageParams\n        let cancelled = false\n\n        const addSignalProperty = (object: unknown) => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              if (context.signal?.aborted) {\n                cancelled = true\n              } else {\n                context.signal?.addEventListener('abort', () => {\n                  cancelled = true\n                })\n              }\n              return context.signal\n            },\n          })\n        }\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn || (() => Promise.reject('Missing queryFn'))\n\n        const buildNewPages = (\n          pages: unknown[],\n          param: unknown,\n          page: unknown,\n          previous?: boolean,\n        ) => {\n          newPageParams = previous\n            ? [param, ...newPageParams]\n            : [...newPageParams, param]\n          return previous ? [page, ...pages] : [...pages, page]\n        }\n\n        // Create function to fetch a page\n        const fetchPage = (\n          pages: unknown[],\n          manual?: boolean,\n          param?: unknown,\n          previous?: boolean,\n        ): Promise<unknown[]> => {\n          if (cancelled) {\n            return Promise.reject('Cancelled')\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages)\n          }\n\n          const queryFnContext: QueryFunctionContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            meta: context.meta,\n          }\n\n          addSignalProperty(queryFnContext)\n\n          const queryFnResult = queryFn(queryFnContext)\n\n          const promise = Promise.resolve(queryFnResult).then((page) =>\n            buildNewPages(pages, param, page, previous),\n          )\n\n          return promise\n        }\n\n        let promise: Promise<unknown[]>\n\n        // Fetch first page?\n        if (!oldPages.length) {\n          promise = fetchPage([])\n        }\n\n        // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getNextPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param)\n        }\n\n        // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getPreviousPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param, true)\n        }\n\n        // Refetch pages\n        else {\n          newPageParams = []\n\n          const manual = typeof context.options.getNextPageParam === 'undefined'\n\n          const shouldFetchFirstPage =\n            refetchPage && oldPages[0]\n              ? refetchPage(oldPages[0], 0, oldPages)\n              : true\n\n          // Fetch first page\n          promise = shouldFetchFirstPage\n            ? fetchPage([], manual, oldPageParams[0])\n            : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]))\n\n          // Fetch remaining pages\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then((pages) => {\n              const shouldFetchNextPage =\n                refetchPage && oldPages[i]\n                  ? refetchPage(oldPages[i], i, oldPages)\n                  : true\n\n              if (shouldFetchNextPage) {\n                const param = manual\n                  ? oldPageParams[i]\n                  : getNextPageParam(context.options, pages)\n                return fetchPage(pages, manual, param)\n              }\n              return Promise.resolve(\n                buildNewPages(pages, oldPageParams[i], oldPages[i]),\n              )\n            })\n          }\n        }\n\n        const finalPromise = promise.then((pages) => ({\n          pages,\n          pageParams: newPageParams,\n        }))\n\n        return finalPromise\n      }\n    },\n  }\n}\n\nexport function getNextPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[],\n): unknown | undefined {\n  return options.getNextPageParam?.(pages[pages.length - 1], pages)\n}\n\nexport function getPreviousPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[],\n): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages)\n}\n\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasNextPage(\n  options: QueryOptions<any, any, any, any>,\n  pages?: unknown,\n): boolean | undefined {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages)\n    return (\n      typeof nextPageParam !== 'undefined' &&\n      nextPageParam !== null &&\n      nextPageParam !== false\n    )\n  }\n}\n\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasPreviousPage(\n  options: QueryOptions<any, any, any, any>,\n  pages?: unknown,\n): boolean | undefined {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages)\n    return (\n      typeof previousPageParam !== 'undefined' &&\n      previousPageParam !== null &&\n      previousPageParam !== false\n    )\n  }\n}\n","import {\n  QueryFilters,\n  Updater,\n  hashQueryKey,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n  hashQueryKeyByOptions,\n  MutationFilters,\n  functionalUpdate,\n} from './utils'\nimport type {\n  QueryClientConfig,\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  ResetQueryFilters,\n  SetDataOptions,\n} from './types'\nimport type { QueryState } from './query'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport { CancelOptions, DefaultedQueryObserverOptions } from './types'\nimport { defaultLogger, Logger } from './logger'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private logger: Logger\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.logger = config.logger || defaultLogger\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n  }\n\n  mount(): void {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.unsubscribeFocus?.()\n    this.unsubscribeOnline?.()\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetchStatus = 'fetching'\n    return this.queryCache.findAll(filters).length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.mutationCache.findAll({ ...filters, fetching: true }).length\n  }\n\n  getQueryData<TData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters,\n  ): TData | undefined {\n    return this.queryCache.find<TData>(queryKey, filters)?.state.data\n  }\n\n  getQueriesData<TData = unknown>(queryKey: QueryKey): [QueryKey, TData][]\n  getQueriesData<TData = unknown>(filters: QueryFilters): [QueryKey, TData][]\n  getQueriesData<TData = unknown>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n  ): [QueryKey, TData][] {\n    return this.getQueryCache()\n      .findAll(queryKeyOrFilters)\n      .map(({ queryKey, state }) => {\n        const data = state.data as TData\n        return [queryKey, data]\n      })\n  }\n\n  setQueryData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: SetDataOptions,\n  ): TData | undefined {\n    const query = this.queryCache.find<TData>(queryKey)\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (typeof data === 'undefined') {\n      return undefined\n    }\n\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: SetDataOptions,\n  ): [QueryKey, TData | undefined][]\n\n  setQueriesData<TData>(\n    filters: QueryFilters,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: SetDataOptions,\n  ): [QueryKey, TData | undefined][]\n\n  setQueriesData<TData>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n    updater: Updater<TData | undefined, TData | undefined>,\n    options?: SetDataOptions,\n  ): [QueryKey, TData | undefined][] {\n    return notifyManager.batch(() =>\n      this.getQueryCache()\n        .findAll(queryKeyOrFilters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TData>(queryKey, updater, options),\n        ]),\n    )\n  }\n\n  getQueryState<TData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters,\n  ): QueryState<TData, TError> | undefined {\n    return this.queryCache.find<TData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries<TPageData = unknown>(\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions,\n  ): Promise<void>\n  resetQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions,\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | ResetQueryFilters,\n    arg2?: ResetQueryFilters | ResetOptions,\n    arg3?: ResetOptions,\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      type: 'active',\n      ...filters,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions,\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions,\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache\n        .findAll(filters)\n        .map((query) => query.cancel(cancelOptions)),\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries<TPageData = unknown>(\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions,\n  ): Promise<void>\n  invalidateQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions,\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions,\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach((query) => {\n        query.invalidate()\n      })\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      const refetchFilters: RefetchQueryFilters = {\n        ...filters,\n        type: filters.refetchType ?? filters.type ?? 'active',\n      }\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries<TPageData = unknown>(\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions,\n  ): Promise<void>\n  refetchQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions,\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | RefetchQueryFilters,\n    arg2?: RefetchQueryFilters | RefetchOptions,\n    arg3?: RefetchOptions,\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache\n        .findAll(filters)\n        .filter((query) => !query.isDisabled())\n        .map((query) =>\n          query.fetch(undefined, {\n            ...options,\n            cancelRefetch: options?.cancelRefetch ?? true,\n            meta: { refetchPage: filters.refetchPage },\n          }),\n        ),\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  resumePausedMutations(): Promise<void> {\n    return this.mutationCache.resumePausedMutations()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getLogger(): Logger {\n    return this.logger\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<unknown, any, any, any>,\n  ): void {\n    const result = this.queryDefaults.find(\n      (x) => hashQueryKey(queryKey) === hashQueryKey(x.queryKey),\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey,\n  ): QueryObserverOptions<any, any, any, any, any> | undefined {\n    if (!queryKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.queryDefaults.find((x) =>\n      partialMatchKey(queryKey, x.queryKey),\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter((x) =>\n        partialMatchKey(queryKey, x.queryKey),\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(\n            `[QueryClient] Several query defaults match with key '${JSON.stringify(\n              queryKey,\n            )}'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.`,\n          )\n        }\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>,\n  ): void {\n    const result = this.mutationDefaults.find(\n      (x) => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey),\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey,\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    if (!mutationKey) {\n      return undefined\n    }\n\n    // Get the first matching defaults\n    const firstMatchingDefaults = this.mutationDefaults.find((x) =>\n      partialMatchKey(mutationKey, x.mutationKey),\n    )\n\n    // Additional checks and error in dev mode\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter((x) =>\n        partialMatchKey(mutationKey, x.mutationKey),\n      )\n      // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n      if (matchingDefaults.length > 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(\n            `[QueryClient] Several mutation defaults match with key '${JSON.stringify(\n              mutationKey,\n            )}'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.`,\n          )\n        }\n      }\n    }\n\n    return firstMatchingDefaults?.defaultOptions\n  }\n\n  defaultQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey,\n  >(\n    options?:\n      | QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey>\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >,\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options?._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions,\n      )\n    }\n\n    // dependent default values\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T,\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n","import { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: TError | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    return this.createResult(query, options)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdateCount &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          this.selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            placeholderData = replaceData(\n              prevResult?.data,\n              placeholderData,\n              options,\n            )\n            this.selectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            this.selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = placeholderData as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching: isFetching,\n      isRefetching: isFetching && status !== 'loading',\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n\n      if (\n        notifyOnChangeProps === 'all' ||\n        (!notifyOnChangeProps && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(notifyOnChangeProps ?? this.trackedProps)\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n","import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  QueryObserverOptions,\n  QueryObserverResult,\n  DefaultedQueryObserverOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport { NotifyOptions, QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.queries = queries\n\n    notifyManager.batch(() => {\n      const prevObservers = this.observers\n\n      const newObserverMatches = this.findMatchingObservers(this.queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newObserversMap = Object.fromEntries(\n        newObservers.map((observer) => [observer.options.queryHash, observer]),\n      )\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return this.findMatchingObservers(queries).map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n  }\n\n  private findMatchingObservers(\n    queries: QueryObserverOptions[],\n  ): QueryObserverMatch[] {\n    const prevObservers = this.observers\n    const defaultedQueryOptions = queries.map((options) =>\n      this.client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: QueryObserverMatch[] =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObservers.find(\n          (observer) =>\n            observer.options.queryHash === defaultedOptions.queryHash,\n        )\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = matchingObservers.map(\n      (match) => match.defaultedQueryOptions.queryHash,\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) =>\n        !matchedQueryHashes.includes(defaultedOptions.queryHash),\n    )\n\n    const unmatchedObservers = prevObservers.filter(\n      (prevObserver) =>\n        !matchingObservers.some((match) => match.observer === prevObserver),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.client.defaultQueryOptions(options)\n      const currentObserver = this.observersMap[defaultedOptions.queryHash!]\n      return currentObserver ?? new QueryObserver(this.client, defaultedOptions)\n    }\n\n    const newOrReusedObservers: QueryObserverMatch[] = unmatchedQueries.map(\n      (options, index) => {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          const previouslyUsedObserver = unmatchedObservers[index]\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver,\n            }\n          }\n        }\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      },\n    )\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(this.result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n","import type {\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport {\n  NotifyOptions,\n  ObserverFetchOptions,\n  QueryObserver,\n} from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>,\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>,\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions: ObserverFetchOptions,\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions,\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage({ pageParam, ...options }: FetchNextPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage({\n    pageParam,\n    ...options\n  }: FetchPreviousPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>, TQueryKey>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(options, state.data?.pages),\n      isFetchingNextPage:\n        state.fetchStatus === 'fetching' &&\n        state.fetchMeta?.fetchMore?.direction === 'forward',\n      isFetchingPreviousPage:\n        state.fetchStatus === 'fetching' &&\n        state.fetchMeta?.fetchMore?.direction === 'backward',\n    }\n  }\n}\n","import { Action, getDefaultState, Mutation } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    this.options = this.client.defaultMutationOptions(options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","import type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type {\n  MutationKey,\n  MutationOptions,\n  QueryKey,\n  QueryOptions,\n} from './types'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  dehydrateMutations?: boolean\n  dehydrateQueries?: boolean\n  shouldDehydrateMutation?: ShouldDehydrateMutationFunction\n  shouldDehydrateQuery?: ShouldDehydrateQueryFunction\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n}\n\nexport interface DehydratedState {\n  mutations: DehydratedMutation[]\n  queries: DehydratedQuery[]\n}\n\nexport type ShouldDehydrateQueryFunction = (query: Query) => boolean\n\nexport type ShouldDehydrateMutationFunction = (mutation: Mutation) => boolean\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n  }\n}\n\nfunction defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nfunction defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {},\n): DehydratedState {\n  const mutations: DehydratedMutation[] = []\n  const queries: DehydratedQuery[] = []\n\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation =\n      options.shouldDehydrateMutation || defaultShouldDehydrateMutation\n\n    client\n      .getMutationCache()\n      .getAll()\n      .forEach((mutation) => {\n        if (shouldDehydrateMutation(mutation)) {\n          mutations.push(dehydrateMutation(mutation))\n        }\n      })\n  }\n\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery =\n      options.shouldDehydrateQuery || defaultShouldDehydrateQuery\n\n    client\n      .getQueryCache()\n      .getAll()\n      .forEach((query) => {\n        if (shouldDehydrateQuery(query)) {\n          queries.push(dehydrateQuery(query))\n        }\n      })\n  }\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions,\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach((dehydratedMutation) => {\n    mutationCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.mutations,\n        mutationKey: dehydratedMutation.mutationKey,\n      },\n      dehydratedMutation.state,\n    )\n  })\n\n  queries.forEach((dehydratedQuery) => {\n    const query = queryCache.get(dehydratedQuery.queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state)\n      }\n      return\n    }\n\n    // Restore query\n    queryCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.queries,\n        queryKey: dehydratedQuery.queryKey,\n        queryHash: dehydratedQuery.queryHash,\n      },\n      dehydratedQuery.state,\n    )\n  })\n}\n"],"names":["Subscribable","constructor","listeners","subscribe","bind","listener","push","onSubscribe","filter","x","onUnsubscribe","hasListeners","length","isServer","window","noop","undefined","functionalUpdate","updater","input","isValidTimeout","value","Infinity","difference","array1","array2","indexOf","replaceAt","array","index","copy","slice","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseMutationArgs","mutationKey","mutationFn","parseFilterArgs","parseMutationFilterArgs","matchQuery","filters","query","type","exact","fetchStatus","predicate","stale","queryHash","hashQueryKeyByOptions","options","partialMatchKey","isActive","isStale","state","matchMutation","mutation","fetching","hashQueryKey","status","hashFn","queryKeyHashFn","JSON","stringify","_","val","isPlainObject","Object","keys","sort","reduce","result","key","a","b","partialDeepEqual","some","replaceEqualDeep","isPlainArray","aSize","bItems","bSize","equalItems","i","shallowEqualObjects","Array","isArray","o","hasObjectPrototype","ctor","prot","prototype","hasOwnProperty","toString","call","isError","Error","sleep","timeout","Promise","resolve","setTimeout","scheduleMicrotask","callback","then","getAbortController","AbortController","replaceData","prevData","data","isDataEqual","structuralSharing","FocusManager","setup","onFocus","addEventListener","removeEventListener","cleanup","setEventListener","focused","setFocused","forEach","isFocused","document","includes","visibilityState","focusManager","OnlineManager","onOnline","online","setOnline","isOnline","navigator","onLine","onlineManager","defaultRetryDelay","failureCount","min","canFetch","networkMode","CancelledError","revert","silent","isCancelledError","createRetryer","config","isRetryCancelled","isResolved","continueFn","promiseResolve","promiseReject","promise","outerResolve","outerReject","cancel","cancelOptions","reject","abort","cancelRetry","continueRetry","shouldPause","onSuccess","onError","pause","continueResolve","onPause","onContinue","run","promiseOrValue","fn","error","catch","retry","retryDelay","delay","shouldRetry","onFail","continue","defaultLogger","console","createNotifyManager","queue","transactions","notifyFn","batchNotifyFn","batch","flush","schedule","batchCalls","args","originalQueue","setNotifyFunction","setBatchNotifyFunction","notifyManager","Removable","destroy","clearGcTimeout","scheduleGc","cacheTime","gcTimeout","optionalRemove","updateCacheTime","newCacheTime","clearTimeout","Query","abortSignalConsumed","defaultOptions","setOptions","observers","cache","logger","initialState","getDefaultState","meta","remove","setData","newData","dispatch","dataUpdatedAt","manual","setState","setStateOptions","retryer","reset","observer","enabled","isDisabled","getObserversCount","isInvalidated","getCurrentResult","isStaleByTime","find","shouldFetchOnWindowFocus","refetch","cancelRefetch","shouldFetchOnReconnect","addObserver","notify","removeObserver","invalidate","fetch","fetchOptions","process","env","NODE_ENV","abortController","queryFnContext","pageParam","addSignalProperty","object","defineProperty","enumerable","get","signal","fetchFn","context","behavior","onFetch","revertState","fetchMeta","isFetchingOptimistic","action","reducer","fetchFailureCount","dataUpdateCount","errorUpdateCount","errorUpdatedAt","onQueryUpdate","initialData","hasInitialData","initialDataUpdatedAt","hasData","QueryCache","queries","queriesMap","build","client","getLogger","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","event","Mutation","mutationId","mutationCache","execute","executeMutation","variables","restored","onMutate","onSettled","isPaused","onMutationUpdate","MutationCache","mutations","defaultMutationOptions","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","refetchPage","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","newPageParams","cancelled","aborted","buildNewPages","param","page","previous","fetchPage","queryFnResult","getNextPageParam","getPreviousPageParam","shouldFetchFirstPage","shouldFetchNextPage","finalPromise","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryClient","queryCache","queryDefaults","mutationDefaults","mount","unsubscribeFocus","unsubscribeOnline","unmount","isFetching","isMutating","getQueryData","getQueriesData","queryKeyOrFilters","getQueryCache","map","setQueryData","parsedOptions","defaultedOptions","setQueriesData","getQueryState","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","all","invalidateQueries","refetchType","throwOnError","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","getMutationCache","getDefaultOptions","setDefaultOptions","setQueryDefaults","firstMatchingDefaults","matchingDefaults","setMutationDefaults","_defaulted","refetchOnReconnect","useErrorBoundary","suspense","QueryObserver","trackedProps","Set","selectError","bindMethods","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","shouldFetchOn","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","notifyOptions","prevOptions","prevQuery","updateQuery","mounted","shouldFetchOptionally","updateResult","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","createResult","currentResult","trackResult","trackedResult","configurable","getCurrentQuery","fetchOptimistic","time","staleTimeoutId","refetchInterval","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","isSuccess","select","selectFn","selectResult","placeholderData","isLoading","isFetched","isFetchedAfterMount","isRefetching","isLoadingError","isRefetchError","nextResult","defaultNotifyOptions","shouldNotifyListeners","notifyOnChangeProps","size","includedProps","typedKey","changed","has","shouldLoadOnMount","retryOnMount","refetchOnMount","field","QueriesObserver","observersMap","setQueries","onUpdate","prevObservers","newObserverMatches","findMatchingObservers","match","defaultedQueryOptions","newObservers","newObserversMap","fromEntries","newResult","hasIndexChange","matchingObservers","flatMap","matchedQueryHashes","unmatchedQueries","unmatchedObservers","prevObserver","getObserver","currentObserver","newOrReusedObservers","previouslyUsedObserver","sortMatchesByOrderOfQueries","concat","InfiniteQueryObserver","fetchNextPage","fetchPreviousPage","MutationObserver","mutate","currentMutation","mutateOptions","isIdle","dehydrateMutation","dehydrateQuery","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","dehydrate","dehydrateMutations","shouldDehydrateMutation","dehydrateQueries","shouldDehydrateQuery","hydrate","dehydratedState","dehydratedMutation","dehydratedQuery"],"mappings":"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"}