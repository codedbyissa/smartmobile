var talkbackPlaceholder = e => {};

function start(e) {
  var r = [ e ];
  r.tag = 0;
  return r;
}

function push(e) {
  var r = [ e ];
  r.tag = 1;
  return r;
}

function fromArray(e) {
  return r => {
    var i = !1;
    var f = !1;
    var t = !1;
    var a = 0;
    r(start((s => {
      if (1 === s) {
        i = !0;
      } else if (f) {
        t = !0;
      } else {
        for (t = f = !0; t && !i; a++) {
          if (a < e.length) {
            t = !1;
            r(push(e[a]));
          } else {
            i = !0;
            r(0);
          }
        }
        f = !1;
      }
    })));
  };
}

function fromValue(e) {
  return r => {
    var i = !1;
    r(start((f => {
      if (1 === f) {
        i = !0;
      } else if (!i) {
        i = !0;
        r(push(e));
        r(0);
      }
    })));
  };
}

function make(e) {
  return r => {
    var i = !1;
    var f = e({
      next(e) {
        if (!i) {
          r(push(e));
        }
      },
      complete() {
        if (!i) {
          i = !0;
          r(0);
        }
      }
    });
    r(start((e => {
      if (1 === e && !i) {
        i = !0;
        f();
      }
    })));
  };
}

function makeSubject() {
  var e = [];
  var r = !1;
  return {
    source(r) {
      e.push(r);
      r(start((i => {
        if (1 === i) {
          var f = e.indexOf(r);
          if (f > -1) {
            (e = e.slice()).splice(f, 1);
          }
        }
      })));
    },
    next(i) {
      if (!r) {
        var f = push(i);
        for (var t = 0, a = e, s = e.length; t < s; t++) {
          a[t](f);
        }
      }
    },
    complete() {
      if (!r) {
        r = !0;
        for (var i = 0, f = e, t = e.length; i < t; i++) {
          f[i](0);
        }
      }
    }
  };
}

var empty = e => {
  var r = !1;
  e(start((i => {
    if (1 === i) {
      r = !0;
    } else if (!r) {
      r = !0;
      e(0);
    }
  })));
};

var never = e => {
  e(start(talkbackPlaceholder));
};

function interval(e) {
  return r => {
    var i = 0;
    var f = setInterval((() => {
      r(push(i++));
    }), e);
    r(start((e => {
      if (1 === e) {
        clearInterval(f);
      }
    })));
  };
}

function fromDomEvent(e, r) {
  return i => {
    var handler = e => {
      i(push(e));
    };
    i(start((i => {
      if (1 === i) {
        e.removeEventListener(r, handler);
      }
    })));
    e.addEventListener(r, handler);
  };
}

function fromPromise(e) {
  return r => {
    var i = !1;
    e.then((e => {
      if (!i) {
        r(push(e));
        r(0);
      }
    }));
    r(start((e => {
      if (1 === e) {
        i = !0;
      }
    })));
  };
}

var identity = e => e;

function buffer(e) {
  return r => i => {
    var f = [];
    var t = talkbackPlaceholder;
    var a = talkbackPlaceholder;
    var s = !1;
    var l = !1;
    r((r => {
      if (l) {} else if (0 === r) {
        l = !0;
        a(1);
        if (f.length) {
          i(push(f));
        }
        i(0);
      } else if (0 === r.tag) {
        t = r[0];
        e((e => {
          if (l) {} else if (0 === e) {
            l = !0;
            t(1);
            if (f.length) {
              i(push(f));
            }
            i(0);
          } else if (0 === e.tag) {
            a = e[0];
          } else if (f.length) {
            var r = push(f);
            f = [];
            i(r);
          }
        }));
      } else {
        f.push(r[0]);
        if (!s) {
          s = !0;
          t(0);
          a(0);
        } else {
          s = !1;
        }
      }
    }));
    i(start((e => {
      if (1 === e && !l) {
        l = !0;
        t(1);
        a(1);
      } else if (!l && !s) {
        s = !0;
        t(0);
        a(0);
      }
    })));
  };
}

function combine(e, r) {
  return i => {
    var f;
    var t;
    var a = talkbackPlaceholder;
    var s = talkbackPlaceholder;
    var l = !1;
    var n = !1;
    var u = !1;
    e((e => {
      if (0 === e) {
        if (!n) {
          n = !0;
        } else {
          u = !0;
          i(0);
        }
      } else if (0 === e.tag) {
        a = e[0];
      } else if (void 0 === t) {
        f = e[0];
        if (!l) {
          s(0);
        } else {
          l = !1;
        }
      } else if (!u) {
        l = !1;
        i(push([ f = e[0], t ]));
      }
    }));
    r((e => {
      if (0 === e) {
        if (!n) {
          n = !0;
        } else {
          u = !0;
          i(0);
        }
      } else if (0 === e.tag) {
        s = e[0];
      } else if (void 0 === f) {
        t = e[0];
        if (!l) {
          a(0);
        } else {
          l = !1;
        }
      } else if (!u) {
        l = !1;
        i(push([ f, t = e[0] ]));
      }
    }));
    i(start((e => {
      if (u) {} else if (1 === e) {
        u = !0;
        a(1);
        s(1);
      } else if (!l) {
        l = !0;
        a(0);
        s(0);
      }
    })));
  };
}

function concatMap(e) {
  return r => i => {
    var f = [];
    var t = talkbackPlaceholder;
    var a = talkbackPlaceholder;
    var s = !1;
    var l = !1;
    var n = !1;
    var u = !1;
    function applyInnerSource(r) {
      n = !0;
      r((r => {
        if (0 === r) {
          if (n) {
            n = !1;
            if (f.length) {
              applyInnerSource(e(f.shift()));
            } else if (u) {
              i(0);
            } else if (!s) {
              s = !0;
              t(0);
            }
          }
        } else if (0 === r.tag) {
          l = !1;
          (a = r[0])(0);
        } else if (n) {
          i(r);
          if (l) {
            l = !1;
          } else {
            a(0);
          }
        }
      }));
    }
    r((r => {
      if (u) {} else if (0 === r) {
        u = !0;
        if (!n && !f.length) {
          i(0);
        }
      } else if (0 === r.tag) {
        t = r[0];
      } else {
        s = !1;
        if (n) {
          f.push(r[0]);
        } else {
          applyInnerSource(e(r[0]));
        }
      }
    }));
    i(start((e => {
      if (1 === e) {
        if (!u) {
          u = !0;
          t(1);
        }
        if (n) {
          n = !1;
          a(1);
        }
      } else {
        if (!u && !s) {
          s = !0;
          t(0);
        }
        if (n && !l) {
          l = !0;
          a(0);
        }
      }
    })));
  };
}

function concatAll(e) {
  return concatMap(identity)(e);
}

function concat(e) {
  return concatAll(fromArray(e));
}

function filter(e) {
  return r => i => {
    var f = talkbackPlaceholder;
    r((r => {
      if (0 === r) {
        i(0);
      } else if (0 === r.tag) {
        f = r[0];
        i(r);
      } else if (!e(r[0])) {
        f(0);
      } else {
        i(r);
      }
    }));
  };
}

function map(e) {
  return r => i => r((r => {
    if (0 === r || 0 === r.tag) {
      i(r);
    } else {
      i(push(e(r[0])));
    }
  }));
}

function mergeMap(e) {
  return r => i => {
    var f = [];
    var t = talkbackPlaceholder;
    var a = !1;
    var s = !1;
    r((r => {
      if (s) {} else if (0 === r) {
        s = !0;
        if (!f.length) {
          i(0);
        }
      } else if (0 === r.tag) {
        t = r[0];
      } else {
        a = !1;
        !function applyInnerSource(e) {
          var r = talkbackPlaceholder;
          e((e => {
            if (0 === e) {
              if (f.length) {
                var l = f.indexOf(r);
                if (l > -1) {
                  (f = f.slice()).splice(l, 1);
                }
                if (!f.length) {
                  if (s) {
                    i(0);
                  } else if (!a) {
                    a = !0;
                    t(0);
                  }
                }
              }
            } else if (0 === e.tag) {
              f.push(r = e[0]);
              r(0);
            } else if (f.length) {
              i(e);
              r(0);
            }
          }));
        }(e(r[0]));
        if (!a) {
          a = !0;
          t(0);
        }
      }
    }));
    i(start((e => {
      if (1 === e) {
        if (!s) {
          s = !0;
          t(1);
        }
        for (var r = 0, i = f, l = f.length; r < l; r++) {
          i[r](1);
        }
        f.length = 0;
      } else {
        if (!s && !a) {
          a = !0;
          t(0);
        } else {
          a = !1;
        }
        for (var n = 0, u = f, o = f.length; n < o; n++) {
          u[n](0);
        }
      }
    })));
  };
}

function mergeAll(e) {
  return mergeMap(identity)(e);
}

function merge(e) {
  return mergeAll(fromArray(e));
}

function onEnd(e) {
  return r => i => {
    var f = !1;
    r((r => {
      if (f) {} else if (0 === r) {
        f = !0;
        i(0);
        e();
      } else if (0 === r.tag) {
        var t = r[0];
        i(start((r => {
          if (1 === r) {
            f = !0;
            t(1);
            e();
          } else {
            t(r);
          }
        })));
      } else {
        i(r);
      }
    }));
  };
}

function onPush(e) {
  return r => i => {
    var f = !1;
    r((r => {
      if (f) {} else if (0 === r) {
        f = !0;
        i(0);
      } else if (0 === r.tag) {
        var t = r[0];
        i(start((e => {
          if (1 === e) {
            f = !0;
          }
          t(e);
        })));
      } else {
        e(r[0]);
        i(r);
      }
    }));
  };
}

function onStart(e) {
  return r => i => r((r => {
    if (0 === r) {
      i(0);
    } else if (0 === r.tag) {
      i(r);
      e();
    } else {
      i(r);
    }
  }));
}

function sample(e) {
  return r => i => {
    var f = talkbackPlaceholder;
    var t = talkbackPlaceholder;
    var a;
    var s = !1;
    var l = !1;
    r((e => {
      if (l) {} else if (0 === e) {
        l = !0;
        t(1);
        i(0);
      } else if (0 === e.tag) {
        f = e[0];
      } else {
        a = e[0];
        if (!s) {
          s = !0;
          t(0);
          f(0);
        } else {
          s = !1;
        }
      }
    }));
    e((e => {
      if (l) {} else if (0 === e) {
        l = !0;
        f(1);
        i(0);
      } else if (0 === e.tag) {
        t = e[0];
      } else if (void 0 !== a) {
        var r = push(a);
        a = void 0;
        i(r);
      }
    }));
    i(start((e => {
      if (1 === e && !l) {
        l = !0;
        f(1);
        t(1);
      } else if (!l && !s) {
        s = !0;
        f(0);
        t(0);
      }
    })));
  };
}

function scan(e, r) {
  return i => f => {
    var t = r;
    i((r => {
      if (0 === r) {
        f(0);
      } else if (0 === r.tag) {
        f(r);
      } else {
        f(push(t = e(t, r[0])));
      }
    }));
  };
}

function share(e) {
  var r = [];
  var i = talkbackPlaceholder;
  var f = !1;
  return t => {
    r.push(t);
    if (1 === r.length) {
      e((e => {
        if (0 === e) {
          for (var t = 0, a = r, s = r.length; t < s; t++) {
            a[t](0);
          }
          r.length = 0;
        } else if (0 === e.tag) {
          i = e[0];
        } else {
          f = !1;
          for (var l = 0, n = r, u = r.length; l < u; l++) {
            n[l](e);
          }
        }
      }));
    }
    t(start((e => {
      if (1 === e) {
        var a = r.indexOf(t);
        if (a > -1) {
          (r = r.slice()).splice(a, 1);
        }
        if (!r.length) {
          i(1);
        }
      } else if (!f) {
        f = !0;
        i(0);
      }
    })));
  };
}

function skip(e) {
  return r => i => {
    var f = talkbackPlaceholder;
    var t = e;
    r((e => {
      if (0 === e) {
        i(0);
      } else if (0 === e.tag) {
        f = e[0];
        i(e);
      } else if (t-- > 0) {
        f(0);
      } else {
        i(e);
      }
    }));
  };
}

function skipUntil(e) {
  return r => i => {
    var f = talkbackPlaceholder;
    var t = talkbackPlaceholder;
    var a = !0;
    var s = !1;
    var l = !1;
    r((r => {
      if (l) {} else if (0 === r) {
        l = !0;
        if (a) {
          t(1);
        }
        i(0);
      } else if (0 === r.tag) {
        f = r[0];
        e((e => {
          if (0 === e) {
            if (a) {
              l = !0;
              f(1);
            }
          } else if (0 === e.tag) {
            (t = e[0])(0);
          } else {
            a = !1;
            t(1);
          }
        }));
      } else if (!a) {
        s = !1;
        i(r);
      } else if (!s) {
        s = !0;
        f(0);
        t(0);
      } else {
        s = !1;
      }
    }));
    i(start((e => {
      if (1 === e && !l) {
        l = !0;
        f(1);
        if (a) {
          t(1);
        }
      } else if (!l && !s) {
        s = !0;
        if (a) {
          t(0);
        }
        f(0);
      }
    })));
  };
}

function skipWhile(e) {
  return r => i => {
    var f = talkbackPlaceholder;
    var t = !0;
    r((r => {
      if (0 === r) {
        i(0);
      } else if (0 === r.tag) {
        f = r[0];
        i(r);
      } else if (t) {
        if (e(r[0])) {
          f(0);
        } else {
          t = !1;
          i(r);
        }
      } else {
        i(r);
      }
    }));
  };
}

function switchMap(e) {
  return r => i => {
    var f = talkbackPlaceholder;
    var t = talkbackPlaceholder;
    var a = !1;
    var s = !1;
    var l = !1;
    var n = !1;
    r((r => {
      if (n) {} else if (0 === r) {
        n = !0;
        if (!l) {
          i(0);
        }
      } else if (0 === r.tag) {
        f = r[0];
      } else {
        if (l) {
          t(1);
          t = talkbackPlaceholder;
        }
        if (!a) {
          a = !0;
          f(0);
        } else {
          a = !1;
        }
        !function applyInnerSource(e) {
          l = !0;
          e((e => {
            if (!l) {} else if (0 === e) {
              l = !1;
              if (n) {
                i(0);
              } else if (!a) {
                a = !0;
                f(0);
              }
            } else if (0 === e.tag) {
              s = !1;
              (t = e[0])(0);
            } else {
              i(e);
              if (!s) {
                t(0);
              } else {
                s = !1;
              }
            }
          }));
        }(e(r[0]));
      }
    }));
    i(start((e => {
      if (1 === e) {
        if (!n) {
          n = !0;
          f(1);
        }
        if (l) {
          l = !1;
          t(1);
        }
      } else {
        if (!n && !a) {
          a = !0;
          f(0);
        }
        if (l && !s) {
          s = !0;
          t(0);
        }
      }
    })));
  };
}

function switchAll(e) {
  return switchMap(identity)(e);
}

function take(e) {
  return r => i => {
    var f = talkbackPlaceholder;
    var t = !1;
    var a = 0;
    r((r => {
      if (t) {} else if (0 === r) {
        t = !0;
        i(0);
      } else if (0 === r.tag) {
        if (e <= 0) {
          t = !0;
          i(0);
          r[0](1);
        } else {
          f = r[0];
        }
      } else if (a++ < e) {
        i(r);
        if (!t && a >= e) {
          t = !0;
          i(0);
          f(1);
        }
      } else {
        i(r);
      }
    }));
    i(start((r => {
      if (1 === r && !t) {
        t = !0;
        f(1);
      } else if (0 === r && !t && a < e) {
        f(0);
      }
    })));
  };
}

function takeLast(e) {
  return r => i => {
    var f = [];
    var t = talkbackPlaceholder;
    r((r => {
      if (0 === r) {
        fromArray(f)(i);
      } else if (0 === r.tag) {
        if (e <= 0) {
          r[0](1);
          fromArray(f)(i);
        } else {
          (t = r[0])(0);
        }
      } else {
        if (f.length >= e && e) {
          f.shift();
        }
        f.push(r[0]);
        t(0);
      }
    }));
  };
}

function takeUntil(e) {
  return r => i => {
    var f = talkbackPlaceholder;
    var t = talkbackPlaceholder;
    var a = !1;
    r((r => {
      if (a) {} else if (0 === r) {
        a = !0;
        t(1);
        i(0);
      } else if (0 === r.tag) {
        f = r[0];
        e((e => {
          if (0 === e) {} else if (0 === e.tag) {
            (t = e[0])(0);
          } else {
            a = !0;
            f(1);
            i(0);
          }
        }));
      } else {
        i(r);
      }
    }));
    i(start((e => {
      if (1 === e && !a) {
        a = !0;
        f(1);
        t(1);
      } else if (!a) {
        f(0);
      }
    })));
  };
}

function takeWhile(e) {
  return r => i => {
    var f = talkbackPlaceholder;
    var t = !1;
    r((r => {
      if (t) {} else if (0 === r) {
        t = !0;
        i(0);
      } else if (0 === r.tag) {
        f = r[0];
        i(r);
      } else if (!e(r[0])) {
        t = !0;
        i(0);
        f(1);
      } else {
        i(r);
      }
    }));
  };
}

function debounce(e) {
  return r => i => {
    var f;
    var t = !1;
    var a = !1;
    r((r => {
      if (a) {} else if (0 === r) {
        a = !0;
        if (f) {
          t = !0;
        } else {
          i(0);
        }
      } else if (0 === r.tag) {
        var s = r[0];
        i(start((e => {
          if (1 === e && !a) {
            a = !0;
            t = !1;
            if (f) {
              clearTimeout(f);
            }
            s(1);
          } else if (!a) {
            s(0);
          }
        })));
      } else {
        if (f) {
          clearTimeout(f);
        }
        f = setTimeout((() => {
          f = void 0;
          i(r);
          if (t) {
            i(0);
          }
        }), e(r[0]));
      }
    }));
  };
}

function delay(e) {
  return r => i => {
    var f = 0;
    r((r => {
      if ("number" != typeof r && 0 === r.tag) {
        i(r);
      } else {
        f++;
        setTimeout((() => {
          if (f) {
            f--;
            i(r);
          }
        }), e);
      }
    }));
  };
}

function throttle(e) {
  return r => i => {
    var f = !1;
    var t;
    r((r => {
      if (0 === r) {
        if (t) {
          clearTimeout(t);
        }
        i(0);
      } else if (0 === r.tag) {
        var a = r[0];
        i(start((e => {
          if (1 === e) {
            if (t) {
              clearTimeout(t);
            }
            a(1);
          } else {
            a(0);
          }
        })));
      } else if (!f) {
        f = !0;
        if (t) {
          clearTimeout(t);
        }
        t = setTimeout((() => {
          t = void 0;
          f = !1;
        }), e(r[0]));
        i(r);
      }
    }));
  };
}

function subscribe(e) {
  return r => {
    var i = talkbackPlaceholder;
    var f = !1;
    r((r => {
      if (0 === r) {
        f = !0;
      } else if (0 === r.tag) {
        (i = r[0])(0);
      } else if (!f) {
        e(r[0]);
        i(0);
      }
    }));
    return {
      unsubscribe() {
        if (!f) {
          f = !0;
          i(1);
        }
      }
    };
  };
}

function forEach(e) {
  return r => {
    subscribe(e)(r);
  };
}

function publish(e) {
  subscribe((e => {}))(e);
}

function toArray(e) {
  var r = [];
  var i = talkbackPlaceholder;
  var f = !1;
  e((e => {
    if (0 === e) {
      f = !0;
    } else if (0 === e.tag) {
      (i = e[0])(0);
    } else {
      r.push(e[0]);
      i(0);
    }
  }));
  if (!f) {
    i(1);
  }
  return r;
}

function toPromise(e) {
  return new Promise((r => {
    var i = talkbackPlaceholder;
    var f;
    e((e => {
      if (0 === e) {
        r(f);
      } else if (0 === e.tag) {
        (i = e[0])(0);
      } else {
        f = e[0];
        i(0);
      }
    }));
  }));
}

var e = "function" == typeof Symbol ? Symbol.observable || (Symbol.observable = Symbol("observable")) : "@@observable";

function fromObservable(r) {
  var i = r[e] ? r[e]() : r;
  return e => {
    var r = i.subscribe({
      next(r) {
        e(push(r));
      },
      complete() {
        e(0);
      },
      error() {}
    });
    e(start((e => {
      if (1 === e) {
        r.unsubscribe();
      }
    })));
  };
}

function toObservable(r) {
  var i = {
    subscribe(e) {
      var i = talkbackPlaceholder;
      var f = !1;
      r((r => {
        if (f) {} else if (0 === r) {
          f = !0;
          e.complete();
        } else if (0 === r.tag) {
          (i = r[0])(0);
        } else {
          e.next(r[0]);
          i(0);
        }
      }));
      var t = {
        closed: !1,
        unsubscribe() {
          t.closed = !0;
          f = !0;
          i(1);
        }
      };
      return t;
    }
  };
  i[e] = () => i;
  return i;
}

function fromCallbag(e) {
  return r => {
    e(0, ((e, i) => {
      if (0 === e) {
        r(start((e => {
          if (0 === e) {
            i(1);
          } else {
            i(2);
          }
        })));
      } else if (1 === e) {
        r(push(i));
      } else if (2 === e) {
        r(0);
      }
    }));
  };
}

function toCallbag(e) {
  return (r, i) => {
    if (0 === r) {
      e((e => {
        if (0 === e) {
          i(2);
        } else if (0 === e.tag) {
          i(0, (r => {
            if (1 === r) {
              e[0](0);
            } else if (2 === r) {
              e[0](1);
            }
          }));
        } else {
          i(1, e[0]);
        }
      }));
    }
  };
}

function pipe() {
  var e = arguments[0];
  for (var r = 1, i = arguments.length; r < i; r++) {
    e = arguments[r](e);
  }
  return e;
}

export { buffer, combine, concat, concatAll, concatMap, debounce, delay, empty, filter, mergeAll as flatten, forEach, fromArray, fromCallbag, fromDomEvent, fromObservable, fromPromise, fromValue, interval, make, makeSubject, map, merge, mergeAll, mergeMap, never, onEnd, onPush, onStart, pipe, publish, sample, scan, share, skip, skipUntil, skipWhile, subscribe, switchAll, switchMap, take, takeLast, takeUntil, takeWhile, onPush as tap, throttle, toArray, toCallbag, toObservable, toPromise };
//# sourceMappingURL=wonka.mjs.map
