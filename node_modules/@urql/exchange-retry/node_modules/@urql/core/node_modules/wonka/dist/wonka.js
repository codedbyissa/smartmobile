Object.defineProperty(exports, "__esModule", {
  value: !0
});

var talkbackPlaceholder = e => {};

function start(e) {
  var r = [ e ];
  r.tag = 0;
  return r;
}

function push(e) {
  var r = [ e ];
  r.tag = 1;
  return r;
}

function fromArray(e) {
  return r => {
    var t = !1;
    var i = !1;
    var s = !1;
    var f = 0;
    r(start((a => {
      if (1 === a) {
        t = !0;
      } else if (i) {
        s = !0;
      } else {
        for (s = i = !0; s && !t; f++) {
          if (f < e.length) {
            s = !1;
            r(push(e[f]));
          } else {
            t = !0;
            r(0);
          }
        }
        i = !1;
      }
    })));
  };
}

var identity = e => e;

function concatMap(e) {
  return r => t => {
    var i = [];
    var s = talkbackPlaceholder;
    var f = talkbackPlaceholder;
    var a = !1;
    var l = !1;
    var n = !1;
    var o = !1;
    function applyInnerSource(r) {
      n = !0;
      r((r => {
        if (0 === r) {
          if (n) {
            n = !1;
            if (i.length) {
              applyInnerSource(e(i.shift()));
            } else if (o) {
              t(0);
            } else if (!a) {
              a = !0;
              s(0);
            }
          }
        } else if (0 === r.tag) {
          l = !1;
          (f = r[0])(0);
        } else if (n) {
          t(r);
          if (l) {
            l = !1;
          } else {
            f(0);
          }
        }
      }));
    }
    r((r => {
      if (o) {} else if (0 === r) {
        o = !0;
        if (!n && !i.length) {
          t(0);
        }
      } else if (0 === r.tag) {
        s = r[0];
      } else {
        a = !1;
        if (n) {
          i.push(r[0]);
        } else {
          applyInnerSource(e(r[0]));
        }
      }
    }));
    t(start((e => {
      if (1 === e) {
        if (!o) {
          o = !0;
          s(1);
        }
        if (n) {
          n = !1;
          f(1);
        }
      } else {
        if (!o && !a) {
          a = !0;
          s(0);
        }
        if (n && !l) {
          l = !0;
          f(0);
        }
      }
    })));
  };
}

function concatAll(e) {
  return concatMap(identity)(e);
}

function mergeMap(e) {
  return r => t => {
    var i = [];
    var s = talkbackPlaceholder;
    var f = !1;
    var a = !1;
    r((r => {
      if (a) {} else if (0 === r) {
        a = !0;
        if (!i.length) {
          t(0);
        }
      } else if (0 === r.tag) {
        s = r[0];
      } else {
        f = !1;
        !function applyInnerSource(e) {
          var r = talkbackPlaceholder;
          e((e => {
            if (0 === e) {
              if (i.length) {
                var l = i.indexOf(r);
                if (l > -1) {
                  (i = i.slice()).splice(l, 1);
                }
                if (!i.length) {
                  if (a) {
                    t(0);
                  } else if (!f) {
                    f = !0;
                    s(0);
                  }
                }
              }
            } else if (0 === e.tag) {
              i.push(r = e[0]);
              r(0);
            } else if (i.length) {
              t(e);
              r(0);
            }
          }));
        }(e(r[0]));
        if (!f) {
          f = !0;
          s(0);
        }
      }
    }));
    t(start((e => {
      if (1 === e) {
        if (!a) {
          a = !0;
          s(1);
        }
        for (var r = 0, t = i, l = i.length; r < l; r++) {
          t[r](1);
        }
        i.length = 0;
      } else {
        if (!a && !f) {
          f = !0;
          s(0);
        } else {
          f = !1;
        }
        for (var n = 0, o = i, u = i.length; n < u; n++) {
          o[n](0);
        }
      }
    })));
  };
}

function mergeAll(e) {
  return mergeMap(identity)(e);
}

function onPush(e) {
  return r => t => {
    var i = !1;
    r((r => {
      if (i) {} else if (0 === r) {
        i = !0;
        t(0);
      } else if (0 === r.tag) {
        var s = r[0];
        t(start((e => {
          if (1 === e) {
            i = !0;
          }
          s(e);
        })));
      } else {
        e(r[0]);
        t(r);
      }
    }));
  };
}

function switchMap(e) {
  return r => t => {
    var i = talkbackPlaceholder;
    var s = talkbackPlaceholder;
    var f = !1;
    var a = !1;
    var l = !1;
    var n = !1;
    r((r => {
      if (n) {} else if (0 === r) {
        n = !0;
        if (!l) {
          t(0);
        }
      } else if (0 === r.tag) {
        i = r[0];
      } else {
        if (l) {
          s(1);
          s = talkbackPlaceholder;
        }
        if (!f) {
          f = !0;
          i(0);
        } else {
          f = !1;
        }
        !function applyInnerSource(e) {
          l = !0;
          e((e => {
            if (!l) {} else if (0 === e) {
              l = !1;
              if (n) {
                t(0);
              } else if (!f) {
                f = !0;
                i(0);
              }
            } else if (0 === e.tag) {
              a = !1;
              (s = e[0])(0);
            } else {
              t(e);
              if (!a) {
                s(0);
              } else {
                a = !1;
              }
            }
          }));
        }(e(r[0]));
      }
    }));
    t(start((e => {
      if (1 === e) {
        if (!n) {
          n = !0;
          i(1);
        }
        if (l) {
          l = !1;
          s(1);
        }
      } else {
        if (!n && !f) {
          f = !0;
          i(0);
        }
        if (l && !a) {
          a = !0;
          s(0);
        }
      }
    })));
  };
}

function subscribe(e) {
  return r => {
    var t = talkbackPlaceholder;
    var i = !1;
    r((r => {
      if (0 === r) {
        i = !0;
      } else if (0 === r.tag) {
        (t = r[0])(0);
      } else if (!i) {
        e(r[0]);
        t(0);
      }
    }));
    return {
      unsubscribe() {
        if (!i) {
          i = !0;
          t(1);
        }
      }
    };
  };
}

var e = "function" == typeof Symbol ? Symbol.observable || (Symbol.observable = Symbol("observable")) : "@@observable";

exports.buffer = function buffer(e) {
  return r => t => {
    var i = [];
    var s = talkbackPlaceholder;
    var f = talkbackPlaceholder;
    var a = !1;
    var l = !1;
    r((r => {
      if (l) {} else if (0 === r) {
        l = !0;
        f(1);
        if (i.length) {
          t(push(i));
        }
        t(0);
      } else if (0 === r.tag) {
        s = r[0];
        e((e => {
          if (l) {} else if (0 === e) {
            l = !0;
            s(1);
            if (i.length) {
              t(push(i));
            }
            t(0);
          } else if (0 === e.tag) {
            f = e[0];
          } else if (i.length) {
            var r = push(i);
            i = [];
            t(r);
          }
        }));
      } else {
        i.push(r[0]);
        if (!a) {
          a = !0;
          s(0);
          f(0);
        } else {
          a = !1;
        }
      }
    }));
    t(start((e => {
      if (1 === e && !l) {
        l = !0;
        s(1);
        f(1);
      } else if (!l && !a) {
        a = !0;
        s(0);
        f(0);
      }
    })));
  };
};

exports.combine = function combine(e, r) {
  return t => {
    var i;
    var s;
    var f = talkbackPlaceholder;
    var a = talkbackPlaceholder;
    var l = !1;
    var n = !1;
    var o = !1;
    e((e => {
      if (0 === e) {
        if (!n) {
          n = !0;
        } else {
          o = !0;
          t(0);
        }
      } else if (0 === e.tag) {
        f = e[0];
      } else if (void 0 === s) {
        i = e[0];
        if (!l) {
          a(0);
        } else {
          l = !1;
        }
      } else if (!o) {
        l = !1;
        t(push([ i = e[0], s ]));
      }
    }));
    r((e => {
      if (0 === e) {
        if (!n) {
          n = !0;
        } else {
          o = !0;
          t(0);
        }
      } else if (0 === e.tag) {
        a = e[0];
      } else if (void 0 === i) {
        s = e[0];
        if (!l) {
          f(0);
        } else {
          l = !1;
        }
      } else if (!o) {
        l = !1;
        t(push([ i, s = e[0] ]));
      }
    }));
    t(start((e => {
      if (o) {} else if (1 === e) {
        o = !0;
        f(1);
        a(1);
      } else if (!l) {
        l = !0;
        f(0);
        a(0);
      }
    })));
  };
};

exports.concat = function concat(e) {
  return concatAll(fromArray(e));
};

exports.concatAll = concatAll;

exports.concatMap = concatMap;

exports.debounce = function debounce(e) {
  return r => t => {
    var i;
    var s = !1;
    var f = !1;
    r((r => {
      if (f) {} else if (0 === r) {
        f = !0;
        if (i) {
          s = !0;
        } else {
          t(0);
        }
      } else if (0 === r.tag) {
        var a = r[0];
        t(start((e => {
          if (1 === e && !f) {
            f = !0;
            s = !1;
            if (i) {
              clearTimeout(i);
            }
            a(1);
          } else if (!f) {
            a(0);
          }
        })));
      } else {
        if (i) {
          clearTimeout(i);
        }
        i = setTimeout((() => {
          i = void 0;
          t(r);
          if (s) {
            t(0);
          }
        }), e(r[0]));
      }
    }));
  };
};

exports.delay = function delay(e) {
  return r => t => {
    var i = 0;
    r((r => {
      if ("number" != typeof r && 0 === r.tag) {
        t(r);
      } else {
        i++;
        setTimeout((() => {
          if (i) {
            i--;
            t(r);
          }
        }), e);
      }
    }));
  };
};

exports.empty = e => {
  var r = !1;
  e(start((t => {
    if (1 === t) {
      r = !0;
    } else if (!r) {
      r = !0;
      e(0);
    }
  })));
};

exports.filter = function filter(e) {
  return r => t => {
    var i = talkbackPlaceholder;
    r((r => {
      if (0 === r) {
        t(0);
      } else if (0 === r.tag) {
        i = r[0];
        t(r);
      } else if (!e(r[0])) {
        i(0);
      } else {
        t(r);
      }
    }));
  };
};

exports.flatten = mergeAll;

exports.forEach = function forEach(e) {
  return r => {
    subscribe(e)(r);
  };
};

exports.fromArray = fromArray;

exports.fromCallbag = function fromCallbag(e) {
  return r => {
    e(0, ((e, t) => {
      if (0 === e) {
        r(start((e => {
          if (0 === e) {
            t(1);
          } else {
            t(2);
          }
        })));
      } else if (1 === e) {
        r(push(t));
      } else if (2 === e) {
        r(0);
      }
    }));
  };
};

exports.fromDomEvent = function fromDomEvent(e, r) {
  return t => {
    var handler = e => {
      t(push(e));
    };
    t(start((t => {
      if (1 === t) {
        e.removeEventListener(r, handler);
      }
    })));
    e.addEventListener(r, handler);
  };
};

exports.fromObservable = function fromObservable(r) {
  var t = r[e] ? r[e]() : r;
  return e => {
    var r = t.subscribe({
      next(r) {
        e(push(r));
      },
      complete() {
        e(0);
      },
      error() {}
    });
    e(start((e => {
      if (1 === e) {
        r.unsubscribe();
      }
    })));
  };
};

exports.fromPromise = function fromPromise(e) {
  return r => {
    var t = !1;
    e.then((e => {
      if (!t) {
        r(push(e));
        r(0);
      }
    }));
    r(start((e => {
      if (1 === e) {
        t = !0;
      }
    })));
  };
};

exports.fromValue = function fromValue(e) {
  return r => {
    var t = !1;
    r(start((i => {
      if (1 === i) {
        t = !0;
      } else if (!t) {
        t = !0;
        r(push(e));
        r(0);
      }
    })));
  };
};

exports.interval = function interval(e) {
  return r => {
    var t = 0;
    var i = setInterval((() => {
      r(push(t++));
    }), e);
    r(start((e => {
      if (1 === e) {
        clearInterval(i);
      }
    })));
  };
};

exports.make = function make(e) {
  return r => {
    var t = !1;
    var i = e({
      next(e) {
        if (!t) {
          r(push(e));
        }
      },
      complete() {
        if (!t) {
          t = !0;
          r(0);
        }
      }
    });
    r(start((e => {
      if (1 === e && !t) {
        t = !0;
        i();
      }
    })));
  };
};

exports.makeSubject = function makeSubject() {
  var e = [];
  var r = !1;
  return {
    source(r) {
      e.push(r);
      r(start((t => {
        if (1 === t) {
          var i = e.indexOf(r);
          if (i > -1) {
            (e = e.slice()).splice(i, 1);
          }
        }
      })));
    },
    next(t) {
      if (!r) {
        var i = push(t);
        for (var s = 0, f = e, a = e.length; s < a; s++) {
          f[s](i);
        }
      }
    },
    complete() {
      if (!r) {
        r = !0;
        for (var t = 0, i = e, s = e.length; t < s; t++) {
          i[t](0);
        }
      }
    }
  };
};

exports.map = function map(e) {
  return r => t => r((r => {
    if (0 === r || 0 === r.tag) {
      t(r);
    } else {
      t(push(e(r[0])));
    }
  }));
};

exports.merge = function merge(e) {
  return mergeAll(fromArray(e));
};

exports.mergeAll = mergeAll;

exports.mergeMap = mergeMap;

exports.never = e => {
  e(start(talkbackPlaceholder));
};

exports.onEnd = function onEnd(e) {
  return r => t => {
    var i = !1;
    r((r => {
      if (i) {} else if (0 === r) {
        i = !0;
        t(0);
        e();
      } else if (0 === r.tag) {
        var s = r[0];
        t(start((r => {
          if (1 === r) {
            i = !0;
            s(1);
            e();
          } else {
            s(r);
          }
        })));
      } else {
        t(r);
      }
    }));
  };
};

exports.onPush = onPush;

exports.onStart = function onStart(e) {
  return r => t => r((r => {
    if (0 === r) {
      t(0);
    } else if (0 === r.tag) {
      t(r);
      e();
    } else {
      t(r);
    }
  }));
};

exports.pipe = function pipe() {
  var e = arguments[0];
  for (var r = 1, t = arguments.length; r < t; r++) {
    e = arguments[r](e);
  }
  return e;
};

exports.publish = function publish(e) {
  subscribe((e => {}))(e);
};

exports.sample = function sample(e) {
  return r => t => {
    var i = talkbackPlaceholder;
    var s = talkbackPlaceholder;
    var f;
    var a = !1;
    var l = !1;
    r((e => {
      if (l) {} else if (0 === e) {
        l = !0;
        s(1);
        t(0);
      } else if (0 === e.tag) {
        i = e[0];
      } else {
        f = e[0];
        if (!a) {
          a = !0;
          s(0);
          i(0);
        } else {
          a = !1;
        }
      }
    }));
    e((e => {
      if (l) {} else if (0 === e) {
        l = !0;
        i(1);
        t(0);
      } else if (0 === e.tag) {
        s = e[0];
      } else if (void 0 !== f) {
        var r = push(f);
        f = void 0;
        t(r);
      }
    }));
    t(start((e => {
      if (1 === e && !l) {
        l = !0;
        i(1);
        s(1);
      } else if (!l && !a) {
        a = !0;
        i(0);
        s(0);
      }
    })));
  };
};

exports.scan = function scan(e, r) {
  return t => i => {
    var s = r;
    t((r => {
      if (0 === r) {
        i(0);
      } else if (0 === r.tag) {
        i(r);
      } else {
        i(push(s = e(s, r[0])));
      }
    }));
  };
};

exports.share = function share(e) {
  var r = [];
  var t = talkbackPlaceholder;
  var i = !1;
  return s => {
    r.push(s);
    if (1 === r.length) {
      e((e => {
        if (0 === e) {
          for (var s = 0, f = r, a = r.length; s < a; s++) {
            f[s](0);
          }
          r.length = 0;
        } else if (0 === e.tag) {
          t = e[0];
        } else {
          i = !1;
          for (var l = 0, n = r, o = r.length; l < o; l++) {
            n[l](e);
          }
        }
      }));
    }
    s(start((e => {
      if (1 === e) {
        var f = r.indexOf(s);
        if (f > -1) {
          (r = r.slice()).splice(f, 1);
        }
        if (!r.length) {
          t(1);
        }
      } else if (!i) {
        i = !0;
        t(0);
      }
    })));
  };
};

exports.skip = function skip(e) {
  return r => t => {
    var i = talkbackPlaceholder;
    var s = e;
    r((e => {
      if (0 === e) {
        t(0);
      } else if (0 === e.tag) {
        i = e[0];
        t(e);
      } else if (s-- > 0) {
        i(0);
      } else {
        t(e);
      }
    }));
  };
};

exports.skipUntil = function skipUntil(e) {
  return r => t => {
    var i = talkbackPlaceholder;
    var s = talkbackPlaceholder;
    var f = !0;
    var a = !1;
    var l = !1;
    r((r => {
      if (l) {} else if (0 === r) {
        l = !0;
        if (f) {
          s(1);
        }
        t(0);
      } else if (0 === r.tag) {
        i = r[0];
        e((e => {
          if (0 === e) {
            if (f) {
              l = !0;
              i(1);
            }
          } else if (0 === e.tag) {
            (s = e[0])(0);
          } else {
            f = !1;
            s(1);
          }
        }));
      } else if (!f) {
        a = !1;
        t(r);
      } else if (!a) {
        a = !0;
        i(0);
        s(0);
      } else {
        a = !1;
      }
    }));
    t(start((e => {
      if (1 === e && !l) {
        l = !0;
        i(1);
        if (f) {
          s(1);
        }
      } else if (!l && !a) {
        a = !0;
        if (f) {
          s(0);
        }
        i(0);
      }
    })));
  };
};

exports.skipWhile = function skipWhile(e) {
  return r => t => {
    var i = talkbackPlaceholder;
    var s = !0;
    r((r => {
      if (0 === r) {
        t(0);
      } else if (0 === r.tag) {
        i = r[0];
        t(r);
      } else if (s) {
        if (e(r[0])) {
          i(0);
        } else {
          s = !1;
          t(r);
        }
      } else {
        t(r);
      }
    }));
  };
};

exports.subscribe = subscribe;

exports.switchAll = function switchAll(e) {
  return switchMap(identity)(e);
};

exports.switchMap = switchMap;

exports.take = function take(e) {
  return r => t => {
    var i = talkbackPlaceholder;
    var s = !1;
    var f = 0;
    r((r => {
      if (s) {} else if (0 === r) {
        s = !0;
        t(0);
      } else if (0 === r.tag) {
        if (e <= 0) {
          s = !0;
          t(0);
          r[0](1);
        } else {
          i = r[0];
        }
      } else if (f++ < e) {
        t(r);
        if (!s && f >= e) {
          s = !0;
          t(0);
          i(1);
        }
      } else {
        t(r);
      }
    }));
    t(start((r => {
      if (1 === r && !s) {
        s = !0;
        i(1);
      } else if (0 === r && !s && f < e) {
        i(0);
      }
    })));
  };
};

exports.takeLast = function takeLast(e) {
  return r => t => {
    var i = [];
    var s = talkbackPlaceholder;
    r((r => {
      if (0 === r) {
        fromArray(i)(t);
      } else if (0 === r.tag) {
        if (e <= 0) {
          r[0](1);
          fromArray(i)(t);
        } else {
          (s = r[0])(0);
        }
      } else {
        if (i.length >= e && e) {
          i.shift();
        }
        i.push(r[0]);
        s(0);
      }
    }));
  };
};

exports.takeUntil = function takeUntil(e) {
  return r => t => {
    var i = talkbackPlaceholder;
    var s = talkbackPlaceholder;
    var f = !1;
    r((r => {
      if (f) {} else if (0 === r) {
        f = !0;
        s(1);
        t(0);
      } else if (0 === r.tag) {
        i = r[0];
        e((e => {
          if (0 === e) {} else if (0 === e.tag) {
            (s = e[0])(0);
          } else {
            f = !0;
            i(1);
            t(0);
          }
        }));
      } else {
        t(r);
      }
    }));
    t(start((e => {
      if (1 === e && !f) {
        f = !0;
        i(1);
        s(1);
      } else if (!f) {
        i(0);
      }
    })));
  };
};

exports.takeWhile = function takeWhile(e) {
  return r => t => {
    var i = talkbackPlaceholder;
    var s = !1;
    r((r => {
      if (s) {} else if (0 === r) {
        s = !0;
        t(0);
      } else if (0 === r.tag) {
        i = r[0];
        t(r);
      } else if (!e(r[0])) {
        s = !0;
        t(0);
        i(1);
      } else {
        t(r);
      }
    }));
  };
};

exports.tap = onPush;

exports.throttle = function throttle(e) {
  return r => t => {
    var i = !1;
    var s;
    r((r => {
      if (0 === r) {
        if (s) {
          clearTimeout(s);
        }
        t(0);
      } else if (0 === r.tag) {
        var f = r[0];
        t(start((e => {
          if (1 === e) {
            if (s) {
              clearTimeout(s);
            }
            f(1);
          } else {
            f(0);
          }
        })));
      } else if (!i) {
        i = !0;
        if (s) {
          clearTimeout(s);
        }
        s = setTimeout((() => {
          s = void 0;
          i = !1;
        }), e(r[0]));
        t(r);
      }
    }));
  };
};

exports.toArray = function toArray(e) {
  var r = [];
  var t = talkbackPlaceholder;
  var i = !1;
  e((e => {
    if (0 === e) {
      i = !0;
    } else if (0 === e.tag) {
      (t = e[0])(0);
    } else {
      r.push(e[0]);
      t(0);
    }
  }));
  if (!i) {
    t(1);
  }
  return r;
};

exports.toCallbag = function toCallbag(e) {
  return (r, t) => {
    if (0 === r) {
      e((e => {
        if (0 === e) {
          t(2);
        } else if (0 === e.tag) {
          t(0, (r => {
            if (1 === r) {
              e[0](0);
            } else if (2 === r) {
              e[0](1);
            }
          }));
        } else {
          t(1, e[0]);
        }
      }));
    }
  };
};

exports.toObservable = function toObservable(r) {
  var t = {
    subscribe(e) {
      var t = talkbackPlaceholder;
      var i = !1;
      r((r => {
        if (i) {} else if (0 === r) {
          i = !0;
          e.complete();
        } else if (0 === r.tag) {
          (t = r[0])(0);
        } else {
          e.next(r[0]);
          t(0);
        }
      }));
      var s = {
        closed: !1,
        unsubscribe() {
          s.closed = !0;
          i = !0;
          t(1);
        }
      };
      return s;
    }
  };
  t[e] = () => t;
  return t;
};

exports.toPromise = function toPromise(e) {
  return new Promise((r => {
    var t = talkbackPlaceholder;
    var i;
    e((e => {
      if (0 === e) {
        r(i);
      } else if (0 === e.tag) {
        (t = e[0])(0);
      } else {
        i = e[0];
        t(0);
      }
    }));
  }));
};
//# sourceMappingURL=wonka.js.map
