{"version":3,"file":"urql-core.mjs","sources":["../src/utils/typenames.ts","../src/utils/maskTypename.ts","../src/utils/streamUtils.ts","../src/utils/operation.ts","../src/utils/index.ts","../src/gql.ts","../src/exchanges/cache.ts","../src/exchanges/ssr.ts","../src/exchanges/subscription.ts","../src/exchanges/debug.ts","../src/exchanges/dedup.ts","../src/exchanges/fetch.ts","../src/exchanges/fallback.ts","../src/exchanges/compose.ts","../src/exchanges/error.ts","../src/exchanges/index.ts","../src/client.ts"],"sourcesContent":["import {\n  DocumentNode,\n  FieldNode,\n  InlineFragmentNode,\n  Kind,\n  visit,\n} from 'graphql';\n\nimport { KeyedDocumentNode, keyDocument } from './request';\n\ninterface EntityLike {\n  [key: string]: EntityLike | EntityLike[] | any;\n  __typename: string | null | void;\n}\n\nconst collectTypes = (obj: EntityLike | EntityLike[], types: Set<string>) => {\n  if (Array.isArray(obj)) {\n    for (const item of obj) collectTypes(item, types);\n  } else if (typeof obj === 'object' && obj !== null) {\n    for (const key in obj) {\n      if (key === '__typename' && typeof obj[key] === 'string') {\n        types.add(obj[key] as string);\n      } else {\n        collectTypes(obj[key], types);\n      }\n    }\n  }\n\n  return types;\n};\n\nexport const collectTypesFromResponse = (response: object): string[] => [\n  ...collectTypes(response as EntityLike, new Set()),\n];\n\nconst formatNode = (node: FieldNode | InlineFragmentNode) => {\n  if (!node.selectionSet) return node;\n  for (const selection of node.selectionSet.selections)\n    if (\n      selection.kind === Kind.FIELD &&\n      selection.name.value === '__typename' &&\n      !selection.alias\n    )\n      return node;\n\n  return {\n    ...node,\n    selectionSet: {\n      ...node.selectionSet,\n      selections: [\n        ...node.selectionSet.selections,\n        {\n          kind: Kind.FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: '__typename',\n          },\n        },\n      ],\n    },\n  };\n};\n\nconst formattedDocs = new Map<number, KeyedDocumentNode>();\n\nexport const formatDocument = <T extends DocumentNode>(node: T): T => {\n  const query = keyDocument(node);\n\n  let result = formattedDocs.get(query.__key);\n  if (!result) {\n    result = visit(query, {\n      Field: formatNode,\n      InlineFragment: formatNode,\n    }) as KeyedDocumentNode;\n\n    // Ensure that the hash of the resulting document won't suddenly change\n    // we are marking __key as non-enumerable so when external exchanges use visit\n    // to manipulate a document we won't restore the previous query due to the __key\n    // property.\n    Object.defineProperty(result, '__key', {\n      value: query.__key,\n      enumerable: false,\n    });\n\n    formattedDocs.set(query.__key, result);\n  }\n\n  return (result as unknown) as T;\n};\n","export const maskTypename = (data: any, isRoot?: boolean): any => {\n  if (!data || typeof data !== 'object') {\n    return data;\n  } else if (Array.isArray(data)) {\n    return data.map(d => maskTypename(d));\n  } else if (\n    data &&\n    typeof data === 'object' &&\n    (isRoot || '__typename' in data)\n  ) {\n    const acc = {};\n    for (const key in data) {\n      if (key === '__typename') {\n        Object.defineProperty(acc, '__typename', {\n          enumerable: false,\n          value: data.__typename,\n        });\n      } else {\n        acc[key] = maskTypename(data[key]);\n      }\n    }\n    return acc;\n  } else {\n    return data;\n  }\n};\n","import { Source, subscribe, pipe } from 'wonka';\nimport { OperationResult, PromisifiedSource } from '../types';\n\nexport function withPromise<T extends OperationResult>(\n  source$: Source<T>\n): PromisifiedSource<T> {\n  (source$ as PromisifiedSource<T>).toPromise = () => {\n    return new Promise(resolve => {\n      const subscription = pipe(\n        source$,\n        subscribe(result => {\n          if (!result.stale && !result.hasNext) {\n            Promise.resolve().then(() => {\n              subscription.unsubscribe();\n              resolve(result);\n            });\n          }\n        })\n      );\n    });\n  };\n\n  return source$ as PromisifiedSource<T>;\n}\n","import {\n  GraphQLRequest,\n  Operation,\n  OperationContext,\n  OperationType,\n} from '../types';\n\nfunction makeOperation<Data = any, Variables = object>(\n  kind: OperationType,\n  request: GraphQLRequest<Data, Variables>,\n  context: OperationContext\n): Operation<Data, Variables>;\n\nfunction makeOperation<Data = any, Variables = object>(\n  kind: OperationType,\n  request: Operation<Data, Variables>,\n  context?: OperationContext\n): Operation<Data, Variables>;\n\nfunction makeOperation(kind, request, context) {\n  if (!context) context = request.context;\n\n  return {\n    key: request.key,\n    query: request.query,\n    variables: request.variables,\n    kind,\n    context,\n  };\n}\n\nexport { makeOperation };\n\n/** Spreads the provided metadata to the source operation's meta property in context.  */\nexport const addMetadata = (\n  operation: Operation,\n  meta: OperationContext['meta']\n) => {\n  return makeOperation(operation.kind, operation, {\n    ...operation.context,\n    meta: {\n      ...operation.context.meta,\n      ...meta,\n    },\n  });\n};\n","export * from './error';\nexport * from './request';\nexport * from './result';\nexport * from './typenames';\nexport * from './stringifyVariables';\nexport * from './maskTypename';\nexport * from './streamUtils';\nexport * from './operation';\n\nexport const noop = () => {\n  /* noop */\n};\n","/* eslint-disable prefer-rest-params */\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { DocumentNode, DefinitionNode, Kind } from 'graphql';\nimport { keyDocument, stringifyDocument } from './utils';\n\nconst applyDefinitions = (\n  fragmentNames: Map<string, string>,\n  target: DefinitionNode[],\n  source: Array<DefinitionNode> | ReadonlyArray<DefinitionNode>\n) => {\n  for (const definition of source) {\n    if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n      const name = definition.name.value;\n      const value = stringifyDocument(definition);\n      // Fragments will be deduplicated according to this Map\n      if (!fragmentNames.has(name)) {\n        fragmentNames.set(name, value);\n        target.push(definition);\n      } else if (\n        process.env.NODE_ENV !== 'production' &&\n        fragmentNames.get(name) !== value\n      ) {\n        // Fragments with the same names is expected to have the same contents\n        console.warn(\n          '[WARNING: Duplicate Fragment] A fragment with name `' +\n            name +\n            '` already exists in this document.\\n' +\n            'While fragment names may not be unique across your source, each name must be unique per document.'\n        );\n      }\n    } else {\n      target.push(definition);\n    }\n  }\n};\n\nfunction gql<Data = any, Variables = object>(\n  strings: TemplateStringsArray,\n  ...interpolations: Array<TypedDocumentNode | DocumentNode | string>\n): TypedDocumentNode<Data, Variables>;\n\nfunction gql<Data = any, Variables = object>(\n  string: string\n): TypedDocumentNode<Data, Variables>;\n\nfunction gql(/* arguments */) {\n  const fragmentNames = new Map<string, string>();\n  const definitions: DefinitionNode[] = [];\n  const interpolations: DefinitionNode[] = [];\n\n  // Apply the entire tagged template body's definitions\n  let body: string = Array.isArray(arguments[0])\n    ? arguments[0][0]\n    : arguments[0] || '';\n  for (let i = 1; i < arguments.length; i++) {\n    const value = arguments[i];\n    if (value && value.definitions) {\n      interpolations.push(...value.definitions);\n    } else {\n      body += value;\n    }\n\n    body += arguments[0][i];\n  }\n\n  // Apply the tag's body definitions\n  applyDefinitions(fragmentNames, definitions, keyDocument(body).definitions);\n  // Copy over each interpolated document's definitions\n  applyDefinitions(fragmentNames, definitions, interpolations);\n\n  return keyDocument({\n    kind: Kind.DOCUMENT,\n    definitions,\n  });\n}\n\nexport { gql };\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, map, merge, pipe, share, tap } from 'wonka';\n\nimport { Client } from '../client';\nimport { Exchange, Operation, OperationResult } from '../types';\n\nimport {\n  makeOperation,\n  addMetadata,\n  collectTypesFromResponse,\n  formatDocument,\n} from '../utils';\n\ntype ResultCache = Map<number, OperationResult>;\ntype OperationCache = Map<string, Set<number>>;\n\nconst shouldSkip = ({ kind }: Operation) =>\n  kind !== 'mutation' && kind !== 'query';\n\nexport const cacheExchange: Exchange = ({ forward, client, dispatchDebug }) => {\n  const resultCache: ResultCache = new Map();\n  const operationCache: OperationCache = new Map();\n\n  // Adds unique typenames to query (for invalidating cache entries)\n  const mapTypeNames = (operation: Operation): Operation => {\n    const formattedOperation = makeOperation(operation.kind, operation);\n    formattedOperation.query = formatDocument(operation.query);\n    return formattedOperation;\n  };\n\n  const isOperationCached = (operation: Operation) => {\n    const {\n      key,\n      kind,\n      context: { requestPolicy },\n    } = operation;\n    return (\n      kind === 'query' &&\n      requestPolicy !== 'network-only' &&\n      (requestPolicy === 'cache-only' || resultCache.has(key))\n    );\n  };\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n\n    const cachedOps$ = pipe(\n      sharedOps$,\n      filter(op => !shouldSkip(op) && isOperationCached(op)),\n      map(operation => {\n        const cachedResult = resultCache.get(operation.key);\n\n        dispatchDebug({\n          operation,\n          ...(cachedResult\n            ? {\n                type: 'cacheHit',\n                message: 'The result was successfully retried from the cache',\n              }\n            : {\n                type: 'cacheMiss',\n                message: 'The result could not be retrieved from the cache',\n              }),\n        });\n\n        const result: OperationResult = {\n          ...cachedResult,\n          operation: addMetadata(operation, {\n            cacheOutcome: cachedResult ? 'hit' : 'miss',\n          }),\n        };\n\n        if (operation.context.requestPolicy === 'cache-and-network') {\n          result.stale = true;\n          reexecuteOperation(client, operation);\n        }\n\n        return result;\n      })\n    );\n\n    const forwardedOps$ = pipe(\n      merge([\n        pipe(\n          sharedOps$,\n          filter(op => !shouldSkip(op) && !isOperationCached(op)),\n          map(mapTypeNames)\n        ),\n        pipe(\n          sharedOps$,\n          filter(op => shouldSkip(op))\n        ),\n      ]),\n      map(op => addMetadata(op, { cacheOutcome: 'miss' })),\n      filter(\n        op => op.kind !== 'query' || op.context.requestPolicy !== 'cache-only'\n      ),\n      forward,\n      tap(response => {\n        let { operation } = response;\n        if (!operation) return;\n\n        const typenames = collectTypesFromResponse(response.data).concat(\n          operation.context.additionalTypenames || []\n        );\n\n        // Invalidates the cache given a mutation's response\n        if (response.operation.kind === 'mutation') {\n          const pendingOperations = new Set<number>();\n\n          dispatchDebug({\n            type: 'cacheInvalidation',\n            message: `The following typenames have been invalidated: ${typenames}`,\n            operation,\n            data: { typenames, response },\n          });\n\n          for (let i = 0; i < typenames.length; i++) {\n            const typeName = typenames[i];\n            let operations = operationCache.get(typeName);\n            if (!operations)\n              operationCache.set(typeName, (operations = new Set()));\n            for (const key of operations.values()) pendingOperations.add(key);\n            operations.clear();\n          }\n\n          for (const key of pendingOperations.values()) {\n            if (resultCache.has(key)) {\n              operation = (resultCache.get(key) as OperationResult).operation;\n              resultCache.delete(key);\n              reexecuteOperation(client, operation);\n            }\n          }\n        } else if (operation.kind === 'query' && response.data) {\n          resultCache.set(operation.key, response);\n          for (let i = 0; i < typenames.length; i++) {\n            const typeName = typenames[i];\n            let operations = operationCache.get(typeName);\n            if (!operations)\n              operationCache.set(typeName, (operations = new Set()));\n            operations.add(operation.key);\n          }\n        }\n      })\n    );\n\n    return merge([cachedOps$, forwardedOps$]);\n  };\n};\n\n// Reexecutes a given operation with the default requestPolicy\nexport const reexecuteOperation = (client: Client, operation: Operation) => {\n  return client.reexecuteOperation(\n    makeOperation(operation.kind, operation, {\n      ...operation.context,\n      requestPolicy: 'network-only',\n    })\n  );\n};\n","import { GraphQLError } from 'graphql';\nimport { pipe, share, filter, merge, map, tap } from 'wonka';\nimport { Exchange, OperationResult, Operation } from '../types';\nimport { CombinedError } from '../utils';\nimport { reexecuteOperation } from './cache';\n\nexport interface SerializedResult {\n  hasNext?: boolean;\n  data?: string | undefined; // JSON string of data\n  extensions?: string | undefined; // JSON string of data\n  error?: {\n    graphQLErrors: Array<Partial<GraphQLError> | string>;\n    networkError?: string;\n  };\n}\n\nexport interface SSRData {\n  [key: string]: SerializedResult;\n}\n\nexport interface SSRExchangeParams {\n  isClient?: boolean;\n  initialState?: SSRData;\n  staleWhileRevalidate?: boolean;\n  includeExtensions?: boolean;\n}\n\nexport interface SSRExchange extends Exchange {\n  /** Rehydrates cached data */\n  restoreData(data: SSRData): void;\n  /** Extracts cached data */\n  extractData(): SSRData;\n}\n\n/** Serialize an OperationResult to plain JSON */\nconst serializeResult = (\n  { hasNext, data, extensions, error }: OperationResult,\n  includeExtensions: boolean\n): SerializedResult => {\n  const result: SerializedResult = {};\n  if (data !== undefined) result.data = JSON.stringify(data);\n  if (includeExtensions && extensions !== undefined) {\n    result.extensions = JSON.stringify(extensions);\n  }\n  if (hasNext) result.hasNext = true;\n\n  if (error) {\n    result.error = {\n      graphQLErrors: error.graphQLErrors.map(error => {\n        if (!error.path && !error.extensions) return error.message;\n\n        return {\n          message: error.message,\n          path: error.path,\n          extensions: error.extensions,\n        };\n      }),\n    };\n\n    if (error.networkError) {\n      result.error.networkError = '' + error.networkError;\n    }\n  }\n\n  return result;\n};\n\n/** Deserialize plain JSON to an OperationResult */\nconst deserializeResult = (\n  operation: Operation,\n  result: SerializedResult,\n  includeExtensions: boolean\n): OperationResult => ({\n  operation,\n  data: result.data ? JSON.parse(result.data) : undefined,\n  extensions:\n    includeExtensions && result.extensions\n      ? JSON.parse(result.extensions)\n      : undefined,\n  error: result.error\n    ? new CombinedError({\n        networkError: result.error.networkError\n          ? new Error(result.error.networkError)\n          : undefined,\n        graphQLErrors: result.error.graphQLErrors,\n      })\n    : undefined,\n  hasNext: result.hasNext,\n});\n\nconst revalidated = new Set<number>();\n\n/** The ssrExchange can be created to capture data during SSR and also to rehydrate it on the client */\nexport const ssrExchange = (params: SSRExchangeParams = {}): SSRExchange => {\n  const staleWhileRevalidate = !!params.staleWhileRevalidate;\n  const includeExtensions = !!params.includeExtensions;\n  const data: Record<string, SerializedResult | null> = {};\n\n  // On the client-side, we delete results from the cache as they're resolved\n  // this is delayed so that concurrent queries don't delete each other's data\n  const invalidateQueue: number[] = [];\n  const invalidate = (result: OperationResult) => {\n    invalidateQueue.push(result.operation.key);\n    if (invalidateQueue.length === 1) {\n      Promise.resolve().then(() => {\n        let key: number | void;\n        while ((key = invalidateQueue.shift())) {\n          data[key] = null;\n        }\n      });\n    }\n  };\n\n  // The SSR Exchange is a temporary cache that can populate results into data for suspense\n  // On the client it can be used to retrieve these temporary results from a rehydrated cache\n  const ssr: SSRExchange = ({ client, forward }) => ops$ => {\n    // params.isClient tells us whether we're on the client-side\n    // By default we assume that we're on the client if suspense-mode is disabled\n    const isClient =\n      params && typeof params.isClient === 'boolean'\n        ? !!params.isClient\n        : !client.suspense;\n\n    const sharedOps$ = share(ops$);\n\n    let forwardedOps$ = pipe(\n      sharedOps$,\n      filter(\n        operation => !data[operation.key] || !!data[operation.key]!.hasNext\n      ),\n      forward\n    );\n\n    // NOTE: Since below we might delete the cached entry after accessing\n    // it once, cachedOps$ needs to be merged after forwardedOps$\n    let cachedOps$ = pipe(\n      sharedOps$,\n      filter(\n        operation =>\n          !!data[operation.key] &&\n          operation.context.requestPolicy !== 'network-only'\n      ),\n      map(op => {\n        const serialized = data[op.key]!;\n        const result = deserializeResult(op, serialized, includeExtensions);\n        if (staleWhileRevalidate && !revalidated.has(op.key)) {\n          result.stale = true;\n          revalidated.add(op.key);\n          reexecuteOperation(client, op);\n        }\n\n        return result;\n      })\n    );\n\n    if (!isClient) {\n      // On the server we cache results in the cache as they're resolved\n      forwardedOps$ = pipe(\n        forwardedOps$,\n        tap((result: OperationResult) => {\n          const { operation } = result;\n          if (operation.kind !== 'mutation') {\n            const serialized = serializeResult(result, includeExtensions);\n            data[operation.key] = serialized;\n          }\n        })\n      );\n    } else {\n      // On the client we delete results from the cache as they're resolved\n      cachedOps$ = pipe(cachedOps$, tap(invalidate));\n    }\n\n    return merge([forwardedOps$, cachedOps$]);\n  };\n\n  ssr.restoreData = (restore: SSRData) => {\n    for (const key in restore) {\n      // We only restore data that hasn't been previously invalidated\n      if (data[key] !== null) {\n        data[key] = restore[key];\n      }\n    }\n  };\n\n  ssr.extractData = () => {\n    const result: SSRData = {};\n    for (const key in data) if (data[key] != null) result[key] = data[key]!;\n    return result;\n  };\n\n  if (params && params.initialState) {\n    ssr.restoreData(params.initialState);\n  }\n\n  return ssr;\n};\n","import { print } from 'graphql';\n\nimport {\n  filter,\n  make,\n  merge,\n  mergeMap,\n  pipe,\n  share,\n  Subscription,\n  Source,\n  takeUntil,\n} from 'wonka';\n\nimport { makeResult, makeErrorResult, makeOperation } from '../utils';\n\nimport {\n  Exchange,\n  ExecutionResult,\n  Operation,\n  OperationContext,\n  OperationResult,\n} from '../types';\n\nexport interface ObserverLike<T> {\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\n/** An abstract observable interface conforming to: https://github.com/tc39/proposal-observable */\nexport interface ObservableLike<T> {\n  subscribe(\n    observer: ObserverLike<T>\n  ): {\n    unsubscribe: () => void;\n  };\n}\n\nexport interface SubscriptionOperation {\n  query: string;\n  variables: Record<string, unknown> | undefined;\n  key: string;\n  context: OperationContext;\n}\n\nexport type SubscriptionForwarder = (\n  operation: SubscriptionOperation\n) => ObservableLike<ExecutionResult>;\n\n/** This is called to create a subscription and needs to be hooked up to a transport client. */\nexport interface SubscriptionExchangeOpts {\n  // This has been modelled to work with subscription-transport-ws\n  // See: https://github.com/apollographql/subscriptions-transport-ws#requestoptions--observableexecutionresult-returns-observable-to-execute-the-operation\n  forwardSubscription: SubscriptionForwarder;\n\n  /** This flag may be turned on to allow your subscriptions-transport to handle all operation types */\n  enableAllOperations?: boolean;\n  isSubscriptionOperation?: (operation: Operation) => boolean;\n}\n\nexport const subscriptionExchange = ({\n  forwardSubscription,\n  enableAllOperations,\n  isSubscriptionOperation,\n}: SubscriptionExchangeOpts): Exchange => ({ client, forward }) => {\n  const createSubscriptionSource = (\n    operation: Operation\n  ): Source<OperationResult> => {\n    // This excludes the query's name as a field although subscription-transport-ws does accept it since it's optional\n    const observableish = forwardSubscription({\n      key: operation.key.toString(36),\n      query: print(operation.query),\n      variables: operation.variables!,\n      context: { ...operation.context },\n    });\n\n    return make<OperationResult>(({ next, complete }) => {\n      let isComplete = false;\n      let sub: Subscription | void;\n\n      Promise.resolve().then(() => {\n        if (isComplete) return;\n\n        sub = observableish.subscribe({\n          next: result => next(makeResult(operation, result)),\n          error: err => next(makeErrorResult(operation, err)),\n          complete: () => {\n            if (!isComplete) {\n              isComplete = true;\n              if (operation.kind === 'subscription') {\n                client.reexecuteOperation(\n                  makeOperation('teardown', operation, operation.context)\n                );\n              }\n\n              complete();\n            }\n          },\n        });\n      });\n\n      return () => {\n        isComplete = true;\n        if (sub) sub.unsubscribe();\n      };\n    });\n  };\n  const isSubscriptionOperationFn =\n    isSubscriptionOperation ||\n    (operation => {\n      const { kind } = operation;\n      return (\n        kind === 'subscription' ||\n        (!!enableAllOperations && (kind === 'query' || kind === 'mutation'))\n      );\n    });\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n    const subscriptionResults$ = pipe(\n      sharedOps$,\n      filter(isSubscriptionOperationFn),\n      mergeMap(operation => {\n        const { key } = operation;\n        const teardown$ = pipe(\n          sharedOps$,\n          filter(op => op.kind === 'teardown' && op.key === key)\n        );\n\n        return pipe(createSubscriptionSource(operation), takeUntil(teardown$));\n      })\n    );\n\n    const forward$ = pipe(\n      sharedOps$,\n      filter(op => !isSubscriptionOperationFn(op)),\n      forward\n    );\n\n    return merge([subscriptionResults$, forward$]);\n  };\n};\n","import { pipe, tap } from 'wonka';\nimport { Exchange } from '../types';\n\nexport const debugExchange: Exchange = ({ forward }) => {\n  if (process.env.NODE_ENV === 'production') {\n    return ops$ => forward(ops$);\n  } else {\n    return ops$ =>\n      pipe(\n        ops$,\n        // eslint-disable-next-line no-console\n        tap(op => console.log('[Exchange debug]: Incoming operation: ', op)),\n        forward,\n        tap(result =>\n          // eslint-disable-next-line no-console\n          console.log('[Exchange debug]: Completed operation: ', result)\n        )\n      );\n  }\n};\n","import { filter, pipe, tap } from 'wonka';\nimport { Exchange, Operation, OperationResult } from '../types';\n\n/** A default exchange for debouncing GraphQL requests. */\nexport const dedupExchange: Exchange = ({ forward, dispatchDebug }) => {\n  const inFlightKeys = new Set<number>();\n\n  const filterIncomingOperation = (operation: Operation) => {\n    const { key, kind } = operation;\n    if (kind === 'teardown' || kind === 'mutation') {\n      inFlightKeys.delete(key);\n      return true;\n    }\n\n    const isInFlight = inFlightKeys.has(key);\n    inFlightKeys.add(key);\n\n    if (isInFlight) {\n      dispatchDebug({\n        type: 'dedup',\n        message: 'An operation has been deduped.',\n        operation,\n      });\n    }\n\n    return !isInFlight;\n  };\n\n  const afterOperationResult = ({ operation, hasNext }: OperationResult) => {\n    if (!hasNext) {\n      inFlightKeys.delete(operation.key);\n    }\n  };\n\n  return ops$ => {\n    const forward$ = pipe(ops$, filter(filterIncomingOperation));\n    return pipe(forward(forward$), tap(afterOperationResult));\n  };\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, merge, mergeMap, pipe, share, takeUntil, onPush } from 'wonka';\n\nimport { Exchange } from '../types';\nimport {\n  makeFetchBody,\n  makeFetchURL,\n  makeFetchOptions,\n  makeFetchSource,\n} from '../internal';\n\n/** A default exchange for fetching GraphQL requests. */\nexport const fetchExchange: Exchange = ({ forward, dispatchDebug }) => {\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n    const fetchResults$ = pipe(\n      sharedOps$,\n      filter(operation => {\n        return operation.kind === 'query' || operation.kind === 'mutation';\n      }),\n      mergeMap(operation => {\n        const { key } = operation;\n        const body = makeFetchBody(operation);\n        const url = makeFetchURL(operation, body);\n        const fetchOptions = makeFetchOptions(operation, body);\n\n        dispatchDebug({\n          type: 'fetchRequest',\n          message: 'A fetch request is being executed.',\n          operation,\n          data: {\n            url,\n            fetchOptions,\n          },\n        });\n\n        const source = pipe(\n          makeFetchSource(operation, url, fetchOptions),\n          takeUntil(\n            pipe(\n              sharedOps$,\n              filter(op => op.kind === 'teardown' && op.key === key)\n            )\n          )\n        );\n\n        if (process.env.NODE_ENV !== 'production') {\n          return pipe(\n            source,\n            onPush(result => {\n              const error = !result.data ? result.error : undefined;\n\n              dispatchDebug({\n                type: error ? 'fetchError' : 'fetchSuccess',\n                message: `A ${\n                  error ? 'failed' : 'successful'\n                } fetch response has been returned.`,\n                operation,\n                data: {\n                  url,\n                  fetchOptions,\n                  value: error || result,\n                },\n              });\n            })\n          );\n        }\n\n        return source;\n      })\n    );\n\n    const forward$ = pipe(\n      sharedOps$,\n      filter(operation => {\n        return operation.kind !== 'query' && operation.kind !== 'mutation';\n      }),\n      forward\n    );\n\n    return merge([fetchResults$, forward$]);\n  };\n};\n","import { filter, pipe, tap } from 'wonka';\nimport { Operation, ExchangeIO, ExchangeInput } from '../types';\nimport { noop } from '../utils';\n\n/** This is always the last exchange in the chain; No operation should ever reach it */\nexport const fallbackExchange: ({\n  dispatchDebug,\n}: Pick<ExchangeInput, 'dispatchDebug'>) => ExchangeIO = ({\n  dispatchDebug,\n}) => ops$ =>\n  pipe(\n    ops$,\n    tap<Operation>(operation => {\n      if (\n        operation.kind !== 'teardown' &&\n        process.env.NODE_ENV !== 'production'\n      ) {\n        const message = `No exchange has handled operations of kind \"${operation.kind}\". Check whether you've added an exchange responsible for these operations.`;\n\n        dispatchDebug({\n          type: 'fallbackCatch',\n          message,\n          operation,\n        });\n        console.warn(message);\n      }\n    }),\n    /* All operations that skipped through the entire exchange chain should be filtered from the output */\n    filter<any>(() => false)\n  );\n\nexport const fallbackExchangeIO: ExchangeIO = fallbackExchange({\n  dispatchDebug: noop,\n});\n","import { Exchange, ExchangeInput } from '../types';\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeExchanges = (exchanges: Exchange[]) => ({\n  client,\n  forward,\n  dispatchDebug,\n}: ExchangeInput) =>\n  exchanges.reduceRight(\n    (forward, exchange) =>\n      exchange({\n        client,\n        forward,\n        dispatchDebug(event) {\n          dispatchDebug({\n            timestamp: Date.now(),\n            source: exchange.name,\n            ...event,\n          });\n        },\n      }),\n    forward\n  );\n","import { pipe, tap } from 'wonka';\nimport { Exchange, Operation } from '../types';\nimport { CombinedError } from '../utils';\n\nexport const errorExchange = ({\n  onError,\n}: {\n  onError: (error: CombinedError, operation: Operation) => void;\n}): Exchange => ({ forward }) => ops$ => {\n  return pipe(\n    forward(ops$),\n    tap(({ error, operation }) => {\n      if (error) {\n        onError(error, operation);\n      }\n    })\n  );\n};\n","export { ssrExchange } from './ssr';\nexport { cacheExchange } from './cache';\nexport { subscriptionExchange } from './subscription';\nexport { debugExchange } from './debug';\nexport { dedupExchange } from './dedup';\nexport { fetchExchange } from './fetch';\nexport { fallbackExchangeIO } from './fallback';\nexport { composeExchanges } from './compose';\nexport { errorExchange } from './error';\n\nimport { cacheExchange } from './cache';\nimport { dedupExchange } from './dedup';\nimport { fetchExchange } from './fetch';\n\nexport const defaultExchanges = [dedupExchange, cacheExchange, fetchExchange];\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport {\n  filter,\n  make,\n  makeSubject,\n  onEnd,\n  onPush,\n  onStart,\n  pipe,\n  share,\n  Source,\n  take,\n  takeUntil,\n  publish,\n  subscribe,\n  switchMap,\n  fromValue,\n  merge,\n  map,\n  Subscription,\n} from 'wonka';\n\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { DocumentNode } from 'graphql';\n\nimport { composeExchanges, defaultExchanges } from './exchanges';\nimport { fallbackExchange } from './exchanges/fallback';\n\nimport {\n  AnyVariables,\n  Exchange,\n  ExchangeInput,\n  GraphQLRequest,\n  Operation,\n  OperationContext,\n  OperationResult,\n  OperationType,\n  RequestPolicy,\n  PromisifiedSource,\n  DebugEvent,\n} from './types';\n\nimport {\n  createRequest,\n  withPromise,\n  maskTypename,\n  noop,\n  makeOperation,\n  getOperationType,\n} from './utils';\n\n/** Options for configuring the URQL [client]{@link Client}. */\nexport interface ClientOptions {\n  /** Target endpoint URL such as `https://my-target:8080/graphql`. */\n  url: string;\n  /** Any additional options to pass to fetch. */\n  fetchOptions?: RequestInit | (() => RequestInit);\n  /** An alternative fetch implementation. */\n  fetch?: typeof fetch;\n  /** An ordered array of Exchanges. */\n  exchanges?: Exchange[];\n  /** Activates support for Suspense. */\n  suspense?: boolean;\n  /** The default request policy for requests. */\n  requestPolicy?: RequestPolicy;\n  /** Use HTTP GET for queries. */\n  preferGetMethod?: boolean;\n  /** Mask __typename from results. */\n  maskTypename?: boolean;\n}\n\nexport interface Client {\n  new (options: ClientOptions): Client;\n\n  operations$: Source<Operation>;\n  suspense: boolean;\n\n  /** Start an operation from an exchange */\n  reexecuteOperation: (operation: Operation) => void;\n  /** Event target for monitoring, e.g. for @urql/devtools */\n  subscribeToDebugTarget?: (onEvent: (e: DebugEvent) => void) => Subscription;\n\n  createRequestOperation<\n    Data = any,\n    Variables extends AnyVariables = AnyVariables\n  >(\n    kind: OperationType,\n    request: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): Operation<Data, Variables>;\n\n  /** Executes an Operation by sending it through the exchange pipeline It returns an observable that emits all related exchange results and keeps track of this observable's subscribers. A teardown signal will be emitted when no subscribers are listening anymore. */\n  executeRequestOperation<\n    Data = any,\n    Variables extends AnyVariables = AnyVariables\n  >(\n    operation: Operation<Data, Variables>\n  ): Source<OperationResult<Data, Variables>>;\n\n  query<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentNode | TypedDocumentNode<Data, Variables> | string,\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ): PromisifiedSource<OperationResult<Data, Variables>>;\n\n  readQuery<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentNode | TypedDocumentNode<Data, Variables> | string,\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ): OperationResult<Data, Variables> | null;\n\n  executeQuery<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): Source<OperationResult<Data, Variables>>;\n\n  subscription<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentNode | TypedDocumentNode<Data, Variables> | string,\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ): Source<OperationResult<Data, Variables>>;\n\n  executeSubscription<\n    Data = any,\n    Variables extends AnyVariables = AnyVariables\n  >(\n    query: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): Source<OperationResult<Data, Variables>>;\n\n  mutation<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentNode | TypedDocumentNode<Data, Variables> | string,\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ): PromisifiedSource<OperationResult<Data, Variables>>;\n\n  executeMutation<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): Source<OperationResult<Data, Variables>>;\n}\n\nexport const Client: new (opts: ClientOptions) => Client = function Client(\n  this: Client | {},\n  opts: ClientOptions\n) {\n  if (process.env.NODE_ENV !== 'production' && !opts.url) {\n    throw new Error('You are creating an urql-client without a url.');\n  }\n\n  const replays = new Map<number, OperationResult>();\n  const active: Map<number, Source<OperationResult>> = new Map();\n  const queue: Operation[] = [];\n\n  const baseOpts = {\n    url: opts.url,\n    fetchOptions: opts.fetchOptions,\n    fetch: opts.fetch,\n    preferGetMethod: !!opts.preferGetMethod,\n    requestPolicy: opts.requestPolicy || 'cache-first',\n  };\n\n  // This subject forms the input of operations; executeOperation may be\n  // called to dispatch a new operation on the subject\n  const { source: operations$, next: nextOperation } = makeSubject<Operation>();\n\n  // We define a queued dispatcher on the subject, which empties the queue when it's\n  // activated to allow `reexecuteOperation` to be trampoline-scheduled\n  let isOperationBatchActive = false;\n  function dispatchOperation(operation?: Operation | void) {\n    if (operation) nextOperation(operation);\n    if (!isOperationBatchActive) {\n      isOperationBatchActive = true;\n      while (isOperationBatchActive && (operation = queue.shift()))\n        nextOperation(operation);\n      isOperationBatchActive = false;\n    }\n  }\n\n  /** Defines how result streams are created */\n  const makeResultSource = (operation: Operation) => {\n    let result$ = pipe(\n      results$,\n      filter((res: OperationResult) => {\n        return (\n          res.operation.kind === operation.kind &&\n          res.operation.key === operation.key &&\n          (!res.operation.context._instance ||\n            res.operation.context._instance === operation.context._instance)\n        );\n      })\n    );\n\n    // Mask typename properties if the option for it is turned on\n    if (opts.maskTypename) {\n      result$ = pipe(\n        result$,\n        map(res => ({ ...res, data: maskTypename(res.data, true) }))\n      );\n    }\n\n    // A mutation is always limited to just a single result and is never shared\n    if (operation.kind === 'mutation') {\n      return pipe(\n        result$,\n        onStart(() => nextOperation(operation)),\n        take(1)\n      );\n    }\n\n    const source = pipe(\n      result$,\n      // End the results stream when an active teardown event is sent\n      takeUntil(\n        pipe(\n          operations$,\n          filter(op => op.kind === 'teardown' && op.key === operation.key)\n        )\n      ),\n      switchMap(result => {\n        if (operation.kind !== 'query' || result.stale) {\n          return fromValue(result);\n        }\n\n        return merge([\n          fromValue(result),\n          // Mark a result as stale when a new operation is sent for it\n          pipe(\n            operations$,\n            filter(\n              op =>\n                op.kind === 'query' &&\n                op.key === operation.key &&\n                op.context.requestPolicy !== 'cache-only'\n            ),\n            take(1),\n            map(() => ({ ...result, stale: true }))\n          ),\n        ]);\n      }),\n      onPush(result => {\n        replays.set(operation.key, result);\n      }),\n      onEnd(() => {\n        // Delete the active operation handle\n        replays.delete(operation.key);\n        active.delete(operation.key);\n        // Delete all queued up operations of the same key on end\n        for (let i = queue.length - 1; i >= 0; i--)\n          if (queue[i].key === operation.key) queue.splice(i, 1);\n        // Dispatch a teardown signal for the stopped operation\n        nextOperation(makeOperation('teardown', operation, operation.context));\n      }),\n      share\n    );\n\n    return source;\n  };\n\n  const instance: Client =\n    this instanceof Client ? this : Object.create(Client.prototype);\n  const client: Client = Object.assign(instance, {\n    suspense: !!opts.suspense,\n    operations$,\n\n    reexecuteOperation(operation: Operation) {\n      // Reexecute operation only if any subscribers are still subscribed to the\n      // operation's exchange results\n      if (operation.kind === 'mutation' || active.has(operation.key)) {\n        queue.push(operation);\n        Promise.resolve().then(dispatchOperation);\n      }\n    },\n\n    createRequestOperation(kind, request, opts) {\n      if (!opts) opts = {};\n      const requestOperationType = getOperationType(request.query);\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        kind !== 'teardown' &&\n        requestOperationType !== kind\n      ) {\n        throw new Error(\n          `Expected operation of type \"${kind}\" but found \"${requestOperationType}\"`\n        );\n      }\n      return makeOperation(kind, request, {\n        _instance: kind === 'mutation' ? [] : undefined,\n        ...baseOpts,\n        ...opts,\n        requestPolicy: opts.requestPolicy || baseOpts.requestPolicy,\n        suspense: opts.suspense || (opts.suspense !== false && client.suspense),\n      });\n    },\n\n    executeRequestOperation(operation) {\n      if (operation.kind === 'mutation') {\n        return makeResultSource(operation);\n      }\n\n      return make<OperationResult>(observer => {\n        let source = active.get(operation.key);\n\n        if (!source) {\n          active.set(operation.key, (source = makeResultSource(operation)));\n        }\n\n        const isNetworkOperation =\n          operation.context.requestPolicy === 'cache-and-network' ||\n          operation.context.requestPolicy === 'network-only';\n\n        return pipe(\n          source,\n          onStart(() => {\n            const prevReplay = replays.get(operation.key);\n\n            if (operation.kind === 'subscription') {\n              return dispatchOperation(operation);\n            } else if (isNetworkOperation) {\n              dispatchOperation(operation);\n            }\n\n            if (\n              prevReplay != null &&\n              prevReplay === replays.get(operation.key)\n            ) {\n              observer.next(\n                isNetworkOperation ? { ...prevReplay, stale: true } : prevReplay\n              );\n            } else if (!isNetworkOperation) {\n              dispatchOperation(operation);\n            }\n          }),\n          onEnd(() => {\n            isOperationBatchActive = false;\n            observer.complete();\n          }),\n          subscribe(observer.next)\n        ).unsubscribe;\n      });\n    },\n\n    executeQuery(query, opts) {\n      const operation = client.createRequestOperation('query', query, opts);\n      return client.executeRequestOperation(operation);\n    },\n\n    executeSubscription(query, opts) {\n      const operation = client.createRequestOperation(\n        'subscription',\n        query,\n        opts\n      );\n      return client.executeRequestOperation(operation);\n    },\n\n    executeMutation(query, opts) {\n      const operation = client.createRequestOperation('mutation', query, opts);\n      return client.executeRequestOperation(operation);\n    },\n\n    query(query, variables, context) {\n      if (!context || typeof context.suspense !== 'boolean') {\n        context = { ...context, suspense: false };\n      }\n\n      return withPromise(\n        client.executeQuery(createRequest(query, variables), context)\n      );\n    },\n\n    readQuery(query, variables, context) {\n      let result: OperationResult | null = null;\n\n      pipe(\n        client.query(query, variables, context),\n        subscribe(res => {\n          result = res;\n        })\n      ).unsubscribe();\n\n      return result;\n    },\n\n    subscription(query, variables, context) {\n      return client.executeSubscription(\n        createRequest(query, variables),\n        context\n      );\n    },\n\n    mutation(query, variables, context) {\n      return withPromise(\n        client.executeMutation(createRequest(query, variables), context)\n      );\n    },\n  } as Client);\n\n  let dispatchDebug: ExchangeInput['dispatchDebug'] = noop;\n  if (process.env.NODE_ENV !== 'production') {\n    const { next, source } = makeSubject<DebugEvent>();\n    client.subscribeToDebugTarget = (onEvent: (e: DebugEvent) => void) =>\n      pipe(source, subscribe(onEvent));\n    dispatchDebug = next as ExchangeInput['dispatchDebug'];\n  }\n\n  const exchanges =\n    opts.exchanges !== undefined ? opts.exchanges : defaultExchanges;\n\n  // All exchange are composed into a single one and are called using the constructed client\n  // and the fallback exchange stream\n  const composedExchange = composeExchanges(exchanges);\n\n  // All exchanges receive inputs using which they can forward operations to the next exchange\n  // and receive a stream of results in return, access the client, or dispatch debugging events\n  // All operations then run through the Exchange IOs in a pipeline-like fashion\n  const results$ = share(\n    composedExchange({\n      client,\n      dispatchDebug,\n      forward: fallbackExchange({ dispatchDebug }),\n    })(operations$)\n  );\n\n  // Prevent the `results$` exchange pipeline from being closed by active\n  // cancellations cascading up from components\n  pipe(results$, publish);\n\n  return client;\n} as any;\n\nexport const createClient = (Client as any) as (opts: ClientOptions) => Client;\n"],"names":["collectTypes","obj","types","Array","isArray","item","key","formatNode","node","selection","selectionSet","selections","kind","Kind","FIELD","name","value","formattedDocs","Map","result","Field","query","InlineFragment","enumerable","__key","set","maskTypename","isRoot","data","map","d","Object","defineProperty","acc","__typename","withPromise","source$","toPromise","Promise","resolve","then","hasNext","makeOperation","request","context","meta","operation","noop","applyDefinitions","definition","stringifyDocument","process","console","warn","target","push","gql","body","arguments","length","definitions","fragmentNames","interpolations","DOCUMENT","shouldSkip","cacheExchange","dispatchDebug","client","mapTypeNames","formattedOperation","formatDocument","requestPolicy","ops$","cachedOps$","cachedResult","resultCache","get","type","message","addMetadata","cacheOutcome","reexecuteOperation","stale","filter","op","isOperationCached","sharedOps$","response","typenames","Set","concat","additionalTypenames","typeName","operationCache","operations","values","delete","_key","i","_operations","_typeName","add","forward","ssrExchange","params","invalidateQueue","shift","ssr","includeExtensions","networkError","parse","graphQLErrors","error","CombinedError","deserializeResult","has","isClient","forwardedOps$","tap","JSON","stringify","extensions","serialized","merge","restoreData","restore","initialState","subscriptionExchange","isSubscriptionOperation","isSubscriptionOperationFn","subscriptionResults$","mergeMap","print","complete","isComplete","sub","next","unsubscribe","forward$","debugExchange","log","dedupExchange","inFlightKeys","isInFlight","env","NODE_ENV","filterIncomingOperation","share","makeFetchBody","fetchOptions","makeFetchOptions","url","source","takeUntil","makeFetchSource","undefined","fetchResults$","fallbackExchange","composeExchanges","exchanges","reduceRight","exchange","timestamp","event","errorExchange","defaultExchanges","fetchExchange","opts","active","preferGetMethod","isOperationBatchActive","queue","result$","res","_instance","results$","replays","take","nextOperation","suspense","splice","fromValue","onPush","operations$","Client","this","create","prototype","requestOperationType","Error","baseOpts","executeRequestOperation","make","observer","dispatchOperation","onStart","isNetworkOperation","prevReplay","createRequestOperation","variables","subscribe","executeQuery","createRequest","readQuery","executeSubscription","subscription","makeSubject","onEvent","composedExchange"],"mappings":"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"}