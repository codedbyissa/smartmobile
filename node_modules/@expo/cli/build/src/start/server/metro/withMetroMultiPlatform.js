"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.withWebResolvers = withWebResolvers;
exports.withMetroMultiPlatform = withMetroMultiPlatform;
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var _resolveFrom = _interopRequireDefault(require("resolve-from"));
var _resolveFromProject = require("./resolveFromProject");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function withWebPolyfills(config) {
    const originalGetPolyfills = config.serializer.getPolyfills ? config.serializer.getPolyfills.bind(config.serializer) : ()=>[]
    ;
    const getPolyfills = (ctx)=>{
        if (ctx.platform === "web") {
            return [];
        }
        // Generally uses `rn-get-polyfills`
        return originalGetPolyfills(ctx);
    };
    return {
        ...config,
        serializer: {
            ...config.serializer,
            getPolyfills
        }
    };
}
function getDefaultResolveRequest(projectRoot) {
    const { resolve  } = (0, _resolveFromProject).importMetroResolverFromProject(projectRoot);
    return (context, moduleName, platform)=>{
        return resolve(context, moduleName, platform);
    };
}
/** Extend the `resolver.resolveRequest` method with custom methods that can exit early by returning a `Resolution`. */ function withCustomResolvers(config, projectRoot, resolvers) {
    const originalResolveRequest = config.resolver.resolveRequest || getDefaultResolveRequest(projectRoot);
    return {
        ...config,
        resolver: {
            ...config.resolver,
            resolveRequest (...args) {
                for (const resolver of resolvers){
                    const resolution = resolver(...args);
                    if (resolution) {
                        return resolution;
                    }
                }
                return originalResolveRequest(...args);
            }
        }
    };
}
function withWebResolvers(config, projectRoot) {
    // Get the `transformer.assetRegistryPath`
    // this needs to be unified since you can't dynamically
    // swap out the transformer based on platform.
    const assetRegistryPath = _fs.default.realpathSync(_path.default.resolve((0, _resolveFrom).default(projectRoot, "@react-native/assets/registry.js")));
    // Create a resolver which dynamically disables support for
    // `*.native.*` extensions on web.
    const { resolve  } = (0, _resolveFromProject).importMetroResolverFromProject(projectRoot);
    const extraNodeModules = {
        web: {
            "react-native": _path.default.resolve(require.resolve("react-native-web/package.json"), "..")
        }
    };
    return withCustomResolvers(config, projectRoot, [
        // Add a resolver to alias the web asset resolver.
        (immutableContext, moduleName, platform)=>{
            const context = {
                ...immutableContext
            };
            // Conditionally remap `react-native` to `react-native-web`
            if (platform && platform in extraNodeModules) {
                context.extraNodeModules = extraNodeModules[platform];
            }
            const result = resolve({
                ...context,
                preferNativePlatform: platform !== "web",
                resolveRequest: undefined
            }, moduleName, platform);
            // Replace the web resolver with the original one.
            // This is basically an alias for web-only.
            if (platform === "web" && (result == null ? void 0 : result.type) === "sourceFile" && typeof (result == null ? void 0 : result.filePath) === "string" && result.filePath.endsWith("react-native-web/dist/modules/AssetRegistry/index.js")) {
                // @ts-expect-error: `readonly` for some reason.
                result.filePath = assetRegistryPath;
            }
            return result;
        }, 
    ]);
}
function withMetroMultiPlatform(projectRoot, config, platformBundlers) {
    // Bail out early for performance enhancements if web is not enabled.
    if (platformBundlers.web !== "metro") {
        return config;
    }
    let expoConfigPlatforms = Object.entries(platformBundlers).filter(([, bundler])=>bundler === "metro"
    ).map(([platform])=>platform
    );
    if (Array.isArray(config.resolver.platforms)) {
        expoConfigPlatforms = [
            ...new Set(expoConfigPlatforms.concat(config.resolver.platforms))
        ];
    }
    // @ts-expect-error: typed as `readonly`.
    config.resolver.platforms = expoConfigPlatforms;
    config = withWebPolyfills(config);
    return withWebResolvers(config, projectRoot);
}

//# sourceMappingURL=withMetroMultiPlatform.js.map