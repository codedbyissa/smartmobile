{"version":3,"sources":["../../../../src/start/server/DevelopmentSession.ts"],"sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\n\nimport { APISettings } from '../../api/settings';\nimport {\n  closeDevelopmentSessionAsync,\n  updateDevelopmentSessionAsync,\n} from '../../api/updateDevelopmentSession';\nimport { getUserAsync } from '../../api/user/user';\nimport { Log } from '../../log';\nimport * as ProjectDevices from '../project/devices';\n\nconst debug = require('debug')('expo:start:server:developmentSession') as typeof console.log;\n\nconst UPDATE_FREQUENCY = 20 * 1000; // 20 seconds\n\nasync function isAuthenticatedAsync(): Promise<boolean> {\n  return !!(await getUserAsync().catch(() => null));\n}\n\nexport class DevelopmentSession {\n  private timeout: NodeJS.Timeout | null = null;\n\n  constructor(\n    /** Project root directory. */\n    private projectRoot: string,\n    /** Development Server URL. */\n    public url: string | null\n  ) {}\n\n  /**\n   * Notify the Expo servers that a project is running, this enables the Expo Go app\n   * and Dev Clients to offer a \"recently in development\" section for quick access.\n   *\n   * This method starts an interval that will continue to ping the servers until we stop it.\n   *\n   * @param projectRoot Project root folder, used for retrieving device installation IDs.\n   * @param props.exp Partial Expo config with values that will be used in the Expo Go app.\n   * @param props.runtime which runtime the app should be opened in. `native` for dev clients, `web` for web browsers.\n   * @returns\n   */\n  public async startAsync({\n    exp = getConfig(this.projectRoot).exp,\n    runtime,\n  }: {\n    exp?: Pick<ExpoConfig, 'name' | 'description' | 'slug' | 'primaryColor'>;\n    runtime: 'native' | 'web';\n  }): Promise<void> {\n    if (APISettings.isOffline) {\n      debug('Development session will not ping because the server is offline.');\n      this.stopNotifying();\n      return;\n    }\n\n    const deviceIds = await this.getDeviceInstallationIdsAsync();\n\n    if (!(await isAuthenticatedAsync()) && !deviceIds?.length) {\n      debug(\n        'Development session will not ping because the user is not authenticated and there are no devices.'\n      );\n      this.stopNotifying();\n      return;\n    }\n\n    if (this.url) {\n      debug(`Development session ping (runtime: ${runtime}, url: ${this.url})`);\n      try {\n        await updateDevelopmentSessionAsync({\n          url: this.url,\n          runtime,\n          exp,\n          deviceIds,\n        });\n      } catch (error) {\n        Log.warn(`Non-fatal error updating development session API: ${error}`);\n      }\n    }\n\n    this.stopNotifying();\n\n    this.timeout = setTimeout(() => this.startAsync({ exp, runtime }), UPDATE_FREQUENCY);\n  }\n\n  /** Get all recent devices for the project. */\n  private async getDeviceInstallationIdsAsync(): Promise<string[]> {\n    const { devices } = await ProjectDevices.getDevicesInfoAsync(this.projectRoot);\n    return devices.map(({ installationId }) => installationId);\n  }\n\n  /** Stop notifying the Expo servers that the development session is running. */\n  public stopNotifying() {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n    this.timeout = null;\n  }\n\n  public async closeAsync(): Promise<void> {\n    this.stopNotifying();\n\n    const deviceIds = await this.getDeviceInstallationIdsAsync();\n\n    if (!(await isAuthenticatedAsync()) && !deviceIds?.length) {\n      return;\n    }\n\n    if (this.url) {\n      await closeDevelopmentSessionAsync({\n        url: this.url,\n        deviceIds,\n      });\n    }\n  }\n}\n"],"names":["ProjectDevices","debug","require","UPDATE_FREQUENCY","isAuthenticatedAsync","getUserAsync","catch","DevelopmentSession","constructor","projectRoot","url","timeout","startAsync","exp","getConfig","runtime","APISettings","isOffline","stopNotifying","deviceIds","getDeviceInstallationIdsAsync","length","updateDevelopmentSessionAsync","error","Log","warn","setTimeout","devices","getDevicesInfoAsync","map","installationId","clearTimeout","closeAsync","closeDevelopmentSessionAsync"],"mappings":"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"}