{"version":3,"sources":["../../../src/utils/downloadExpoGoAsync.ts"],"sourcesContent":["import { getExpoHomeDirectory } from '@expo/config/build/getUserState';\nimport path from 'path';\n\nimport { getVersionsAsync, SDKVersion } from '../api/getVersions';\nimport { downloadAppAsync } from './downloadAppAsync';\nimport { CommandError } from './errors';\nimport { profile } from './profile';\nimport { createProgressBar } from './progress';\n\nconst debug = require('debug')('expo:utils:downloadExpoGo') as typeof console.log;\n\nconst platformSettings: Record<\n  string,\n  {\n    shouldExtractResults: boolean;\n    versionsKey: keyof SDKVersion;\n    getFilePath: (filename: string) => string;\n  }\n> = {\n  ios: {\n    versionsKey: 'iosClientUrl',\n    getFilePath: (filename) =>\n      path.join(getExpoHomeDirectory(), 'ios-simulator-app-cache', `${filename}.app`),\n    shouldExtractResults: true,\n  },\n  android: {\n    versionsKey: 'androidClientUrl',\n    getFilePath: (filename) =>\n      path.join(getExpoHomeDirectory(), 'android-apk-cache', `${filename}.apk`),\n    shouldExtractResults: false,\n  },\n};\n\n/** Download the Expo Go app from the Expo servers (if only it was this easy for every app). */\nexport async function downloadExpoGoAsync(\n  platform: keyof typeof platformSettings,\n  {\n    url,\n    sdkVersion,\n  }: {\n    url?: string;\n    sdkVersion?: string;\n  }\n): Promise<string> {\n  const { getFilePath, versionsKey, shouldExtractResults } = platformSettings[platform];\n\n  const bar = createProgressBar('Downloading the Expo Go app [:bar] :percent :etas', {\n    width: 64,\n    total: 100,\n    clear: true,\n    complete: '=',\n    incomplete: ' ',\n  });\n\n  if (!url) {\n    if (!sdkVersion) {\n      throw new CommandError(\n        `Unable to determine which Expo Go version to install (platform: ${platform})`\n      );\n    }\n    const { sdkVersions: versions } = await getVersionsAsync();\n\n    const version = versions[sdkVersion];\n    if (!version) {\n      throw new CommandError(\n        `Unable to find a version of Expo Go for SDK ${sdkVersion} (platform: ${platform})`\n      );\n    }\n    debug(`Installing Expo Go version for SDK ${sdkVersion} at URL: ${version[versionsKey]}`);\n    url = version[versionsKey] as string;\n  }\n\n  const filename = path.parse(url).name;\n\n  try {\n    const outputPath = getFilePath(filename);\n    debug(`Downloading Expo Go from \"${url}\" to \"${outputPath}\".`);\n    debug(\n      `The requested copy of Expo Go might already be cached in: \"${getExpoHomeDirectory()}\". You can disable the cache with EXPO_NO_CACHE=1`\n    );\n    await profile(downloadAppAsync)({\n      url,\n      // Save all encrypted cache data to `~/.expo/expo-go`\n      cacheDirectory: 'expo-go',\n      outputPath,\n      extract: shouldExtractResults,\n      onProgress({ progress }) {\n        if (bar) {\n          bar.tick(1, progress);\n        }\n      },\n    });\n    return outputPath;\n  } finally {\n    bar?.terminate();\n  }\n}\n"],"names":["downloadExpoGoAsync","debug","require","platformSettings","ios","versionsKey","getFilePath","filename","path","join","getExpoHomeDirectory","shouldExtractResults","android","platform","url","sdkVersion","bar","createProgressBar","width","total","clear","complete","incomplete","CommandError","sdkVersions","versions","getVersionsAsync","version","parse","name","outputPath","profile","downloadAppAsync","cacheDirectory","extract","onProgress","progress","tick","terminate"],"mappings":"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"}