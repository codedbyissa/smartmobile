{"version":3,"file":"Symbolicator.js","names":["Symbolicator","inferPlatformFromStack","stack","frame","file","searchParams","pathname","URL","platform","get","bundleFilename","split","reverse","platformOrExtension","extension","constructor","config","process","frames","startsWith","includes","push","processedFrames","sourceMapConsumerCache","rawSourceMap","getSourceMapAsync","url","sourceMapConsumer","SourceMapConsumer","processedFrame","customizeFrame","processFrame","codeFrame","getCodeFrame","key","lineNumber","column","collapse","consumer","lookup","originalPositionFor","line","source","methodName","name","filename","getFileAsync","replace","fs","promises","readFile","content","codeFrameColumns","start","forceColor","location","row","fileName","error","logger","tag","message","undefined"],"sources":["../../src/webpack/Symbolicator.ts"],"sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2021 Callstack, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Based on https://github.com/callstack/repack/blob/3c1e0597557d09ab64fab0a29a86d3c487a23ef0/packages/repack/src/server/Symbolicator.ts\n */\n\nimport { codeFrameColumns } from '@babel/code-frame';\nimport Log from '@expo/bunyan';\nimport fs from 'fs';\nimport { SourceMapConsumer } from 'source-map';\nimport { URL } from 'url';\n\n/**\n * Raw React Native stack frame.\n */\nexport interface ReactNativeStackFrame {\n  lineNumber: number | null;\n  column: number | null;\n  file: string | null;\n  methodName: string;\n}\n\n/**\n * React Native stack frame used as input when processing by {@link Symbolicator}.\n */\nexport interface InputStackFrame extends ReactNativeStackFrame {\n  file: string;\n}\n\n/**\n * Final symbolicated stack frame.\n */\nexport interface StackFrame extends InputStackFrame {\n  collapse: boolean;\n}\n\n/**\n * Represents [@babel/core-frame](https://babeljs.io/docs/en/babel-code-frame).\n */\nexport interface CodeFrame {\n  content: string;\n  location: {\n    row: number;\n    column: number;\n  };\n  fileName: string;\n}\n\n/**\n * Represents results of running {@link process} method on {@link Symbolicator} instance.\n */\nexport interface SymbolicatorResults {\n  codeFrame: CodeFrame | null;\n  stack: StackFrame[];\n}\n\n/**\n * Class for transforming stack traces from React Native application with using Source Map.\n * Raw stack frames produced by React Native, points to some location from the bundle\n * eg `index.bundle?platform=ios:567:1234`. By using Source Map for that bundle `Symbolicator`\n * produces frames that point to source code inside your project eg `Hello.tsx:10:9`.\n */\nexport class Symbolicator {\n  /**\n   * Infer platform from stack frames.\n   * Usually at least one frame has `file` field with the bundle URL eg:\n   * `http://localhost:8081/index.bundle?platform=ios&...`, which can be used to infer platform.\n   *\n   * @param stack Array of stack frames.\n   * @returns Inferred platform or `undefined` if cannot infer.\n   */\n  static inferPlatformFromStack(stack: ReactNativeStackFrame[]) {\n    for (const frame of stack) {\n      if (!frame.file) {\n        return null;\n      }\n\n      const { searchParams, pathname } = new URL(frame.file, 'file://');\n      const platform = searchParams.get('platform');\n      if (platform) {\n        return platform;\n      } else {\n        const [bundleFilename] = pathname.split('/').reverse();\n        const [, platformOrExtension, extension] = bundleFilename.split('.');\n        if (extension) {\n          return platformOrExtension;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Cache with initialized `SourceMapConsumer` to improve symbolication performance.\n   */\n  sourceMapConsumerCache: Record<string, SourceMapConsumer> = {};\n\n  constructor(\n    public config: {\n      projectRoot: string;\n      logger: Log;\n      customizeFrame: (frame: StackFrame) => StackFrame;\n      getFileAsync: (props: { url: string; platform: string }) => Promise<string>;\n      getSourceMapAsync: (props: { url: string; platform: string }) => Promise<string>;\n    }\n  ) {}\n\n  /**\n   * Process raw React Native stack frames and transform them using Source Maps.\n   * Method will try to symbolicate as much data as possible, but if the Source Maps\n   * are not available, invalid or the original positions/data is not found in Source Maps,\n   * the method will return raw values - the same as supplied with `stack` parameter.\n   * For example out of 10 frames, it's possible that only first 7 will be symbolicated and the\n   * remaining 3 will be unchanged.\n   *\n   * @param stack Raw stack frames.\n   * @returns Symbolicated stack frames.\n   */\n  async process(\n    stack: ReactNativeStackFrame[],\n    { platform }: { platform: string }\n  ): Promise<SymbolicatorResults> {\n    // TODO: add debug logging\n    const frames: InputStackFrame[] = [];\n    for (const frame of stack) {\n      const { file } = frame;\n\n      if (file?.startsWith('http') && !file.includes('debuggerWorker')) {\n        frames.push(frame as InputStackFrame);\n      }\n    }\n\n    try {\n      const processedFrames: StackFrame[] = [];\n      for (const frame of frames) {\n        if (!this.sourceMapConsumerCache[frame.file]) {\n          const rawSourceMap = await this.config.getSourceMapAsync({\n            url: frame.file,\n            platform,\n          });\n          const sourceMapConsumer = await new SourceMapConsumer(rawSourceMap as any);\n          this.sourceMapConsumerCache[frame.file] = sourceMapConsumer;\n        }\n        const processedFrame = this.config.customizeFrame(this.processFrame(frame));\n\n        processedFrames.push(processedFrame);\n      }\n\n      const codeFrame = await this.getCodeFrame(processedFrames, platform);\n      return {\n        stack: processedFrames,\n        codeFrame: codeFrame ?? null,\n      };\n    } finally {\n      for (const key in this.sourceMapConsumerCache) {\n        delete this.sourceMapConsumerCache[key];\n      }\n    }\n  }\n\n  private processFrame(frame: InputStackFrame): StackFrame {\n    if (!frame.lineNumber || !frame.column) {\n      return {\n        ...frame,\n        collapse: false,\n      };\n    }\n\n    const consumer = this.sourceMapConsumerCache[frame.file];\n    if (!consumer) {\n      return {\n        ...frame,\n        collapse: false,\n      };\n    }\n\n    const lookup = consumer.originalPositionFor({\n      line: frame.lineNumber,\n      column: frame.column,\n    });\n\n    // If lookup fails, we get the same shape object, but with\n    // all values set to null\n    if (!lookup.source) {\n      // It is better to gracefully return the original frame\n      // than to throw an exception\n      return {\n        ...frame,\n        collapse: false,\n      };\n    }\n\n    return {\n      lineNumber: lookup.line || frame.lineNumber,\n      column: lookup.column || frame.column,\n      file: lookup.source,\n      methodName: lookup.name || frame.methodName,\n      collapse: false,\n    };\n  }\n\n  private async getCodeFrame(\n    processedFrames: StackFrame[],\n    platform: string\n  ): Promise<CodeFrame | undefined> {\n    for (const frame of processedFrames) {\n      if (frame.collapse || !frame.lineNumber || !frame.column) {\n        continue;\n      }\n\n      try {\n        let filename;\n        let source;\n\n        if (frame.file.startsWith('http') && frame.file.includes('index.bundle')) {\n          // Frame points to the bundle so we need to read bundle from WDM's FS.\n          filename = frame.file;\n          source = await this.config.getFileAsync({ url: '/index.bundle', platform });\n        } else {\n          filename = frame.file.replace('webpack://', '');\n          source = await fs.promises.readFile(filename, 'utf8');\n        }\n\n        return {\n          content: codeFrameColumns(\n            source,\n            {\n              start: { column: frame.column, line: frame.lineNumber },\n            },\n            { forceColor: true }\n          ),\n          location: {\n            row: frame.lineNumber,\n            column: frame.column,\n          },\n          fileName: filename,\n        };\n      } catch (error: any) {\n        this.config.logger.error(\n          { tag: 'dev-server' },\n          'Symbolication failed to create code preview: ' + error.message\n        );\n      }\n    }\n    return undefined;\n  }\n}\n"],"mappings":"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"}