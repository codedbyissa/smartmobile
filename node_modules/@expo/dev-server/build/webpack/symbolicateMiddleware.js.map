{"version":3,"file":"symbolicateMiddleware.js","names":["customizeFrame","frame","collapse","Boolean","file","INTERNAL_CALLSITES_REGEX","test","column","methodName","match","createSymbolicateMiddleware","projectRoot","logger","compiler","getFilenameFromUrl","createGetFileNameFromUrl","symbolicate","Symbolicator","getFileAsync","props","fileName","getFileFromCompilerAsync","platform","getSourceMapAsync","fallbackSourceMapFilename","bundle","sourceMappingUrl","exec","sourceMapBasename","split","sourceMapFilename","path","join","dirname","parseError","error","console","warn","req","res","rawBody","writeHead","end","stack","JSON","parse","getPlatformFromRequest","inferPlatformFromStack","parsed","process","stringify","statusCode","message"],"sources":["../../src/webpack/symbolicateMiddleware.ts"],"sourcesContent":["import Log from '@expo/bunyan';\nimport { INTERNAL_CALLSITES_REGEX } from '@expo/metro-config';\nimport type { IncomingMessage, ServerResponse } from 'http';\nimport path from 'path';\n\nimport { ReactNativeStackFrame, StackFrame, Symbolicator } from './Symbolicator';\nimport {\n  AnyCompiler,\n  createGetFileNameFromUrl,\n  getFileFromCompilerAsync,\n  getPlatformFromRequest,\n} from './getFileAsync';\n\n// Customize the stack frames like we do in Metro projects.\nfunction customizeFrame(frame: StackFrame) {\n  let collapse = Boolean(frame.file && INTERNAL_CALLSITES_REGEX.test(frame.file));\n\n  if (!collapse) {\n    // This represents the first frame of the stacktrace.\n    // Often this looks like: `__r(0);`.\n    // The URL will also be unactionable in the app and therefore not very useful to the developer.\n    if (\n      frame.column === 3 &&\n      frame.methodName === 'global code' &&\n      frame.file?.match(/^https?:\\/\\//g)\n    ) {\n      collapse = true;\n    }\n  }\n\n  return { ...(frame || {}), collapse };\n}\n\nexport function createSymbolicateMiddleware({\n  projectRoot,\n  logger,\n  compiler,\n}: {\n  projectRoot: string;\n  logger: Log;\n  compiler: AnyCompiler;\n}) {\n  const getFilenameFromUrl = createGetFileNameFromUrl(compiler);\n\n  const symbolicate = new Symbolicator({\n    projectRoot,\n    logger,\n    customizeFrame,\n    async getFileAsync(props) {\n      const fileName = getFilenameFromUrl(props);\n      return getFileFromCompilerAsync(compiler, { fileName, platform: props.platform });\n    },\n    async getSourceMapAsync(props) {\n      const fileName = getFilenameFromUrl(props);\n      const fallbackSourceMapFilename = `${fileName}.map`;\n      const bundle = await getFileFromCompilerAsync(compiler, {\n        fileName,\n        platform: props.platform,\n      });\n      const sourceMappingUrl = /sourceMappingURL=(.+)$/.exec(bundle)?.[1];\n      const sourceMapBasename = sourceMappingUrl?.split('?')?.[0];\n\n      let sourceMapFilename = fallbackSourceMapFilename;\n      if (sourceMapBasename) {\n        sourceMapFilename = path.join(path.dirname(fileName), sourceMapBasename);\n      }\n\n      let parseError: Error | null = null;\n      for (const file of [sourceMapFilename, fallbackSourceMapFilename]) {\n        try {\n          return await getFileFromCompilerAsync(compiler, {\n            fileName: file,\n            platform: props.platform,\n          });\n        } catch (error: any) {\n          parseError = error;\n          console.warn('Failed to read source map from sourceMappingURL:', file);\n          // logger.warn({ tag: 'dev-server' }, 'Failed to read source map from sourceMappingURL');\n        }\n      }\n      throw parseError;\n    },\n  });\n\n  return async function (\n    req: IncomingMessage & { body?: any; rawBody?: any },\n    res: ServerResponse\n  ) {\n    try {\n      if (!req.rawBody) {\n        return res.writeHead(400).end('Missing request rawBody.');\n      }\n\n      const { stack } = JSON.parse(req.rawBody as string) as {\n        stack: ReactNativeStackFrame[];\n      };\n\n      const platform =\n        getPlatformFromRequest(req) ?? Symbolicator.inferPlatformFromStack(stack) ?? 'web';\n\n      if (!platform) {\n        return res\n          .writeHead(400)\n          .end(\n            'Missing expo-platform header, platform query parameter, or platform parameter in source map comment url'\n          );\n      }\n\n      const parsed = await symbolicate.process(stack, { platform });\n      return res.end(JSON.stringify(parsed));\n    } catch (error: any) {\n      console.error(`Failed to symbolicate: ${error} ${error.stack}`);\n      // logger.error({ tag: 'dev-server' }, `Failed to symbolicate: ${error} ${error.stack}`);\n      res.statusCode = 500;\n      return res.end(JSON.stringify({ error: error.message }));\n    }\n  };\n}\n"],"mappings":"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"}