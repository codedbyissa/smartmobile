{"version":3,"file":"createJsInspectorMiddleware.js","names":["createJsInspectorMiddleware","req","res","next","origin","searchParams","URL","url","getServerBase","applicationId","get","writeHead","end","app","queryInspectorAppAsync","method","data","JSON","stringify","length","toString","openJsInspector","scheme","socket","TLSSocket","encrypted","localAddress","localPort","address","net","isIPv6"],"sources":["../../src/middleware/createJsInspectorMiddleware.ts"],"sourcesContent":["import type { NextHandleFunction } from 'connect';\nimport type { IncomingMessage, ServerResponse } from 'http';\nimport net from 'net';\nimport { TLSSocket } from 'tls';\nimport { URL } from 'url';\n\nimport { openJsInspector, queryInspectorAppAsync } from '../JsInspector';\n\nexport default function createJsInspectorMiddleware(): NextHandleFunction {\n  return async function (req: IncomingMessage, res: ServerResponse, next: (err?: Error) => void) {\n    const { origin, searchParams } = new URL(req.url ?? '/', getServerBase(req));\n    const applicationId = searchParams.get('applicationId');\n    if (!applicationId) {\n      res.writeHead(400).end('Missing applicationId');\n      return;\n    }\n\n    const app = await queryInspectorAppAsync(origin, applicationId);\n    if (!app) {\n      res.writeHead(404).end('Unable to find inspector target from metro-inspector-proxy');\n      return;\n    }\n\n    if (req.method === 'GET') {\n      const data = JSON.stringify(app);\n      res.writeHead(200, {\n        'Content-Type': 'application/json; charset=UTF-8',\n        'Cache-Control': 'no-cache',\n        'Content-Length': data.length.toString(),\n      });\n      res.end(data);\n    } else if (req.method === 'POST' || req.method === 'PUT') {\n      openJsInspector(app);\n      res.end();\n    } else {\n      res.writeHead(405);\n    }\n  };\n}\n\nfunction getServerBase(req: IncomingMessage): string {\n  const scheme =\n    req.socket instanceof TLSSocket && req.socket.encrypted === true ? 'https' : 'http';\n  const { localAddress, localPort } = req.socket;\n  const address = localAddress && net.isIPv6(localAddress) ? `[${localAddress}]` : localAddress;\n  return `${scheme}:${address}:${localPort}`;\n}\n"],"mappings":";;;;;;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;AAEe,SAASA,2BAAT,GAA2D;EACxE,OAAO,gBAAgBC,GAAhB,EAAsCC,GAAtC,EAA2DC,IAA3D,EAAwF;IAAA;;IAC7F,MAAM;MAAEC,MAAF;MAAUC;IAAV,IAA2B,KAAIC,UAAJ,cAAQL,GAAG,CAACM,GAAZ,+CAAmB,GAAnB,EAAwBC,aAAa,CAACP,GAAD,CAArC,CAAjC;IACA,MAAMQ,aAAa,GAAGJ,YAAY,CAACK,GAAb,CAAiB,eAAjB,CAAtB;;IACA,IAAI,CAACD,aAAL,EAAoB;MAClBP,GAAG,CAACS,SAAJ,CAAc,GAAd,EAAmBC,GAAnB,CAAuB,uBAAvB;MACA;IACD;;IAED,MAAMC,GAAG,GAAG,MAAM,IAAAC,qCAAA,EAAuBV,MAAvB,EAA+BK,aAA/B,CAAlB;;IACA,IAAI,CAACI,GAAL,EAAU;MACRX,GAAG,CAACS,SAAJ,CAAc,GAAd,EAAmBC,GAAnB,CAAuB,4DAAvB;MACA;IACD;;IAED,IAAIX,GAAG,CAACc,MAAJ,KAAe,KAAnB,EAA0B;MACxB,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeL,GAAf,CAAb;MACAX,GAAG,CAACS,SAAJ,CAAc,GAAd,EAAmB;QACjB,gBAAgB,iCADC;QAEjB,iBAAiB,UAFA;QAGjB,kBAAkBK,IAAI,CAACG,MAAL,CAAYC,QAAZ;MAHD,CAAnB;MAKAlB,GAAG,CAACU,GAAJ,CAAQI,IAAR;IACD,CARD,MAQO,IAAIf,GAAG,CAACc,MAAJ,KAAe,MAAf,IAAyBd,GAAG,CAACc,MAAJ,KAAe,KAA5C,EAAmD;MACxD,IAAAM,8BAAA,EAAgBR,GAAhB;MACAX,GAAG,CAACU,GAAJ;IACD,CAHM,MAGA;MACLV,GAAG,CAACS,SAAJ,CAAc,GAAd;IACD;EACF,CA5BD;AA6BD;;AAED,SAASH,aAAT,CAAuBP,GAAvB,EAAqD;EACnD,MAAMqB,MAAM,GACVrB,GAAG,CAACsB,MAAJ,YAAsBC,gBAAtB,IAAmCvB,GAAG,CAACsB,MAAJ,CAAWE,SAAX,KAAyB,IAA5D,GAAmE,OAAnE,GAA6E,MAD/E;EAEA,MAAM;IAAEC,YAAF;IAAgBC;EAAhB,IAA8B1B,GAAG,CAACsB,MAAxC;EACA,MAAMK,OAAO,GAAGF,YAAY,IAAIG,cAAA,CAAIC,MAAJ,CAAWJ,YAAX,CAAhB,GAA4C,IAAGA,YAAa,GAA5D,GAAiEA,YAAjF;EACA,OAAQ,GAAEJ,MAAO,IAAGM,OAAQ,IAAGD,SAAU,EAAzC;AACD"}