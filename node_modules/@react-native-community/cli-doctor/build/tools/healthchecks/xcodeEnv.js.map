{"version":3,"sources":["../../../src/tools/healthchecks/xcodeEnv.ts"],"names":["xcodeEnvFile","pathSeparator","removeLastPathComponent","pathString","components","split","splice","length","join","pathHasXcodeEnvFile","xcodeEnvPath","fs","existsSync","pathDoesNotHaveXcodeEnvFile","label","description","getDiagnostics","projectRoot","allPathsHasXcodeEnvFile","map","basePath","reduce","previousValue","currentValue","needsToBeFixed","runAutomaticFix","templateXcodeEnv","templateIosPath","path","dirname","require","resolve","src","copyFileAsync","copyFile","filter","forEach","destFilePath"],"mappings":";;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,MAAMA,YAAY,GAAG,YAArB;AACA,MAAMC,aAAa,GAAG,GAAtB;;AAEA,SAASC,uBAAT,CAAiCC,UAAjC,EAA6D;AAC3D,QAAMC,UAAU,GAAGD,UAAU,CAACE,KAAX,CAAiBJ,aAAjB,CAAnB;AACAG,EAAAA,UAAU,CAACE,MAAX,CAAkBF,UAAU,CAACG,MAAX,GAAoB,CAAtC,EAAyC,CAAzC;AACA,SAAOH,UAAU,CAACI,IAAX,CAAgBP,aAAhB,CAAP;AACD;;AAED,SAASQ,mBAAT,CAA6BN,UAA7B,EAA0D;AACxD,QAAMO,YAAY,GAAGP,UAAU,GAAGF,aAAb,GAA6BD,YAAlD;AACA,SAAOW,cAAGC,UAAH,CAAcF,YAAd,CAAP;AACD;;AAED,SAASG,2BAAT,CAAqCV,UAArC,EAAkE;AAChE,SAAO,CAACM,mBAAmB,CAACN,UAAD,CAA3B;AACD;;eAEc;AACbW,EAAAA,KAAK,EAAE,YADM;AAEbC,EAAAA,WAAW,EAAE,qCAFA;AAGbC,EAAAA,cAAc,EAAE,YAAY;AAC1B,UAAMC,WAAW,GAAG,kCAApB;AACA,UAAMC,uBAAuB,GAAG,wCAAiBD,WAAjB,EAC7BE,GAD6B,CACxBhB,UAAD,IAAgB;AACnB,YAAMiB,QAAQ,GAAGlB,uBAAuB,CAACC,UAAD,CAAxC;AACA,aAAOM,mBAAmB,CAACW,QAAD,CAA1B;AACD,KAJ6B,EAK7BC,MAL6B,CAKtB,CAACC,aAAD,EAAgBC,YAAhB,KAAiCD,aAAa,IAAIC,YAL5B,CAAhC;AAMA,WAAO;AACLC,MAAAA,cAAc,EAAE,CAACN;AADZ,KAAP;AAGD,GAdY;AAebO,EAAAA,eAAe,EAAE,YAAY;AAC3B,UAAMC,gBAAgB,GAAG,YAAzB;AACA,UAAMT,WAAW,GAAG,kCAApB;;AAEA,UAAMU,eAAe,GAAGC,gBAAKC,OAAL,CACtBC,OAAO,CAACC,OAAR,CAAgB,2BAAhB,CADsB,CAAxB;;AAIA,UAAMC,GAAG,GAAGL,eAAe,GAAGD,gBAA9B;AACA,UAAMO,aAAa,GAAG,uBAAUtB,cAAGuB,QAAb,CAAtB;AAEA,4CAAiBjB,WAAjB,EACGE,GADH,CACOjB,uBADP,EAEE;AAFF,KAGGiC,MAHH,CAGUtB,2BAHV,EAIGuB,OAJH,CAIW,MAAOjC,UAAP,IAAsB;AAC7B,YAAMkC,YAAY,GAAGlC,UAAU,GAAGF,aAAb,GAA6BD,YAAlD;AACA,YAAMiC,aAAa,CAACD,GAAD,EAAMK,YAAN,CAAnB;AACD,KAPH;AAQD;AAlCY,C","sourcesContent":["import {HealthCheckInterface} from '../../types';\nimport fs from 'fs';\nimport path from 'path';\nimport {promisify} from 'util';\nimport {findProjectRoot} from '@react-native-community/cli-tools';\nimport {findPodfilePaths} from '@react-native-community/cli-platform-ios';\n\nconst xcodeEnvFile = '.xcode.env';\nconst pathSeparator = '/';\n\nfunction removeLastPathComponent(pathString: string): string {\n  const components = pathString.split(pathSeparator);\n  components.splice(components.length - 1, 1);\n  return components.join(pathSeparator);\n}\n\nfunction pathHasXcodeEnvFile(pathString: string): boolean {\n  const xcodeEnvPath = pathString + pathSeparator + xcodeEnvFile;\n  return fs.existsSync(xcodeEnvPath);\n}\n\nfunction pathDoesNotHaveXcodeEnvFile(pathString: string): boolean {\n  return !pathHasXcodeEnvFile(pathString);\n}\n\nexport default {\n  label: '.xcode.env',\n  description: 'File to customize Xcode environment',\n  getDiagnostics: async () => {\n    const projectRoot = findProjectRoot();\n    const allPathsHasXcodeEnvFile = findPodfilePaths(projectRoot)\n      .map((pathString) => {\n        const basePath = removeLastPathComponent(pathString);\n        return pathHasXcodeEnvFile(basePath);\n      })\n      .reduce((previousValue, currentValue) => previousValue && currentValue);\n    return {\n      needsToBeFixed: !allPathsHasXcodeEnvFile,\n    };\n  },\n  runAutomaticFix: async () => {\n    const templateXcodeEnv = '_xcode.env';\n    const projectRoot = findProjectRoot();\n\n    const templateIosPath = path.dirname(\n      require.resolve('react-native/template/ios'),\n    );\n\n    const src = templateIosPath + templateXcodeEnv;\n    const copyFileAsync = promisify(fs.copyFile);\n\n    findPodfilePaths(projectRoot)\n      .map(removeLastPathComponent)\n      // avoid overriding existing .xcode.env\n      .filter(pathDoesNotHaveXcodeEnvFile)\n      .forEach(async (pathString) => {\n        const destFilePath = pathString + pathSeparator + xcodeEnvFile;\n        await copyFileAsync(src, destFilePath);\n      });\n  },\n} as HealthCheckInterface;\n"]}