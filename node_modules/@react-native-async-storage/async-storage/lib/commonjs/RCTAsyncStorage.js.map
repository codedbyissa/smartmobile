{"version":3,"sources":["RCTAsyncStorage.ts"],"names":["RCTAsyncStorage","NativeModules","TurboModuleRegistry","get"],"mappings":";;;;;;;AACA;;AACA;;AAFA;AAIA,IAAIA,eAAe,GACjBC,2BAAc,sBAAd,KAAyC;AACzCA,2BAAc,0BAAd,CADA,IAEAA,2BAAc,iBAAd,CAHF;;AAKA,IAAI,CAACD,eAAD,IAAoB,6EAAxB,EAA8D;AAC5D;AACA;AACA;AACA,MAAIE,gCAAJ,EAAyB;AACvBF,IAAAA,eAAe,GACbE,iCAAoBC,GAApB,CAAwB,sBAAxB,KACAD,iCAAoBC,GAApB,CAAwB,mBAAxB,CAFF;AAGD,GAJD,MAIO;AACLH,IAAAA,eAAe,GACbC,2BAAc,sBAAd,KACAA,2BAAc,mBAAd,CAFF;AAGD;AACF;;eAEcD,e","sourcesContent":["// @ts-ignore Module '\"react-native\"' has no exported member 'TurboModuleRegistry'.\nimport { NativeModules, TurboModuleRegistry } from 'react-native';\nimport { shouldFallbackToLegacyNativeModule } from './shouldFallbackToLegacyNativeModule';\n\nlet RCTAsyncStorage =\n  NativeModules['PlatformLocalStorage'] || // Support for external modules, like react-native-windows\n  NativeModules['RNC_AsyncSQLiteDBStorage'] ||\n  NativeModules['RNCAsyncStorage'];\n\nif (!RCTAsyncStorage && shouldFallbackToLegacyNativeModule()) {\n  // TurboModuleRegistry falls back to NativeModules so we don't have to try go\n  // assign NativeModules' counterparts if TurboModuleRegistry would resolve\n  // with undefined.\n  if (TurboModuleRegistry) {\n    RCTAsyncStorage =\n      TurboModuleRegistry.get('AsyncSQLiteDBStorage') ||\n      TurboModuleRegistry.get('AsyncLocalStorage');\n  } else {\n    RCTAsyncStorage =\n      NativeModules['AsyncSQLiteDBStorage'] ||\n      NativeModules['AsyncLocalStorage'];\n  }\n}\n\nexport default RCTAsyncStorage;\n"]}